<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on lamaper</title>
    <link>https://lamaper.github.io/categories/coding/</link>
    <description>Recent content in Coding on lamaper</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 15 Jan 2025 23:00:00 +0800</lastBuildDate>
    <atom:link href="https://lamaper.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt6.7.3静态编译全过程</title>
      <link>https://lamaper.github.io/post/programing/qt/qt-static/qt-static/</link>
      <pubDate>Wed, 15 Jan 2025 23:00:00 +0800</pubDate>
      <guid>https://lamaper.github.io/post/programing/qt/qt-static/qt-static/</guid>
      <description>&lt;p&gt;自从2022年与学长们一起使用Qt尝试开发软件以来，我一直苦恼于Qt生成的桌面程序的庞大体积，因为动态链接库的巨大，导致再简单的程序也有54.5MB以上的体积，如何解决这个问题呢？解决方法是静态编译Qt的源代码。但由于当时电脑比较垃圾，个人也没研究透彻，静态编译过程中出现了各种问题导致失败。今天终于解决了这问题，以此写一篇博客供以后参考回忆。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一下载与安装必要文件和程序&#34;&gt;一、下载与安装必要文件和程序&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1下载源码&#34;&gt;1、下载源码&lt;/h3&gt;&#xA;&lt;p&gt;静态编译是在Qt源代码基础上进行的，因此本地必须要有Qt的源代码。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://download.qt.io/archive/qt/6.7/6.7.3/single/qt-everywhere-src-6.7.3.zip&#34;&gt;在Qt官网下载Qt6.7.3的源码&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;也可以在&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/6.7/6.7.3/single/&#34;&gt;Index of /qt/archive/qt/6.7/6.7.3/single/ | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror&lt;/a&gt;下载&lt;/p&gt;&#xA;&lt;p&gt;源码的地址是&lt;code&gt;archive/qt/6.7/6.7.3/single/qt-everywhere-src-6.7.3.zip&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;下载好后直接解压到任意目录即可&lt;/p&gt;&#xA;&lt;h3 id=&#34;2配置环境&#34;&gt;2、配置环境&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1安装visual-studio&#34;&gt;（1）安装Visual Studio&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/zh-hans/downloads/&#34;&gt;下载 Visual Studio Tools - 免费安装 Windows、Mac、Linux&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择社区版，勾选“使用C++的桌面开发”并执行安装即可&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787dbb1d0e0a243d4f49a53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;2下载并安装cmake&#34;&gt;（2）下载并安装cmake&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cmake.org/download/&#34;&gt;Download CMake&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择Windows x64 Installer即可&lt;/p&gt;&#xA;&lt;p&gt;注意勾选添加环境变量&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787db58d0e0a243d4f49a4e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;3调整ninja或安装ninja&#34;&gt;（3）调整ninja或安装ninja&lt;/h4&gt;&#xA;&lt;p&gt;如果已经安装过Qt，可以在Qt目录下&lt;code&gt;Qt/Tools/Ninja&lt;/code&gt;找到&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787dae6d0e0a243d4f49a2b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如果没有安装Qt，可以在https://github.com/ninja-build/ninja/releases下载&lt;/p&gt;&#xA;&lt;p&gt;然后将其加入环境变量&lt;/p&gt;&#xA;&lt;h4 id=&#34;4安装perlrubypython3&#34;&gt;（4）安装Perl、Ruby、Python3&lt;/h4&gt;&#xA;&lt;p&gt;除了Python3是已知必须的以外，Perl和Ruby是我在其他博客中看到的，秉持着一次搞定的心态，我全部安装了，但是不能确定Ruby和Perl是否真的在静态编译中起到了作用（也许是某些历史遗留问题）&lt;/p&gt;&#xA;&lt;p&gt;这里不深入研究这个问题，能装就都装上。&lt;/p&gt;&#xA;&lt;p&gt;Ruby下载地址： &lt;a href=&#34;https://rubyinstaller.org/downloads/&#34;&gt;https://rubyinstaller.org/downloads/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Python下载地址： &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;https://www.python.org/downloads/windows/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Perl下载地址： &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;https://www.python.org/downloads/windows/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是，Ruby最好选择Ruby+Devkit版本。其中Ruby和Python都带有自己的exe安装程序，但是Perl下载下来是一个zip压缩包，完全解压到安装目录后，根据readme.txt中的内容进行设置。实际上运行&lt;code&gt;portableshell.bat&lt;/code&gt;即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二进行编译&#34;&gt;二、进行编译&lt;/h2&gt;&#xA;&lt;p&gt;在解压的源码目录下&lt;code&gt;.\Qt\qt-everywhere-src-6.7.3\qtbase\mkspecs\common&lt;/code&gt;，找到&lt;code&gt;msvc-desktop.conf&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787dae5d0e0a243d4f49a28.png709.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;用记事本打开，修改内容：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787db57d0e0a243d4f49a4c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787db56d0e0a243d4f49a4b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;将其中所有&lt;strong&gt;MD&lt;/strong&gt;修改为&lt;strong&gt;MT&lt;/strong&gt;，其中D的意思是动态编译（dynamic），T的意思是静态编译（static）源码。&lt;/p&gt;&#xA;&lt;p&gt;然后选择Visual Studio中的&lt;code&gt;x64 Native Tools Command Prompt for VS 2022&lt;/code&gt;运行：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pic1.imgdb.cn/item/6787dae6d0e0a243d4f49a29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;切换到目录&lt;code&gt;.\Qt\qt-everywhere-src-6.7.3&lt;/code&gt;下，输入命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;configure.bat -static -static-runtime -prefix &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E:\ProgramFile\Qt\qt6.7.3-static&amp;#34;&lt;/span&gt; -confirm-license -opensource -debug-and-release -platform win32-msvc  -nomake examples -nomake tests   -qt-zlib -qt-libpng -qt-libjpeg -opengl dynamic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，根据需要，修改双引号内的路径，这是最终静态编译结果的生成地址，指令参数解读如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust学习笔记（1）</title>
      <link>https://lamaper.github.io/post/programing/rust-study/rust-study-1/</link>
      <pubDate>Thu, 24 Oct 2024 20:41:42 +0800</pubDate>
      <guid>https://lamaper.github.io/post/programing/rust-study/rust-study-1/</guid>
      <description>&lt;h3 id=&#34;string和str&#34;&gt;String和&amp;amp;str&lt;/h3&gt;&#xA;&lt;p&gt;在rustlings的练习题中见到了一些判断类型的题：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string_slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;.to_string());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string(String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rust is fun!&amp;#34;&lt;/span&gt;.to_owned());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string_slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nice weather&amp;#34;&lt;/span&gt;.into());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string(format!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Interpolation &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Station&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// WARNING: This is byte indexing, not character indexing.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Character indexing can be done using `s.chars().nth(INDEX)`.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    string_slice(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string_slice(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  hello there &amp;#34;&lt;/span&gt;.trim());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Happy Monday!&amp;#34;&lt;/span&gt;.replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mon&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tues&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mY sHiFt KeY iS sTiCkY&amp;#34;&lt;/span&gt;.to_lowercase());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个&amp;amp;str类型的字符串可以通过&lt;code&gt;.to_string()&lt;/code&gt;进行转换。&lt;/p&gt;&#xA;&lt;p&gt;如果需要删除一个字符串中的空格键，可以使用&lt;code&gt;.trim()&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;如果需要在一个字符串（String）后面加上一个新的字符串，可以有如下操作：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compose_me&lt;/span&gt;(input: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; String {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// TODO: Add &amp;#34; world!&amp;#34; to the string! There are multiple ways to do this.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; input.to_string() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; world!&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实对于这段代码我是有点疑惑的，因为在前面的认知中，单独的双引号应当是字符串切片，而不是字符串，但是这里显然，一个String与一个字符串切片的连接，是一个String，而不是一个&amp;amp;str，有点意思。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git学习笔记（1）</title>
      <link>https://lamaper.github.io/post/programing/git-study/git-study-1/</link>
      <pubDate>Mon, 14 Oct 2024 15:39:42 +0800</pubDate>
      <guid>https://lamaper.github.io/post/programing/git-study/git-study-1/</guid>
      <description>&lt;h3 id=&#34;本地git向github提交代码&#34;&gt;本地Git向GitHub提交代码&lt;/h3&gt;&#xA;&lt;h4 id=&#34;建立ssh连接&#34;&gt;建立SSH连接&lt;/h4&gt;&#xA;&lt;p&gt;初次向github推送自己的代码，需要创建ssh-key&lt;/p&gt;&#xA;&lt;p&gt;首先在任意目录下打开git bash，键入：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t rsa -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourEmail@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会在&lt;code&gt;~/.ssh&lt;/code&gt;目录下生成两个文件，我们复制公钥：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clip &amp;lt; ~/.ssh/id_rsa.pub&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着进入&lt;a href=&#34;https://github.com/settings/keys&#34;&gt;SSH and GPG keys (github.com)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择&lt;code&gt;new SSH key&lt;/code&gt;，将公钥粘贴进去即可。&lt;/p&gt;&#xA;&lt;h4 id=&#34;设置本地git&#34;&gt;设置本地git&lt;/h4&gt;&#xA;&lt;p&gt;首先，在没有其他特殊需求的情况下，设置全局用户名和邮箱：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourName&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourEmail@example.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，在你已经配置好github的情况下，测试连接是否正常：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -T git@github.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;进行代码操作&#34;&gt;进行代码操作&lt;/h4&gt;&#xA;&lt;p&gt;首先将仓库的代码克隆到本地：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/yourName/example.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;紧接着，进入到这个目录中去，初始化仓库：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看仓库状态：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git status&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，克隆下来的代码自带git配置，所以不需要在进行分支设置，直接对其进行同步操作即可：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;紧接着可以对仓库内的东西进行修改。&lt;/p&gt;&#xA;&lt;p&gt;在修改结束后，将仓库内需要更新的文件添加如仓库，一般我们同步全部的资料：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这之后我们可以进行代码的提交：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this is a example&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后将代码同步到云端：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可完成操作&lt;/p&gt;&#xA;&lt;h4 id=&#34;git-pullpush-遭遇网络问题&#34;&gt;git pull/push 遭遇网络问题&lt;/h4&gt;&#xA;&lt;p&gt;一般来说，github的连接很不稳定，常用VPN进行加速，但因此会使得SSH连接异常，解决方法是将自己git的端口改为同VPN系统代理一样的端口：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global http.proxy http://127.0.0.1:&amp;lt;端口&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global https.proxy https://127.0.0.1:&amp;lt;相同的端口&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;特别地，如果需要sock5代理，也是如下操作：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quark-n（夸克开发板）学习笔记</title>
      <link>https://lamaper.github.io/post/programing/quark/quark-note/</link>
      <pubDate>Thu, 05 Oct 2023 14:06:00 +0800</pubDate>
      <guid>https://lamaper.github.io/post/programing/quark/quark-note/</guid>
      <description>&lt;p&gt;author：lamaper&lt;/p&gt;&#xA;&lt;h2 id=&#34;一准备工序&#34;&gt;一、准备工序&lt;/h2&gt;&#xA;&lt;p&gt;首先需要了解夸克（Quark）的各种属性，这是夸克开发板的wiki：&lt;a href=&#34;https://wiki.seeedstudio.com/cn/Quantum-Mini-Linux-Development-Kit/&#34;&gt;“夸克（Quark）”迷你开发者套件 | Seeed Studio Wiki&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;夸克使用全志3芯片，发热很高，需要加装散热片或风扇。&lt;/p&gt;&#xA;&lt;p&gt;夸克使用USB Type-C进行供电和数据传输，可以使用虚拟终端软件来连接开发板，推荐的连接软件有&lt;em&gt;MobaXtrem&lt;/em&gt;和&lt;em&gt;XShell&lt;/em&gt;，&lt;a href=&#34;https://mobaxterm.mobatek.net/download-home-edition.html&#34;&gt;MobaXterm个人版下载地址 (mobatek.net)&lt;/a&gt;，&lt;a href=&#34;https://www.xshell.com/zh/xshell/&#34;&gt;XSHELL 下载地址&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;需要注意的是在使用Type-C连接开发板时，一定要下载对应的驱动，否则无法正常连接，出现的报错为：”未能成功安装驱动设备和程序“&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;D:%5CTyporaImages%5C20230910233342.jpg&#34; alt=&#34;20230910233342&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;观察到报错信息为”CP2102N USB to UART Bridge Controller“驱动未安装，所以我们下载相应的驱动&lt;a href=&#34;https://www.drvsky.com/driver/CP2102.htm&#34;&gt;CP2102 USB to UART Bridge Controller 驱动下载 - 驱动天空 (drvsky.com)&lt;/a&gt;，安装成功后即可正常连接。&lt;/p&gt;&#xA;&lt;p&gt;接下来我们通过MobaXterm连接开发板，在主界面找到Session；&lt;/p&gt;&#xA;&lt;p&gt;然后选择Serial，找到对应的串口连接，调整数据传输速度Speed到适应的数值，点击OK即可正常连接。&lt;/p&gt;&#xA;&lt;p&gt;推荐观看&lt;a href=&#34;https://www.bilibili.com/video/BV1144y1E7wX/?spm_id_from=333.788&amp;amp;vd_source=dfff592efb4ad4e2eb9d4bfa3fde8b62&#34;&gt;【教你玩】稚晖君的夸克的EMMC、扩容、WIFI、GPIO_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二基础设置&#34;&gt;二、基础设置&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1安装系统&#34;&gt;1、安装系统&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;与树莓派一样，Quark-N可以通过SD卡上面烧录的镜像启动系统，但是也可以通过SOM上搭载的eMMC启动系统。启动顺序是这样的：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当检测到SD卡插入且包含可启动的系统时，会进入SD卡系统&lt;/li&gt;&#xA;&lt;li&gt;否则如果eMMC中有可启动的系统的话，就会进入eMMC的系统&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;另外值得注意的是，不论是从SD卡启动还是从eMMC启动，当前运行系统所在的储存设备名都是&lt;code&gt;/dev/mmcblk0&lt;/code&gt;，操作相关文件的时候不要弄错了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;比较合理的开发模式是：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用Atom-N开发套件验证您的项目，运行在SD卡中的镜像系统&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;验证完成项目之后通过Atom-N底板将SD卡中调试好的系统通过&lt;code&gt;dd命令&lt;/code&gt;等方式拷贝到eMMC&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设计自己的底板（无需添加SD卡），插上调试好的Quark-N顺利部署系统&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;我们可以先烧录镜像到TF卡上，然后拷贝到emmc中，进行首次亮机。&lt;/p&gt;&#xA;&lt;p&gt;首先下载最新系统镜像&lt;a href=&#34;https://files.seeedstudio.com/wiki/Quantum-Mini-Linux-Dev-Kit/quark-n-21-1-11.zip&#34;&gt;quark-n-21-1-11&lt;/a&gt;，然后使用&lt;a href=&#34;https://etcher.balena.io/&#34;&gt;balenaEtcher - Flash OS images to SD cards &amp;amp; USB drives&lt;/a&gt;工具将镜像烧录到TF卡中，紧接着插入TF到开发板卡槽中，启动开发板。&lt;/p&gt;&#xA;&lt;p&gt;进入系统后首先转移系统到emmc上，在此之前，先通过&lt;code&gt;sudo fdisk -i&lt;/code&gt;获得磁盘参数，然后运行以下命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/mmcblk0 of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/mmcblk1 bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EMMC的Block数+1&amp;#34;&lt;/span&gt; &amp;amp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了观察复制进度，运行以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo watch -n &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; pkill -USR1 ^dd$&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待复制结束后，emmc中存在一个新的系统。此时拔掉TF卡，重新启动开发板，进入到emmc系统中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Qt5.12学习记录（已废弃）</title>
      <link>https://lamaper.github.io/post/programing/qt/qt-study/</link>
      <pubDate>Wed, 01 Jun 2022 12:00:00 +0800</pubDate>
      <guid>https://lamaper.github.io/post/programing/qt/qt-study/</guid>
      <description>&lt;h1 id=&#34;qt学习笔记&#34;&gt;Qt学习笔记&lt;/h1&gt;&#xA;&lt;p&gt;lamaper  2022/6/1&lt;/p&gt;&#xA;&lt;p&gt;参考网站&lt;a href=&#34;http://www.baiziqing.cn/index.php/archives/26/&#34;&gt;Qt编程（1） - 子卿の小站 (baiziqing.cn)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;参考教程https://www.bilibili.com/video/BV1t64y1f7d1&lt;/p&gt;&#xA;&lt;h2 id=&#34;第一章-qt的基本使用&#34;&gt;第一章 Qt的基本使用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1qtcreator快捷键1&#34;&gt;1、QtCreator快捷键（1）&lt;/h3&gt;&#xA;&lt;p&gt;选中某一主类 F1 查看开发文档，F2查看源文件，&lt;/p&gt;&#xA;&lt;p&gt;进入.h文件 F4 切换至对应的.cpp文件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-基础知识和qpushbutton&#34;&gt;2、 基础知识和QPushButton&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;widget.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;QApplication&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//应用程序类&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    QApplication a(argc, argv);&lt;span style=&#34;color:#75715e&#34;&gt;//每个Qt程序只有一个&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    Widget w;&lt;span style=&#34;color:#75715e&#34;&gt;//窗口类，创建后默认不显示&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    w.show();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a.exec();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Qt的基本框架（.pro）&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在项目文件中, 注释需要使用 井号(#)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 项目编译的时候需要加载哪些底层模块&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;QT       &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; core gui &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 如果当前Qt版本大于4, 会添加一个额外的模块: widgets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Qt 5中对gui模块进行了拆分, 将 widgets 独立出来了&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;greaterThan(QT_MAJOR_VERSION, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; QT &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; widgets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用c++11新特性&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CONFIG &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#如果在项目中调用了废弃的函数, 项目编译的时候会有警告的提示  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;DEFINES &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; QT_DEPRECATED_WARNINGS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 项目中的源文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;SOURCES &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        main.cpp \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mainwindow.cpp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 项目中的头文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;HEADERS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mainwindow.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 项目中的窗口界面文件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;FORMS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mainwindow.ui&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以Qwidget为例。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
